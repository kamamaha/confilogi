/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e,t,n={358:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Rubik:wght@400;500&display=swap);"]),i.push([e.id,'*{scroll-behavior:smooth}a{font-weight:400;color:inherit;text-decoration:none}a:hover{color:inherit}body{margin:0;font-family:"Rubik",sans-serif !important}',"",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAEA,EACE,sBAAA,CAGF,EACE,eAAA,CACA,aAAA,CACA,oBAAA,CAGF,QACE,aAAA,CAGF,KACE,QAAA,CACA,yCAAA",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Rubik:wght@400;500&display=swap');\r\n\r\n*{\r\n  scroll-behavior: smooth;\r\n}\r\n\r\na {\r\n  font-weight: 400;\r\n  color: inherit;\r\n  text-decoration: none;\r\n}\r\n\r\na:hover {\r\n  color: inherit;\r\n}\r\n\r\nbody {\r\n  margin: 0;\r\n  font-family: 'Rubik', sans-serif !important;\r\n}\r\n"],sourceRoot:""}]);const s=i},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},679:(e,t,n)=>{"use strict";var r=n(864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return r.isMemo(e)?i:s[e.$$typeof]||o}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[r.Memo]=i;var c=Object.defineProperty,u=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=u(n);d&&(i=i.concat(d(n)));for(var s=l(t),m=l(n),g=0;g<i.length;++g){var v=i[g];if(!(a[v]||r&&r[v]||m&&m[v]||s&&s[v])){var y=f(n,v);try{c(t,v,y)}catch(e){}}}}return t}},554:(e,t,n)=>{e=n.nmd(e);var r="__lodash_hash_undefined__",o=800,a=16,i=9007199254740991,s="[object Arguments]",l="[object AsyncFunction]",c="[object Function]",u="[object GeneratorFunction]",d="[object Null]",f="[object Object]",p="[object Proxy]",h="[object Undefined]",m=/^\[object .+?Constructor\]$/,g=/^(?:0|[1-9]\d*)$/,v={};v["[object Float32Array]"]=v["[object Float64Array]"]=v["[object Int8Array]"]=v["[object Int16Array]"]=v["[object Int32Array]"]=v["[object Uint8Array]"]=v["[object Uint8ClampedArray]"]=v["[object Uint16Array]"]=v["[object Uint32Array]"]=!0,v[s]=v["[object Array]"]=v["[object ArrayBuffer]"]=v["[object Boolean]"]=v["[object DataView]"]=v["[object Date]"]=v["[object Error]"]=v[c]=v["[object Map]"]=v["[object Number]"]=v[f]=v["[object RegExp]"]=v["[object Set]"]=v["[object String]"]=v["[object WeakMap]"]=!1;var y,b,x,w="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,k="object"==typeof self&&self&&self.Object===Object&&self,S=w||k||Function("return this")(),E=t&&!t.nodeType&&t,C=E&&e&&!e.nodeType&&e,_=C&&C.exports===E,P=_&&w.process,A=function(){try{return C&&C.require&&C.require("util").types||P&&P.binding&&P.binding("util")}catch(e){}}(),T=A&&A.isTypedArray,z=Array.prototype,M=Function.prototype,F=Object.prototype,O=S["__core-js_shared__"],R=M.toString,j=F.hasOwnProperty,I=(y=/[^.]+$/.exec(O&&O.keys&&O.keys.IE_PROTO||""))?"Symbol(src)_1."+y:"",N=F.toString,D=R.call(Object),L=RegExp("^"+R.call(j).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),B=_?S.Buffer:void 0,$=S.Symbol,V=S.Uint8Array,W=(B&&B.allocUnsafe,b=Object.getPrototypeOf,x=Object,function(e){return b(x(e))}),H=Object.create,U=F.propertyIsEnumerable,q=z.splice,G=$?$.toStringTag:void 0,Y=function(){try{var e=me(Object,"defineProperty");return e({},"",{}),e}catch(e){}}(),X=B?B.isBuffer:void 0,Q=Math.max,K=Date.now,Z=me(S,"Map"),J=me(Object,"create"),ee=function(){function e(){}return function(t){if(!Pe(t))return{};if(H)return H(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();function te(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function ne(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function re(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function oe(e){var t=this.__data__=new ne(e);this.size=t.size}function ae(e,t,n){(void 0!==n&&!xe(e[t],n)||void 0===n&&!(t in e))&&le(e,t,n)}function ie(e,t,n){var r=e[t];j.call(e,t)&&xe(r,n)&&(void 0!==n||t in e)||le(e,t,n)}function se(e,t){for(var n=e.length;n--;)if(xe(e[n][0],t))return n;return-1}function le(e,t,n){"__proto__"==t&&Y?Y(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}te.prototype.clear=function(){this.__data__=J?J(null):{},this.size=0},te.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},te.prototype.get=function(e){var t=this.__data__;if(J){var n=t[e];return n===r?void 0:n}return j.call(t,e)?t[e]:void 0},te.prototype.has=function(e){var t=this.__data__;return J?void 0!==t[e]:j.call(t,e)},te.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=J&&void 0===t?r:t,this},ne.prototype.clear=function(){this.__data__=[],this.size=0},ne.prototype.delete=function(e){var t=this.__data__,n=se(t,e);return!(n<0||(n==t.length-1?t.pop():q.call(t,n,1),--this.size,0))},ne.prototype.get=function(e){var t=this.__data__,n=se(t,e);return n<0?void 0:t[n][1]},ne.prototype.has=function(e){return se(this.__data__,e)>-1},ne.prototype.set=function(e,t){var n=this.__data__,r=se(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},re.prototype.clear=function(){this.size=0,this.__data__={hash:new te,map:new(Z||ne),string:new te}},re.prototype.delete=function(e){var t=he(this,e).delete(e);return this.size-=t?1:0,t},re.prototype.get=function(e){return he(this,e).get(e)},re.prototype.has=function(e){return he(this,e).has(e)},re.prototype.set=function(e,t){var n=he(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},oe.prototype.clear=function(){this.__data__=new ne,this.size=0},oe.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},oe.prototype.get=function(e){return this.__data__.get(e)},oe.prototype.has=function(e){return this.__data__.has(e)},oe.prototype.set=function(e,t){var n=this.__data__;if(n instanceof ne){var r=n.__data__;if(!Z||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new re(r)}return n.set(e,t),this.size=n.size,this};var ce=function(e,t,n){for(var r=-1,o=Object(e),a=n(e),i=a.length;i--;){var s=a[++r];if(!1===t(o[s],s,o))break}return e};function ue(e){return null==e?void 0===e?h:d:G&&G in Object(e)?function(e){var t=j.call(e,G),n=e[G];try{e[G]=void 0;var r=!0}catch(e){}var o=N.call(e);return r&&(t?e[G]=n:delete e[G]),o}(e):function(e){return N.call(e)}(e)}function de(e){return Ae(e)&&ue(e)==s}function fe(e,t,n,r,o){e!==t&&ce(t,(function(a,i){if(o||(o=new oe),Pe(a))!function(e,t,n,r,o,a,i){var s=ye(e,n),l=ye(t,n),c=i.get(l);if(c)ae(e,n,c);else{var u,d,p,h,m,g=a?a(s,l,n+"",e,t,i):void 0,v=void 0===g;if(v){var y=ke(l),b=!y&&Ee(l),x=!y&&!b&&Te(l);g=l,y||b||x?ke(s)?g=s:Ae(m=s)&&Se(m)?g=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}(s):b?(v=!1,g=function(e,t){return e.slice()}(l)):x?(v=!1,h=new(p=(u=l).buffer).constructor(p.byteLength),new V(h).set(new V(p)),d=h,g=new u.constructor(d,u.byteOffset,u.length)):g=[]:function(e){if(!Ae(e)||ue(e)!=f)return!1;var t=W(e);if(null===t)return!0;var n=j.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&R.call(n)==D}(l)||we(l)?(g=s,we(s)?g=function(e){return function(e,t,n,r){var o=!n;n||(n={});for(var a=-1,i=t.length;++a<i;){var s=t[a],l=void 0;void 0===l&&(l=e[s]),o?le(n,s,l):ie(n,s,l)}return n}(e,ze(e))}(s):Pe(s)&&!Ce(s)||(g=function(e){return"function"!=typeof e.constructor||ve(e)?{}:ee(W(e))}(l))):v=!1}v&&(i.set(l,g),o(g,l,r,a,i),i.delete(l)),ae(e,n,g)}}(e,t,i,n,fe,r,o);else{var s=r?r(ye(e,i),a,i+"",e,t,o):void 0;void 0===s&&(s=a),ae(e,i,s)}}),ze)}var pe=Y?function(e,t){return Y(e,"toString",{configurable:!0,enumerable:!1,value:(n=t,function(){return n}),writable:!0});var n}:Oe;function he(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function me(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return function(e){return!(!Pe(e)||function(e){return!!I&&I in e}(e))&&(Ce(e)?L:m).test(function(e){if(null!=e){try{return R.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e))}(n)?n:void 0}function ge(e,t){var n=typeof e;return!!(t=null==t?i:t)&&("number"==n||"symbol"!=n&&g.test(e))&&e>-1&&e%1==0&&e<t}function ve(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||F)}function ye(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var be=function(e){var t=0,n=0;return function(){var r=K(),i=a-(r-n);if(n=r,i>0){if(++t>=o)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}(pe);function xe(e,t){return e===t||e!=e&&t!=t}var we=de(function(){return arguments}())?de:function(e){return Ae(e)&&j.call(e,"callee")&&!U.call(e,"callee")},ke=Array.isArray;function Se(e){return null!=e&&_e(e.length)&&!Ce(e)}var Ee=X||function(){return!1};function Ce(e){if(!Pe(e))return!1;var t=ue(e);return t==c||t==u||t==l||t==p}function _e(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=i}function Pe(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Ae(e){return null!=e&&"object"==typeof e}var Te=T?function(e){return function(t){return e(t)}}(T):function(e){return Ae(e)&&_e(e.length)&&!!v[ue(e)]};function ze(e){return Se(e)?function(e,t){var n=ke(e),r=!n&&we(e),o=!n&&!r&&Ee(e),a=!n&&!r&&!o&&Te(e),i=n||r||o||a,s=i?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],l=s.length;for(var c in e)!t&&!j.call(e,c)||i&&("length"==c||o&&("offset"==c||"parent"==c)||a&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||ge(c,l))||s.push(c);return s}(e,!0):function(e){if(!Pe(e))return function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}(e);var t=ve(e),n=[];for(var r in e)("constructor"!=r||!t&&j.call(e,r))&&n.push(r);return n}(e)}var Me,Fe=(Me=function(e,t,n,r){fe(e,t,n,r)},function(e,t){return be(function(e,t,n){return t=Q(void 0===t?e.length-1:t,0),function(){for(var r=arguments,o=-1,a=Q(r.length-t,0),i=Array(a);++o<a;)i[o]=r[t+o];o=-1;for(var s=Array(t+1);++o<t;)s[o]=r[o];return s[t]=n(i),function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}(e,this,s)}}(e,t,Oe),e+"")}((function(e,t){var n=-1,r=t.length,o=r>1?t[r-1]:void 0,a=r>2?t[2]:void 0;for(o=Me.length>3&&"function"==typeof o?(r--,o):void 0,a&&function(e,t,n){if(!Pe(n))return!1;var r=typeof t;return!!("number"==r?Se(n)&&ge(t,n.length):"string"==r&&t in n)&&xe(n[t],e)}(t[0],t[1],a)&&(o=r<3?void 0:o,r=1),e=Object(e);++n<r;){var i=t[n];i&&Me(e,i,n,o)}return e})));function Oe(e){return e}e.exports=Fe},448:(e,t,n)=>{"use strict";var r=n(294),o=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,s={};function l(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(s[e]=t,e=0;e<t.length;e++)i.add(t[e])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!d.call(h,e)||!d.call(p,e)&&(f.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var x=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),k=Symbol.for("react.portal"),S=Symbol.for("react.fragment"),E=Symbol.for("react.strict_mode"),C=Symbol.for("react.profiler"),_=Symbol.for("react.provider"),P=Symbol.for("react.context"),A=Symbol.for("react.forward_ref"),T=Symbol.for("react.suspense"),z=Symbol.for("react.suspense_list"),M=Symbol.for("react.memo"),F=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var O=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var R=Symbol.iterator;function j(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=R&&e[R]||e["@@iterator"])?e:null}var I,N=Object.assign;function D(e){if(void 0===I)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);I=t&&t[1]||""}return"\n"+I+e}var L=!1;function B(e,t){if(!e||L)return"";L=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,s=a.length-1;1<=i&&0<=s&&o[i]!==a[s];)s--;for(;1<=i&&0<=s;i--,s--)if(o[i]!==a[s]){if(1!==i||1!==s)do{if(i--,0>--s||o[i]!==a[s]){var l="\n"+o[i].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=i&&0<=s);break}}}finally{L=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?D(e):""}function $(e){switch(e.tag){case 5:return D(e.type);case 16:return D("Lazy");case 13:return D("Suspense");case 19:return D("SuspenseList");case 0:case 2:case 15:return B(e.type,!1);case 11:return B(e.type.render,!1);case 1:return B(e.type,!0);default:return""}}function V(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case k:return"Portal";case C:return"Profiler";case E:return"StrictMode";case T:return"Suspense";case z:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case _:return(e._context.displayName||"Context")+".Provider";case A:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case M:return null!==(t=e.displayName||null)?t:V(e.type)||"Memo";case F:t=e._payload,e=e._init;try{return V(e(t))}catch(e){}}return null}function W(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return V(t);case 8:return t===E?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function H(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function U(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function q(e){e._valueTracker||(e._valueTracker=function(e){var t=U(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=U(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Y(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function X(e,t){var n=t.checked;return N({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Q(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=H(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function K(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function Z(e,t){K(e,t);var n=H(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,H(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Y(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+H(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return N({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:H(n)}}function ae(e,t){var n=H(t.value),r=H(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function se(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?se(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,ue,de=(ue=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ue(e,t)}))}:ue);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ve=N({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var xe=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var ke=null,Se=null,Ee=null;function Ce(e){if(e=xo(e)){if("function"!=typeof ke)throw Error(a(280));var t=e.stateNode;t&&(t=ko(t),ke(e.stateNode,e.type,t))}}function _e(e){Se?Ee?Ee.push(e):Ee=[e]:Se=e}function Pe(){if(Se){var e=Se,t=Ee;if(Ee=Se=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}function Ae(e,t){return e(t)}function Te(){}var ze=!1;function Me(e,t,n){if(ze)return e(t,n);ze=!0;try{return Ae(e,t,n)}finally{ze=!1,(null!==Se||null!==Ee)&&(Te(),Pe())}}function Fe(e,t){var n=e.stateNode;if(null===n)return null;var r=ko(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Oe=!1;if(u)try{var Re={};Object.defineProperty(Re,"passive",{get:function(){Oe=!0}}),window.addEventListener("test",Re,Re),window.removeEventListener("test",Re,Re)}catch(ue){Oe=!1}function je(e,t,n,r,o,a,i,s,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Ie=!1,Ne=null,De=!1,Le=null,Be={onError:function(e){Ie=!0,Ne=e}};function $e(e,t,n,r,o,a,i,s,l){Ie=!1,Ne=null,je.apply(Be,arguments)}function Ve(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function We(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function He(e){if(Ve(e)!==e)throw Error(a(188))}function Ue(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ve(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return He(o),e;if(i===r)return He(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var s=!1,l=o.child;l;){if(l===n){s=!0,n=o,r=i;break}if(l===r){s=!0,r=o,n=i;break}l=l.sibling}if(!s){for(l=i.child;l;){if(l===n){s=!0,n=i,r=o;break}if(l===r){s=!0,r=i,n=o;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?qe(e):null}function qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=qe(e);if(null!==t)return t;e=e.sibling}return null}var Ge=o.unstable_scheduleCallback,Ye=o.unstable_cancelCallback,Xe=o.unstable_shouldYield,Qe=o.unstable_requestPaint,Ke=o.unstable_now,Ze=o.unstable_getCurrentPriorityLevel,Je=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,at=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(st(e)/lt|0)|0},st=Math.log,lt=Math.LN2,ct=64,ut=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,a=e.pingedLanes,i=268435455&n;if(0!==i){var s=i&~o;0!==s?r=dt(s):0!=(a&=i)&&(r=dt(a))}else 0!=(i=n&~o)?r=dt(i):0!==a&&(r=dt(a));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(a=t&-t)||16===o&&0!=(4194240&a)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-it(t)),r|=e[n],t&=~o;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ct;return 0==(4194240&(ct<<=1))&&(ct=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function vt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function xt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var wt,kt,St,Et,Ct,_t=!1,Pt=[],At=null,Tt=null,zt=null,Mt=new Map,Ft=new Map,Ot=[],Rt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function jt(e,t){switch(e){case"focusin":case"focusout":At=null;break;case"dragenter":case"dragleave":Tt=null;break;case"mouseover":case"mouseout":zt=null;break;case"pointerover":case"pointerout":Mt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Ft.delete(t.pointerId)}}function It(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=xo(t))&&kt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Nt(e){var t=bo(e.target);if(null!==t){var n=Ve(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=We(n)))return e.blockedOn=t,void Ct(e.priority,(function(){St(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Dt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=xo(n))&&kt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);xe=r,n.target.dispatchEvent(r),xe=null,t.shift()}return!0}function Lt(e,t,n){Dt(e)&&n.delete(t)}function Bt(){_t=!1,null!==At&&Dt(At)&&(At=null),null!==Tt&&Dt(Tt)&&(Tt=null),null!==zt&&Dt(zt)&&(zt=null),Mt.forEach(Lt),Ft.forEach(Lt)}function $t(e,t){e.blockedOn===t&&(e.blockedOn=null,_t||(_t=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Bt)))}function Vt(e){function t(t){return $t(t,e)}if(0<Pt.length){$t(Pt[0],e);for(var n=1;n<Pt.length;n++){var r=Pt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==At&&$t(At,e),null!==Tt&&$t(Tt,e),null!==zt&&$t(zt,e),Mt.forEach(t),Ft.forEach(t),n=0;n<Ot.length;n++)(r=Ot[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Ot.length&&null===(n=Ot[0]).blockedOn;)Nt(n),null===n.blockedOn&&Ot.shift()}var Wt=x.ReactCurrentBatchConfig,Ht=!0;function Ut(e,t,n,r){var o=bt,a=Wt.transition;Wt.transition=null;try{bt=1,Gt(e,t,n,r)}finally{bt=o,Wt.transition=a}}function qt(e,t,n,r){var o=bt,a=Wt.transition;Wt.transition=null;try{bt=4,Gt(e,t,n,r)}finally{bt=o,Wt.transition=a}}function Gt(e,t,n,r){if(Ht){var o=Xt(e,t,n,r);if(null===o)Hr(e,t,r,Yt,n),jt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return At=It(At,e,t,n,r,o),!0;case"dragenter":return Tt=It(Tt,e,t,n,r,o),!0;case"mouseover":return zt=It(zt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return Mt.set(a,It(Mt.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,Ft.set(a,It(Ft.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(jt(e,r),4&t&&-1<Rt.indexOf(e)){for(;null!==o;){var a=xo(o);if(null!==a&&wt(a),null===(a=Xt(e,t,n,r))&&Hr(e,t,r,Yt,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else Hr(e,t,r,null,n)}}var Yt=null;function Xt(e,t,n,r){if(Yt=null,null!==(e=bo(e=we(r))))if(null===(t=Ve(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=We(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Yt=e,null}function Qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Kt=null,Zt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Zt,r=n.length,o="value"in Kt?Kt.value:Kt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Jt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return N(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,sn,ln,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},un=on(cn),dn=N({},cn,{view:0,detail:0}),fn=on(dn),pn=N({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Cn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(an=e.screenX-ln.screenX,sn=e.screenY-ln.screenY):sn=an=0,ln=e),an)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),hn=on(pn),mn=on(N({},pn,{dataTransfer:0})),gn=on(N({},dn,{relatedTarget:0})),vn=on(N({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=N({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(yn),xn=on(N({},cn,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function En(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function Cn(){return En}var _n=N({},dn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Cn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Pn=on(_n),An=on(N({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=on(N({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Cn})),zn=on(N({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Mn=N({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Fn=on(Mn),On=[9,13,27,32],Rn=u&&"CompositionEvent"in window,jn=null;u&&"documentMode"in document&&(jn=document.documentMode);var In=u&&"TextEvent"in window&&!jn,Nn=u&&(!Rn||jn&&8<jn&&11>=jn),Dn=String.fromCharCode(32),Ln=!1;function Bn(e,t){switch(e){case"keyup":return-1!==On.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function $n(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Vn=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function Un(e,t,n,r){_e(r),0<(t=qr(t,"onChange")).length&&(n=new un("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var qn=null,Gn=null;function Yn(e){Dr(e,0)}function Xn(e){if(G(wo(e)))return e}function Qn(e,t){if("change"===e)return t}var Kn=!1;if(u){var Zn;if(u){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Zn=Jn}else Zn=!1;Kn=Zn&&(!document.documentMode||9<document.documentMode)}function tr(){qn&&(qn.detachEvent("onpropertychange",nr),Gn=qn=null)}function nr(e){if("value"===e.propertyName&&Xn(Gn)){var t=[];Un(t,Gn,e,we(e)),Me(Yn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Gn=n,(qn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Xn(Gn)}function ar(e,t){if("click"===e)return Xn(t)}function ir(e,t){if("input"===e||"change"===e)return Xn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function lr(e,t){if(sr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!d.call(t,o)||!sr(e[o],t[o]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ur(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=Y();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Y((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=fr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,a=Math.min(r.start,o);r=void 0===r.end?a:Math.min(r.end,o),!e.extend&&a>r&&(o=r,r=a,a=o),o=ur(n,a);var i=ur(n,r);o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=u&&"documentMode"in document&&11>=document.documentMode,gr=null,vr=null,yr=null,br=!1;function xr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==gr||gr!==Y(r)||(r="selectionStart"in(r=gr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&lr(yr,r)||(yr=r,0<(r=qr(vr,"onSelect")).length&&(t=new un("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function wr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kr={animationend:wr("Animation","AnimationEnd"),animationiteration:wr("Animation","AnimationIteration"),animationstart:wr("Animation","AnimationStart"),transitionend:wr("Transition","TransitionEnd")},Sr={},Er={};function Cr(e){if(Sr[e])return Sr[e];if(!kr[e])return e;var t,n=kr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Er)return Sr[e]=n[t];return e}u&&(Er=document.createElement("div").style,"AnimationEvent"in window||(delete kr.animationend.animation,delete kr.animationiteration.animation,delete kr.animationstart.animation),"TransitionEvent"in window||delete kr.transitionend.transition);var _r=Cr("animationend"),Pr=Cr("animationiteration"),Ar=Cr("animationstart"),Tr=Cr("transitionend"),zr=new Map,Mr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Fr(e,t){zr.set(e,t),l(t,[e])}for(var Or=0;Or<Mr.length;Or++){var Rr=Mr[Or];Fr(Rr.toLowerCase(),"on"+(Rr[0].toUpperCase()+Rr.slice(1)))}Fr(_r,"onAnimationEnd"),Fr(Pr,"onAnimationIteration"),Fr(Ar,"onAnimationStart"),Fr("dblclick","onDoubleClick"),Fr("focusin","onFocus"),Fr("focusout","onBlur"),Fr(Tr,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var jr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ir=new Set("cancel close invalid load scroll toggle".split(" ").concat(jr));function Nr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,s,l,c){if($e.apply(this,arguments),Ie){if(!Ie)throw Error(a(198));var u=Ne;Ie=!1,Ne=null,De||(De=!0,Le=u)}}(r,t,void 0,e),e.currentTarget=null}function Dr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var s=r[i],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==a&&o.isPropagationStopped())break e;Nr(o,s,c),a=l}else for(i=0;i<r.length;i++){if(l=(s=r[i]).instance,c=s.currentTarget,s=s.listener,l!==a&&o.isPropagationStopped())break e;Nr(o,s,c),a=l}}}if(De)throw e=Le,De=!1,Le=null,e}function Lr(e,t){var n=t[go];void 0===n&&(n=t[go]=new Set);var r=e+"__bubble";n.has(r)||(Wr(t,e,2,!1),n.add(r))}function Br(e,t,n){var r=0;t&&(r|=4),Wr(n,e,r,t)}var $r="_reactListening"+Math.random().toString(36).slice(2);function Vr(e){if(!e[$r]){e[$r]=!0,i.forEach((function(t){"selectionchange"!==t&&(Ir.has(t)||Br(t,!1,e),Br(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[$r]||(t[$r]=!0,Br("selectionchange",!1,t))}}function Wr(e,t,n,r){switch(Qt(t)){case 1:var o=Ut;break;case 4:o=qt;break;default:o=Gt}n=o.bind(null,t,n,e),o=void 0,!Oe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Hr(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var s=r.stateNode.containerInfo;if(s===o||8===s.nodeType&&s.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var l=i.tag;if((3===l||4===l)&&((l=i.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;i=i.return}for(;null!==s;){if(null===(i=bo(s)))return;if(5===(l=i.tag)||6===l){r=a=i;continue e}s=s.parentNode}}r=r.return}Me((function(){var r=a,o=we(n),i=[];e:{var s=zr.get(e);if(void 0!==s){var l=un,c=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=Pn;break;case"focusin":c="focus",l=gn;break;case"focusout":c="blur",l=gn;break;case"beforeblur":case"afterblur":l=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Tn;break;case _r:case Pr:case Ar:l=vn;break;case Tr:l=zn;break;case"scroll":l=fn;break;case"wheel":l=Fn;break;case"copy":case"cut":case"paste":l=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=An}var u=0!=(4&t),d=!u&&"scroll"===e,f=u?null!==s?s+"Capture":null:s;u=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==f&&null!=(m=Fe(h,f))&&u.push(Ur(h,m,p))),d)break;h=h.return}0<u.length&&(s=new l(s,c,null,n,o),i.push({event:s,listeners:u}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||n===xe||!(c=n.relatedTarget||n.fromElement)||!bo(c)&&!c[mo])&&(l||s)&&(s=o.window===o?o:(s=o.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(c=(c=n.relatedTarget||n.toElement)?bo(c):null)&&(c!==(d=Ve(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(u=hn,m="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(u=An,m="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==l?s:wo(l),p=null==c?s:wo(c),(s=new u(m,h+"leave",l,n,o)).target=d,s.relatedTarget=p,m=null,bo(o)===r&&((u=new u(f,h+"enter",c,n,o)).target=p,u.relatedTarget=d,m=u),d=m,l&&c)e:{for(f=c,h=0,p=u=l;p;p=Gr(p))h++;for(p=0,m=f;m;m=Gr(m))p++;for(;0<h-p;)u=Gr(u),h--;for(;0<p-h;)f=Gr(f),p--;for(;h--;){if(u===f||null!==f&&u===f.alternate)break e;u=Gr(u),f=Gr(f)}u=null}else u=null;null!==l&&Yr(i,s,l,u,!1),null!==c&&null!==d&&Yr(i,d,c,u,!0)}if("select"===(l=(s=r?wo(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var g=Qn;else if(Hn(s))if(Kn)g=ir;else{g=or;var v=rr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(g=ar);switch(g&&(g=g(e,r))?Un(i,g,n,o):(v&&v(e,s,r),"focusout"===e&&(v=s._wrapperState)&&v.controlled&&"number"===s.type&&ee(s,"number",s.value)),v=r?wo(r):window,e){case"focusin":(Hn(v)||"true"===v.contentEditable)&&(gr=v,vr=r,yr=null);break;case"focusout":yr=vr=gr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,xr(i,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":xr(i,n,o)}var y;if(Rn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Vn?Bn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Nn&&"ko"!==n.locale&&(Vn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Vn&&(y=en()):(Zt="value"in(Kt=o)?Kt.value:Kt.textContent,Vn=!0)),0<(v=qr(r,b)).length&&(b=new xn(b,e,null,n,o),i.push({event:b,listeners:v}),(y||null!==(y=$n(n)))&&(b.data=y))),(y=In?function(e,t){switch(e){case"compositionend":return $n(t);case"keypress":return 32!==t.which?null:(Ln=!0,Dn);case"textInput":return(e=t.data)===Dn&&Ln?null:e;default:return null}}(e,n):function(e,t){if(Vn)return"compositionend"===e||!Rn&&Bn(e,t)?(e=en(),Jt=Zt=Kt=null,Vn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Nn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=qr(r,"onBeforeInput")).length&&(o=new xn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=y)}Dr(i,t)}))}function Ur(e,t,n){return{instance:e,listener:t,currentTarget:n}}function qr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Fe(e,n))&&r.unshift(Ur(e,a,o)),null!=(a=Fe(e,t))&&r.push(Ur(e,a,o))),e=e.return}return r}function Gr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Yr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var s=n,l=s.alternate,c=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==c&&(s=c,o?null!=(l=Fe(n,a))&&i.unshift(Ur(n,l,s)):o||null!=(l=Fe(n,a))&&i.push(Ur(n,l,s))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Xr=/\r\n?/g,Qr=/\u0000|\uFFFD/g;function Kr(e){return("string"==typeof e?e:""+e).replace(Xr,"\n").replace(Qr,"")}function Zr(e,t,n){if(t=Kr(t),Kr(e)!==t&&n)throw Error(a(425))}function Jr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,ao="function"==typeof Promise?Promise:void 0,io="function"==typeof queueMicrotask?queueMicrotask:void 0!==ao?function(e){return ao.resolve(null).then(e).catch(so)}:ro;function so(e){setTimeout((function(){throw e}))}function lo(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Vt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Vt(t)}function co(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function uo(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,go="__reactEvents$"+fo,vo="__reactListeners$"+fo,yo="__reactHandles$"+fo;function bo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=uo(e);null!==e;){if(n=e[po])return n;e=uo(e)}return t}n=(e=n).parentNode}return null}function xo(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function ko(e){return e[ho]||null}var So=[],Eo=-1;function Co(e){return{current:e}}function _o(e){0>Eo||(e.current=So[Eo],So[Eo]=null,Eo--)}function Po(e,t){Eo++,So[Eo]=e.current,e.current=t}var Ao={},To=Co(Ao),zo=Co(!1),Mo=Ao;function Fo(e,t){var n=e.type.contextTypes;if(!n)return Ao;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Oo(e){return null!=e.childContextTypes}function Ro(){_o(zo),_o(To)}function jo(e,t,n){if(To.current!==Ao)throw Error(a(168));Po(To,t),Po(zo,n)}function Io(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,W(e)||"Unknown",o));return N({},n,r)}function No(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Ao,Mo=To.current,Po(To,e),Po(zo,zo.current),!0}function Do(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=Io(e,t,Mo),r.__reactInternalMemoizedMergedChildContext=e,_o(zo),_o(To),Po(To,e)):_o(zo),Po(zo,n)}var Lo=null,Bo=!1,$o=!1;function Vo(e){null===Lo?Lo=[e]:Lo.push(e)}function Wo(){if(!$o&&null!==Lo){$o=!0;var e=0,t=bt;try{var n=Lo;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Lo=null,Bo=!1}catch(t){throw null!==Lo&&(Lo=Lo.slice(e+1)),Ge(Je,Wo),t}finally{bt=t,$o=!1}}return null}var Ho=[],Uo=0,qo=null,Go=0,Yo=[],Xo=0,Qo=null,Ko=1,Zo="";function Jo(e,t){Ho[Uo++]=Go,Ho[Uo++]=qo,qo=e,Go=t}function ea(e,t,n){Yo[Xo++]=Ko,Yo[Xo++]=Zo,Yo[Xo++]=Qo,Qo=e;var r=Ko;e=Zo;var o=32-it(r)-1;r&=~(1<<o),n+=1;var a=32-it(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,Ko=1<<32-it(t)+o|n<<o|r,Zo=a+e}else Ko=1<<a|n<<o|r,Zo=e}function ta(e){null!==e.return&&(Jo(e,1),ea(e,1,0))}function na(e){for(;e===qo;)qo=Ho[--Uo],Ho[Uo]=null,Go=Ho[--Uo],Ho[Uo]=null;for(;e===Qo;)Qo=Yo[--Xo],Yo[Xo]=null,Zo=Yo[--Xo],Yo[Xo]=null,Ko=Yo[--Xo],Yo[Xo]=null}var ra=null,oa=null,aa=!1,ia=null;function sa(e,t){var n=Fc(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function la(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ra=e,oa=co(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ra=e,oa=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Qo?{id:Ko,overflow:Zo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Fc(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ra=e,oa=null,!0);default:return!1}}function ca(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function ua(e){if(aa){var t=oa;if(t){var n=t;if(!la(e,t)){if(ca(e))throw Error(a(418));t=co(n.nextSibling);var r=ra;t&&la(e,t)?sa(r,n):(e.flags=-4097&e.flags|2,aa=!1,ra=e)}}else{if(ca(e))throw Error(a(418));e.flags=-4097&e.flags|2,aa=!1,ra=e}}}function da(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ra=e}function fa(e){if(e!==ra)return!1;if(!aa)return da(e),aa=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oa)){if(ca(e))throw pa(),Error(a(418));for(;t;)sa(e,t),t=co(t.nextSibling)}if(da(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oa=co(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oa=null}}else oa=ra?co(e.stateNode.nextSibling):null;return!0}function pa(){for(var e=oa;e;)e=co(e.nextSibling)}function ha(){oa=ra=null,aa=!1}function ma(e){null===ia?ia=[e]:ia.push(e)}var ga=x.ReactCurrentBatchConfig;function va(e,t){if(e&&e.defaultProps){for(var n in t=N({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var ya=Co(null),ba=null,xa=null,wa=null;function ka(){wa=xa=ba=null}function Sa(e){var t=ya.current;_o(ya),e._currentValue=t}function Ea(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ca(e,t){ba=e,wa=xa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(xs=!0),e.firstContext=null)}function _a(e){var t=e._currentValue;if(wa!==e)if(e={context:e,memoizedValue:t,next:null},null===xa){if(null===ba)throw Error(a(308));xa=e,ba.dependencies={lanes:0,firstContext:e}}else xa=xa.next=e;return t}var Pa=null;function Aa(e){null===Pa?Pa=[e]:Pa.push(e)}function Ta(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,Aa(t)):(n.next=o.next,o.next=n),t.interleaved=n,za(e,r)}function za(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Ma=!1;function Fa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Oa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ra(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ja(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Tl)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,za(e,n)}return null===(o=r.interleaved)?(t.next=t,Aa(r)):(t.next=o.next,o.next=t),r.interleaved=t,za(e,n)}function Ia(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function Na(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Da(e,t,n,r){var o=e.updateQueue;Ma=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,s=o.shared.pending;if(null!==s){o.shared.pending=null;var l=s,c=l.next;l.next=null,null===i?a=c:i.next=c,i=l;var u=e.alternate;null!==u&&(s=(u=u.updateQueue).lastBaseUpdate)!==i&&(null===s?u.firstBaseUpdate=c:s.next=c,u.lastBaseUpdate=l)}if(null!==a){var d=o.baseState;for(i=0,u=c=l=null,s=a;;){var f=s.lane,p=s.eventTime;if((r&f)===f){null!==u&&(u=u.next={eventTime:p,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var h=e,m=s;switch(f=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,f);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(f="function"==typeof(h=m.payload)?h.call(p,d,f):h))break e;d=N({},d,f);break e;case 2:Ma=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(f=o.effects)?o.effects=[s]:f.push(s))}else p={eventTime:p,lane:f,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===u?(c=u=p,l=d):u=u.next=p,i|=f;if(null===(s=s.next)){if(null===(s=o.shared.pending))break;s=(f=s).next,f.next=null,o.lastBaseUpdate=f,o.shared.pending=null}}if(null===u&&(l=d),o.baseState=l,o.firstBaseUpdate=c,o.lastBaseUpdate=u,null!==(t=o.shared.interleaved)){o=t;do{i|=o.lane,o=o.next}while(o!==t)}else null===a&&(o.shared.lanes=0);Nl|=i,e.lanes=i,e.memoizedState=d}}function La(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var Ba=(new r.Component).refs;function $a(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:N({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Va={isMounted:function(e){return!!(e=e._reactInternals)&&Ve(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=tc(),o=nc(e),a=Ra(r,o);a.payload=t,null!=n&&(a.callback=n),null!==(t=ja(e,a,o))&&(rc(t,e,o,r),Ia(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=tc(),o=nc(e),a=Ra(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=ja(e,a,o))&&(rc(t,e,o,r),Ia(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tc(),r=nc(e),o=Ra(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=ja(e,o,r))&&(rc(t,e,r,n),Ia(t,e,r))}};function Wa(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(o,a))}function Ha(e,t,n){var r=!1,o=Ao,a=t.contextType;return"object"==typeof a&&null!==a?a=_a(a):(o=Oo(t)?Mo:To.current,a=(r=null!=(r=t.contextTypes))?Fo(e,o):Ao),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Va,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function Ua(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Va.enqueueReplaceState(t,t.state,null)}function qa(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Ba,Fa(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=_a(a):(a=Oo(t)?Mo:To.current,o.context=Fo(e,a)),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&($a(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Va.enqueueReplaceState(o,o.state,null),Da(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function Ga(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=o.refs;t===Ba&&(t=o.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Ya(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Xa(e){return(0,e._init)(e._payload)}function Qa(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Rc(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function s(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Dc(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){var a=n.type;return a===S?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===F&&Xa(a)===t.type)?((r=o(t,n.props)).ref=Ga(e,t,n),r.return=e,r):((r=jc(n.type,n.key,n.props,null,e.mode,r)).ref=Ga(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Lc(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,a){return null===t||7!==t.tag?((t=Ic(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Dc(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=jc(t.type,t.key,t.props,null,e.mode,n)).ref=Ga(e,null,t),n.return=e,n;case k:return(t=Lc(t,e.mode,n)).return=e,t;case F:return f(e,(0,t._init)(t._payload),n)}if(te(t)||j(t))return(t=Ic(t,e.mode,n,null)).return=e,t;Ya(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===o?c(e,t,n,r):null;case k:return n.key===o?u(e,t,n,r):null;case F:return p(e,t,(o=n._init)(n._payload),r)}if(te(n)||j(n))return null!==o?null:d(e,t,n,r,null);Ya(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case k:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o);case F:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||j(r))return d(t,e=e.get(n)||null,r,o,null);Ya(t,r)}return null}function m(o,a,s,l){for(var c=null,u=null,d=a,m=a=0,g=null;null!==d&&m<s.length;m++){d.index>m?(g=d,d=null):g=d.sibling;var v=p(o,d,s[m],l);if(null===v){null===d&&(d=g);break}e&&d&&null===v.alternate&&t(o,d),a=i(v,a,m),null===u?c=v:u.sibling=v,u=v,d=g}if(m===s.length)return n(o,d),aa&&Jo(o,m),c;if(null===d){for(;m<s.length;m++)null!==(d=f(o,s[m],l))&&(a=i(d,a,m),null===u?c=d:u.sibling=d,u=d);return aa&&Jo(o,m),c}for(d=r(o,d);m<s.length;m++)null!==(g=h(d,o,m,s[m],l))&&(e&&null!==g.alternate&&d.delete(null===g.key?m:g.key),a=i(g,a,m),null===u?c=g:u.sibling=g,u=g);return e&&d.forEach((function(e){return t(o,e)})),aa&&Jo(o,m),c}function g(o,s,l,c){var u=j(l);if("function"!=typeof u)throw Error(a(150));if(null==(l=u.call(l)))throw Error(a(151));for(var d=u=null,m=s,g=s=0,v=null,y=l.next();null!==m&&!y.done;g++,y=l.next()){m.index>g?(v=m,m=null):v=m.sibling;var b=p(o,m,y.value,c);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(o,m),s=i(b,s,g),null===d?u=b:d.sibling=b,d=b,m=v}if(y.done)return n(o,m),aa&&Jo(o,g),u;if(null===m){for(;!y.done;g++,y=l.next())null!==(y=f(o,y.value,c))&&(s=i(y,s,g),null===d?u=y:d.sibling=y,d=y);return aa&&Jo(o,g),u}for(m=r(o,m);!y.done;g++,y=l.next())null!==(y=h(m,o,g,y.value,c))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),s=i(y,s,g),null===d?u=y:d.sibling=y,d=y);return e&&m.forEach((function(e){return t(o,e)})),aa&&Jo(o,g),u}return function e(r,a,i,l){if("object"==typeof i&&null!==i&&i.type===S&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case w:e:{for(var c=i.key,u=a;null!==u;){if(u.key===c){if((c=i.type)===S){if(7===u.tag){n(r,u.sibling),(a=o(u,i.props.children)).return=r,r=a;break e}}else if(u.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===F&&Xa(c)===u.type){n(r,u.sibling),(a=o(u,i.props)).ref=Ga(r,u,i),a.return=r,r=a;break e}n(r,u);break}t(r,u),u=u.sibling}i.type===S?((a=Ic(i.props.children,r.mode,l,i.key)).return=r,r=a):((l=jc(i.type,i.key,i.props,null,r.mode,l)).ref=Ga(r,a,i),l.return=r,r=l)}return s(r);case k:e:{for(u=i.key;null!==a;){if(a.key===u){if(4===a.tag&&a.stateNode.containerInfo===i.containerInfo&&a.stateNode.implementation===i.implementation){n(r,a.sibling),(a=o(a,i.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=Lc(i,r.mode,l)).return=r,r=a}return s(r);case F:return e(r,a,(u=i._init)(i._payload),l)}if(te(i))return m(r,a,i,l);if(j(i))return g(r,a,i,l);Ya(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==a&&6===a.tag?(n(r,a.sibling),(a=o(a,i)).return=r,r=a):(n(r,a),(a=Dc(i,r.mode,l)).return=r,r=a),s(r)):n(r,a)}}var Ka=Qa(!0),Za=Qa(!1),Ja={},ei=Co(Ja),ti=Co(Ja),ni=Co(Ja);function ri(e){if(e===Ja)throw Error(a(174));return e}function oi(e,t){switch(Po(ni,t),Po(ti,e),Po(ei,Ja),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}_o(ei),Po(ei,t)}function ai(){_o(ei),_o(ti),_o(ni)}function ii(e){ri(ni.current);var t=ri(ei.current),n=le(t,e.type);t!==n&&(Po(ti,e),Po(ei,n))}function si(e){ti.current===e&&(_o(ei),_o(ti))}var li=Co(0);function ci(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ui=[];function di(){for(var e=0;e<ui.length;e++)ui[e]._workInProgressVersionPrimary=null;ui.length=0}var fi=x.ReactCurrentDispatcher,pi=x.ReactCurrentBatchConfig,hi=0,mi=null,gi=null,vi=null,yi=!1,bi=!1,xi=0,wi=0;function ki(){throw Error(a(321))}function Si(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function Ei(e,t,n,r,o,i){if(hi=i,mi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,fi.current=null===e||null===e.memoizedState?ss:ls,e=n(r,o),bi){i=0;do{if(bi=!1,xi=0,25<=i)throw Error(a(301));i+=1,vi=gi=null,t.updateQueue=null,fi.current=cs,e=n(r,o)}while(bi)}if(fi.current=is,t=null!==gi&&null!==gi.next,hi=0,vi=gi=mi=null,yi=!1,t)throw Error(a(300));return e}function Ci(){var e=0!==xi;return xi=0,e}function _i(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===vi?mi.memoizedState=vi=e:vi=vi.next=e,vi}function Pi(){if(null===gi){var e=mi.alternate;e=null!==e?e.memoizedState:null}else e=gi.next;var t=null===vi?mi.memoizedState:vi.next;if(null!==t)vi=t,gi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(gi=e).memoizedState,baseState:gi.baseState,baseQueue:gi.baseQueue,queue:gi.queue,next:null},null===vi?mi.memoizedState=vi=e:vi=vi.next=e}return vi}function Ai(e,t){return"function"==typeof t?t(e):t}function Ti(e){var t=Pi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=gi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var s=o.next;o.next=i.next,i.next=s}r.baseQueue=o=i,n.pending=null}if(null!==o){i=o.next,r=r.baseState;var l=s=null,c=null,u=i;do{var d=u.lane;if((hi&d)===d)null!==c&&(c=c.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var f={lane:d,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===c?(l=c=f,s=r):c=c.next=f,mi.lanes|=d,Nl|=d}u=u.next}while(null!==u&&u!==i);null===c?s=r:c.next=l,sr(r,t.memoizedState)||(xs=!0),t.memoizedState=r,t.baseState=s,t.baseQueue=c,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{i=o.lane,mi.lanes|=i,Nl|=i,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function zi(e){var t=Pi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var s=o=o.next;do{i=e(i,s.action),s=s.next}while(s!==o);sr(i,t.memoizedState)||(xs=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Mi(){}function Fi(e,t){var n=mi,r=Pi(),o=t(),i=!sr(r.memoizedState,o);if(i&&(r.memoizedState=o,xs=!0),r=r.queue,Hi(ji.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==vi&&1&vi.memoizedState.tag){if(n.flags|=2048,Li(9,Ri.bind(null,n,r,o,t),void 0,null),null===zl)throw Error(a(349));0!=(30&hi)||Oi(n,t,o)}return o}function Oi(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ri(e,t,n,r){t.value=n,t.getSnapshot=r,Ii(t)&&Ni(e)}function ji(e,t,n){return n((function(){Ii(t)&&Ni(e)}))}function Ii(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!sr(e,n)}catch(e){return!0}}function Ni(e){var t=za(e,1);null!==t&&rc(t,e,1,-1)}function Di(e){var t=_i();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ai,lastRenderedState:e},t.queue=e,e=e.dispatch=ns.bind(null,mi,e),[t.memoizedState,e]}function Li(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Bi(){return Pi().memoizedState}function $i(e,t,n,r){var o=_i();mi.flags|=e,o.memoizedState=Li(1|t,n,void 0,void 0===r?null:r)}function Vi(e,t,n,r){var o=Pi();r=void 0===r?null:r;var a=void 0;if(null!==gi){var i=gi.memoizedState;if(a=i.destroy,null!==r&&Si(r,i.deps))return void(o.memoizedState=Li(t,n,a,r))}mi.flags|=e,o.memoizedState=Li(1|t,n,a,r)}function Wi(e,t){return $i(8390656,8,e,t)}function Hi(e,t){return Vi(2048,8,e,t)}function Ui(e,t){return Vi(4,2,e,t)}function qi(e,t){return Vi(4,4,e,t)}function Gi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Yi(e,t,n){return n=null!=n?n.concat([e]):null,Vi(4,4,Gi.bind(null,t,e),n)}function Xi(){}function Qi(e,t){var n=Pi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Si(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ki(e,t){var n=Pi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Si(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Zi(e,t,n){return 0==(21&hi)?(e.baseState&&(e.baseState=!1,xs=!0),e.memoizedState=n):(sr(n,t)||(n=mt(),mi.lanes|=n,Nl|=n,e.baseState=!0),t)}function Ji(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=pi.transition;pi.transition={};try{e(!1),t()}finally{bt=n,pi.transition=r}}function es(){return Pi().memoizedState}function ts(e,t,n){var r=nc(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rs(e)?os(t,n):null!==(n=Ta(e,t,n,r))&&(rc(n,e,r,tc()),as(n,t,r))}function ns(e,t,n){var r=nc(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rs(e))os(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,s=a(i,n);if(o.hasEagerState=!0,o.eagerState=s,sr(s,i)){var l=t.interleaved;return null===l?(o.next=o,Aa(t)):(o.next=l.next,l.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Ta(e,t,o,r))&&(rc(n,e,r,o=tc()),as(n,t,r))}}function rs(e){var t=e.alternate;return e===mi||null!==t&&t===mi}function os(e,t){bi=yi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function as(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var is={readContext:_a,useCallback:ki,useContext:ki,useEffect:ki,useImperativeHandle:ki,useInsertionEffect:ki,useLayoutEffect:ki,useMemo:ki,useReducer:ki,useRef:ki,useState:ki,useDebugValue:ki,useDeferredValue:ki,useTransition:ki,useMutableSource:ki,useSyncExternalStore:ki,useId:ki,unstable_isNewReconciler:!1},ss={readContext:_a,useCallback:function(e,t){return _i().memoizedState=[e,void 0===t?null:t],e},useContext:_a,useEffect:Wi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,$i(4194308,4,Gi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return $i(4194308,4,e,t)},useInsertionEffect:function(e,t){return $i(4,2,e,t)},useMemo:function(e,t){var n=_i();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=_i();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=ts.bind(null,mi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},_i().memoizedState=e},useState:Di,useDebugValue:Xi,useDeferredValue:function(e){return _i().memoizedState=e},useTransition:function(){var e=Di(!1),t=e[0];return e=Ji.bind(null,e[1]),_i().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=mi,o=_i();if(aa){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===zl)throw Error(a(349));0!=(30&hi)||Oi(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,Wi(ji.bind(null,r,i,e),[e]),r.flags|=2048,Li(9,Ri.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=_i(),t=zl.identifierPrefix;if(aa){var n=Zo;t=":"+t+"R"+(n=(Ko&~(1<<32-it(Ko)-1)).toString(32)+n),0<(n=xi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=wi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ls={readContext:_a,useCallback:Qi,useContext:_a,useEffect:Hi,useImperativeHandle:Yi,useInsertionEffect:Ui,useLayoutEffect:qi,useMemo:Ki,useReducer:Ti,useRef:Bi,useState:function(){return Ti(Ai)},useDebugValue:Xi,useDeferredValue:function(e){return Zi(Pi(),gi.memoizedState,e)},useTransition:function(){return[Ti(Ai)[0],Pi().memoizedState]},useMutableSource:Mi,useSyncExternalStore:Fi,useId:es,unstable_isNewReconciler:!1},cs={readContext:_a,useCallback:Qi,useContext:_a,useEffect:Hi,useImperativeHandle:Yi,useInsertionEffect:Ui,useLayoutEffect:qi,useMemo:Ki,useReducer:zi,useRef:Bi,useState:function(){return zi(Ai)},useDebugValue:Xi,useDeferredValue:function(e){var t=Pi();return null===gi?t.memoizedState=e:Zi(t,gi.memoizedState,e)},useTransition:function(){return[zi(Ai)[0],Pi().memoizedState]},useMutableSource:Mi,useSyncExternalStore:Fi,useId:es,unstable_isNewReconciler:!1};function us(e,t){try{var n="",r=t;do{n+=$(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function ds(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fs(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var ps="function"==typeof WeakMap?WeakMap:Map;function hs(e,t,n){(n=Ra(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ul||(Ul=!0,ql=r),fs(0,t)},n}function ms(e,t,n){(n=Ra(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){fs(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){fs(0,t),"function"!=typeof r&&(null===Gl?Gl=new Set([this]):Gl.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function gs(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new ps;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=_c.bind(null,e,t,n),t.then(e,e))}function vs(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function ys(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Ra(-1,1)).tag=2,ja(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bs=x.ReactCurrentOwner,xs=!1;function ws(e,t,n,r){t.child=null===e?Za(t,null,n,r):Ka(t,e.child,n,r)}function ks(e,t,n,r,o){n=n.render;var a=t.ref;return Ca(t,o),r=Ei(e,t,n,r,a,o),n=Ci(),null===e||xs?(aa&&n&&ta(t),t.flags|=1,ws(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Us(e,t,o))}function Ss(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||Oc(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=jc(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Es(e,t,a,r,o))}if(a=e.child,0==(e.lanes&o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:lr)(i,r)&&e.ref===t.ref)return Us(e,t,o)}return t.flags|=1,(e=Rc(a,r)).ref=t.ref,e.return=t,t.child=e}function Es(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(lr(a,r)&&e.ref===t.ref){if(xs=!1,t.pendingProps=r=a,0==(e.lanes&o))return t.lanes=e.lanes,Us(e,t,o);0!=(131072&e.flags)&&(xs=!0)}}return Ps(e,t,n,r,o)}function Cs(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Po(Rl,Ol),Ol|=n;else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Po(Rl,Ol),Ol|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,Po(Rl,Ol),Ol|=r}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,Po(Rl,Ol),Ol|=r;return ws(e,t,o,n),t.child}function _s(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Ps(e,t,n,r,o){var a=Oo(n)?Mo:To.current;return a=Fo(t,a),Ca(t,o),n=Ei(e,t,n,r,a,o),r=Ci(),null===e||xs?(aa&&r&&ta(t),t.flags|=1,ws(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Us(e,t,o))}function As(e,t,n,r,o){if(Oo(n)){var a=!0;No(t)}else a=!1;if(Ca(t,o),null===t.stateNode)Hs(e,t),Ha(t,n,r),qa(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,s=t.memoizedProps;i.props=s;var l=i.context,c=n.contextType;c="object"==typeof c&&null!==c?_a(c):Fo(t,c=Oo(n)?Mo:To.current);var u=n.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==r||l!==c)&&Ua(t,i,r,c),Ma=!1;var f=t.memoizedState;i.state=f,Da(t,r,i,o),l=t.memoizedState,s!==r||f!==l||zo.current||Ma?("function"==typeof u&&($a(t,n,u,r),l=t.memoizedState),(s=Ma||Wa(t,n,s,r,f,l,c))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),i.props=r,i.state=l,i.context=c,r=s):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Oa(e,t),s=t.memoizedProps,c=t.type===t.elementType?s:va(t.type,s),i.props=c,d=t.pendingProps,f=i.context,l="object"==typeof(l=n.contextType)&&null!==l?_a(l):Fo(t,l=Oo(n)?Mo:To.current);var p=n.getDerivedStateFromProps;(u="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==d||f!==l)&&Ua(t,i,r,l),Ma=!1,f=t.memoizedState,i.state=f,Da(t,r,i,o);var h=t.memoizedState;s!==d||f!==h||zo.current||Ma?("function"==typeof p&&($a(t,n,p,r),h=t.memoizedState),(c=Ma||Wa(t,n,c,r,f,h,l)||!1)?(u||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,l),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=l,r=c):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return Ts(e,t,n,r,a,o)}function Ts(e,t,n,r,o,a){_s(e,t);var i=0!=(128&t.flags);if(!r&&!i)return o&&Do(t,n,!1),Us(e,t,a);r=t.stateNode,bs.current=t;var s=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Ka(t,e.child,null,a),t.child=Ka(t,null,s,a)):ws(e,t,s,a),t.memoizedState=r.state,o&&Do(t,n,!0),t.child}function zs(e){var t=e.stateNode;t.pendingContext?jo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&jo(0,t.context,!1),oi(e,t.containerInfo)}function Ms(e,t,n,r,o){return ha(),ma(o),t.flags|=256,ws(e,t,n,r),t.child}var Fs,Os,Rs,js,Is={dehydrated:null,treeContext:null,retryLane:0};function Ns(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ds(e,t,n){var r,o=t.pendingProps,i=li.current,s=!1,l=0!=(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(s=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Po(li,1&i),null===e)return ua(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(l=o.children,e=o.fallback,s?(o=t.mode,s=t.child,l={mode:"hidden",children:l},0==(1&o)&&null!==s?(s.childLanes=0,s.pendingProps=l):s=Nc(l,o,0,null),e=Ic(e,o,n,null),s.return=t,e.return=t,s.sibling=e,t.child=s,t.child.memoizedState=Ns(n),t.memoizedState=Is,e):Ls(t,l));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,o,i,s){if(n)return 256&t.flags?(t.flags&=-257,Bs(e,t,s,r=ds(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=Nc({mode:"visible",children:r.children},o,0,null),(i=Ic(i,o,s,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,0!=(1&t.mode)&&Ka(t,e.child,null,s),t.child.memoizedState=Ns(s),t.memoizedState=Is,i);if(0==(1&t.mode))return Bs(e,t,s,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var l=r.dgst;return r=l,Bs(e,t,s,r=ds(i=Error(a(419)),r,void 0))}if(l=0!=(s&e.childLanes),xs||l){if(null!==(r=zl)){switch(s&-s){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|s))?0:o)&&o!==i.retryLane&&(i.retryLane=o,za(e,o),rc(r,e,o,-1))}return gc(),Bs(e,t,s,r=ds(Error(a(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Ac.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,oa=co(o.nextSibling),ra=t,aa=!0,ia=null,null!==e&&(Yo[Xo++]=Ko,Yo[Xo++]=Zo,Yo[Xo++]=Qo,Ko=e.id,Zo=e.overflow,Qo=t),(t=Ls(t,r.children)).flags|=4096,t)}(e,t,l,o,r,i,n);if(s){s=o.fallback,l=t.mode,r=(i=e.child).sibling;var c={mode:"hidden",children:o.children};return 0==(1&l)&&t.child!==i?((o=t.child).childLanes=0,o.pendingProps=c,t.deletions=null):(o=Rc(i,c)).subtreeFlags=14680064&i.subtreeFlags,null!==r?s=Rc(r,s):(s=Ic(s,l,n,null)).flags|=2,s.return=t,o.return=t,o.sibling=s,t.child=o,o=s,s=t.child,l=null===(l=e.child.memoizedState)?Ns(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},s.memoizedState=l,s.childLanes=e.childLanes&~n,t.memoizedState=Is,o}return e=(s=e.child).sibling,o=Rc(s,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function Ls(e,t){return(t=Nc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Bs(e,t,n,r){return null!==r&&ma(r),Ka(t,e.child,null,n),(e=Ls(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function $s(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Ea(e.return,t,n)}function Vs(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function Ws(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(ws(e,t,r.children,n),0!=(2&(r=li.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&$s(e,n,t);else if(19===e.tag)$s(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Po(li,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ci(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Vs(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ci(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Vs(t,!0,n,null,a);break;case"together":Vs(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Hs(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Us(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Nl|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Rc(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Rc(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function qs(e,t){if(!aa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Gs(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Ys(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Gs(t),null;case 1:case 17:return Oo(t.type)&&Ro(),Gs(t),null;case 3:return r=t.stateNode,ai(),_o(zo),_o(To),di(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fa(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ia&&(sc(ia),ia=null))),Os(e,t),Gs(t),null;case 5:si(t);var o=ri(ni.current);if(n=t.type,null!==e&&null!=t.stateNode)Rs(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return Gs(t),null}if(e=ri(ei.current),fa(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[po]=t,r[ho]=i,e=0!=(1&t.mode),n){case"dialog":Lr("cancel",r),Lr("close",r);break;case"iframe":case"object":case"embed":Lr("load",r);break;case"video":case"audio":for(o=0;o<jr.length;o++)Lr(jr[o],r);break;case"source":Lr("error",r);break;case"img":case"image":case"link":Lr("error",r),Lr("load",r);break;case"details":Lr("toggle",r);break;case"input":Q(r,i),Lr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Lr("invalid",r);break;case"textarea":oe(r,i),Lr("invalid",r)}for(var l in ye(n,i),o=null,i)if(i.hasOwnProperty(l)){var c=i[l];"children"===l?"string"==typeof c?r.textContent!==c&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,c,e),o=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,c,e),o=["children",""+c]):s.hasOwnProperty(l)&&null!=c&&"onScroll"===l&&Lr("scroll",r)}switch(n){case"input":q(r),J(r,i,!0);break;case"textarea":q(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Jr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{l=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=se(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[po]=t,e[ho]=r,Fs(e,t,!1,!1),t.stateNode=e;e:{switch(l=be(n,r),n){case"dialog":Lr("cancel",e),Lr("close",e),o=r;break;case"iframe":case"object":case"embed":Lr("load",e),o=r;break;case"video":case"audio":for(o=0;o<jr.length;o++)Lr(jr[o],e);o=r;break;case"source":Lr("error",e),o=r;break;case"img":case"image":case"link":Lr("error",e),Lr("load",e),o=r;break;case"details":Lr("toggle",e),o=r;break;case"input":Q(e,r),o=X(e,r),Lr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=N({},r,{value:void 0}),Lr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Lr("invalid",e)}for(i in ye(n,o),c=o)if(c.hasOwnProperty(i)){var u=c[i];"style"===i?ge(e,u):"dangerouslySetInnerHTML"===i?null!=(u=u?u.__html:void 0)&&de(e,u):"children"===i?"string"==typeof u?("textarea"!==n||""!==u)&&fe(e,u):"number"==typeof u&&fe(e,""+u):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(s.hasOwnProperty(i)?null!=u&&"onScroll"===i&&Lr("scroll",e):null!=u&&b(e,i,u,l))}switch(n){case"input":q(e),J(e,r,!1);break;case"textarea":q(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+H(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Gs(t),null;case 6:if(e&&null!=t.stateNode)js(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=ri(ni.current),ri(ei.current),fa(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(i=r.nodeValue!==n)&&null!==(e=ra))switch(e.tag){case 3:Zr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return Gs(t),null;case 13:if(_o(li),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(aa&&null!==oa&&0!=(1&t.mode)&&0==(128&t.flags))pa(),ha(),t.flags|=98560,i=!1;else if(i=fa(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(a(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(a(317));i[po]=t}else ha(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Gs(t),i=!1}else null!==ia&&(sc(ia),ia=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&li.current)?0===jl&&(jl=3):gc())),null!==t.updateQueue&&(t.flags|=4),Gs(t),null);case 4:return ai(),Os(e,t),null===e&&Vr(t.stateNode.containerInfo),Gs(t),null;case 10:return Sa(t.type._context),Gs(t),null;case 19:if(_o(li),null===(i=t.memoizedState))return Gs(t),null;if(r=0!=(128&t.flags),null===(l=i.rendering))if(r)qs(i,!1);else{if(0!==jl||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(l=ci(e))){for(t.flags|=128,qs(i,!1),null!==(r=l.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(l=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=l.childLanes,i.lanes=l.lanes,i.child=l.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=l.memoizedProps,i.memoizedState=l.memoizedState,i.updateQueue=l.updateQueue,i.type=l.type,e=l.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Po(li,1&li.current|2),t.child}e=e.sibling}null!==i.tail&&Ke()>Wl&&(t.flags|=128,r=!0,qs(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ci(l))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),qs(i,!0),null===i.tail&&"hidden"===i.tailMode&&!l.alternate&&!aa)return Gs(t),null}else 2*Ke()-i.renderingStartTime>Wl&&1073741824!==n&&(t.flags|=128,r=!0,qs(i,!1),t.lanes=4194304);i.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=i.last)?n.sibling=l:t.child=l,i.last=l)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Ke(),t.sibling=null,n=li.current,Po(li,r?1&n|2:1&n),t):(Gs(t),null);case 22:case 23:return fc(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Ol)&&(Gs(t),6&t.subtreeFlags&&(t.flags|=8192)):Gs(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function Xs(e,t){switch(na(t),t.tag){case 1:return Oo(t.type)&&Ro(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ai(),_o(zo),_o(To),di(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return si(t),null;case 13:if(_o(li),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));ha()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return _o(li),null;case 4:return ai(),null;case 10:return Sa(t.type._context),null;case 22:case 23:return fc(),null;default:return null}}Fs=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Os=function(){},Rs=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ri(ei.current);var a,i=null;switch(n){case"input":o=X(e,o),r=X(e,r),i=[];break;case"select":o=N({},o,{value:void 0}),r=N({},r,{value:void 0}),i=[];break;case"textarea":o=re(e,o),r=re(e,r),i=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(u in ye(n,r),n=null,o)if(!r.hasOwnProperty(u)&&o.hasOwnProperty(u)&&null!=o[u])if("style"===u){var l=o[u];for(a in l)l.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(s.hasOwnProperty(u)?i||(i=[]):(i=i||[]).push(u,null));for(u in r){var c=r[u];if(l=null!=o?o[u]:void 0,r.hasOwnProperty(u)&&c!==l&&(null!=c||null!=l))if("style"===u)if(l){for(a in l)!l.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&l[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(i||(i=[]),i.push(u,n)),n=c;else"dangerouslySetInnerHTML"===u?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(i=i||[]).push(u,c)):"children"===u?"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(u,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(s.hasOwnProperty(u)?(null!=c&&"onScroll"===u&&Lr("scroll",e),i||l===c||(i=[])):(i=i||[]).push(u,c))}n&&(i=i||[]).push("style",n);var u=i;(t.updateQueue=u)&&(t.flags|=4)}},js=function(e,t,n,r){n!==r&&(t.flags|=4)};var Qs=!1,Ks=!1,Zs="function"==typeof WeakSet?WeakSet:Set,Js=null;function el(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Cc(e,t,n)}else n.current=null}function tl(e,t,n){try{n()}catch(n){Cc(e,t,n)}}var nl=!1;function rl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var a=o.destroy;o.destroy=void 0,void 0!==a&&tl(t,n,a)}o=o.next}while(o!==r)}}function ol(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function al(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function il(e){var t=e.alternate;null!==t&&(e.alternate=null,il(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[go],delete t[vo],delete t[yo]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function sl(e){return 5===e.tag||3===e.tag||4===e.tag}function ll(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||sl(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function cl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(cl(e,t,n),e=e.sibling;null!==e;)cl(e,t,n),e=e.sibling}function ul(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(ul(e,t,n),e=e.sibling;null!==e;)ul(e,t,n),e=e.sibling}var dl=null,fl=!1;function pl(e,t,n){for(n=n.child;null!==n;)hl(e,t,n),n=n.sibling}function hl(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Ks||el(n,t);case 6:var r=dl,o=fl;dl=null,pl(e,t,n),fl=o,null!==(dl=r)&&(fl?(e=dl,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):dl.removeChild(n.stateNode));break;case 18:null!==dl&&(fl?(e=dl,n=n.stateNode,8===e.nodeType?lo(e.parentNode,n):1===e.nodeType&&lo(e,n),Vt(e)):lo(dl,n.stateNode));break;case 4:r=dl,o=fl,dl=n.stateNode.containerInfo,fl=!0,pl(e,t,n),dl=r,fl=o;break;case 0:case 11:case 14:case 15:if(!Ks&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var a=o,i=a.destroy;a=a.tag,void 0!==i&&(0!=(2&a)||0!=(4&a))&&tl(n,t,i),o=o.next}while(o!==r)}pl(e,t,n);break;case 1:if(!Ks&&(el(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Cc(n,t,e)}pl(e,t,n);break;case 21:pl(e,t,n);break;case 22:1&n.mode?(Ks=(r=Ks)||null!==n.memoizedState,pl(e,t,n),Ks=r):pl(e,t,n);break;default:pl(e,t,n)}}function ml(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Zs),t.forEach((function(t){var r=Tc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function gl(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,s=t,l=s;e:for(;null!==l;){switch(l.tag){case 5:dl=l.stateNode,fl=!1;break e;case 3:case 4:dl=l.stateNode.containerInfo,fl=!0;break e}l=l.return}if(null===dl)throw Error(a(160));hl(i,s,o),dl=null,fl=!1;var c=o.alternate;null!==c&&(c.return=null),o.return=null}catch(e){Cc(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)vl(t,e),t=t.sibling}function vl(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gl(t,e),yl(e),4&r){try{rl(3,e,e.return),ol(3,e)}catch(t){Cc(e,e.return,t)}try{rl(5,e,e.return)}catch(t){Cc(e,e.return,t)}}break;case 1:gl(t,e),yl(e),512&r&&null!==n&&el(n,n.return);break;case 5:if(gl(t,e),yl(e),512&r&&null!==n&&el(n,n.return),32&e.flags){var o=e.stateNode;try{fe(o,"")}catch(t){Cc(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var i=e.memoizedProps,s=null!==n?n.memoizedProps:i,l=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===l&&"radio"===i.type&&null!=i.name&&K(o,i),be(l,s);var u=be(l,i);for(s=0;s<c.length;s+=2){var d=c[s],f=c[s+1];"style"===d?ge(o,f):"dangerouslySetInnerHTML"===d?de(o,f):"children"===d?fe(o,f):b(o,d,f,u)}switch(l){case"input":Z(o,i);break;case"textarea":ae(o,i);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?ne(o,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(o,!!i.multiple,i.defaultValue,!0):ne(o,!!i.multiple,i.multiple?[]:"",!1))}o[ho]=i}catch(t){Cc(e,e.return,t)}}break;case 6:if(gl(t,e),yl(e),4&r){if(null===e.stateNode)throw Error(a(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(t){Cc(e,e.return,t)}}break;case 3:if(gl(t,e),yl(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Vt(t.containerInfo)}catch(t){Cc(e,e.return,t)}break;case 4:default:gl(t,e),yl(e);break;case 13:gl(t,e),yl(e),8192&(o=e.child).flags&&(i=null!==o.memoizedState,o.stateNode.isHidden=i,!i||null!==o.alternate&&null!==o.alternate.memoizedState||(Vl=Ke())),4&r&&ml(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Ks=(u=Ks)||d,gl(t,e),Ks=u):gl(t,e),yl(e),8192&r){if(u=null!==e.memoizedState,(e.stateNode.isHidden=u)&&!d&&0!=(1&e.mode))for(Js=e,d=e.child;null!==d;){for(f=Js=d;null!==Js;){switch(h=(p=Js).child,p.tag){case 0:case 11:case 14:case 15:rl(4,p,p.return);break;case 1:el(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Cc(r,n,e)}}break;case 5:el(p,p.return);break;case 22:if(null!==p.memoizedState){kl(f);continue}}null!==h?(h.return=p,Js=h):kl(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{o=f.stateNode,u?"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none":(l=f.stateNode,s=null!=(c=f.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,l.style.display=me("display",s))}catch(t){Cc(e,e.return,t)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=u?"":f.memoizedProps}catch(t){Cc(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:gl(t,e),yl(e),4&r&&ml(e);case 21:}}function yl(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(sl(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(fe(o,""),r.flags&=-33),ul(e,ll(e),o);break;case 3:case 4:var i=r.stateNode.containerInfo;cl(e,ll(e),i);break;default:throw Error(a(161))}}catch(t){Cc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bl(e,t,n){Js=e,xl(e,t,n)}function xl(e,t,n){for(var r=0!=(1&e.mode);null!==Js;){var o=Js,a=o.child;if(22===o.tag&&r){var i=null!==o.memoizedState||Qs;if(!i){var s=o.alternate,l=null!==s&&null!==s.memoizedState||Ks;s=Qs;var c=Ks;if(Qs=i,(Ks=l)&&!c)for(Js=o;null!==Js;)l=(i=Js).child,22===i.tag&&null!==i.memoizedState?Sl(o):null!==l?(l.return=i,Js=l):Sl(o);for(;null!==a;)Js=a,xl(a,t,n),a=a.sibling;Js=o,Qs=s,Ks=c}wl(e)}else 0!=(8772&o.subtreeFlags)&&null!==a?(a.return=o,Js=a):wl(e)}}function wl(e){for(;null!==Js;){var t=Js;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Ks||ol(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Ks)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:va(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&La(t,i,r);break;case 3:var s=t.updateQueue;if(null!==s){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}La(t,s,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var u=t.alternate;if(null!==u){var d=u.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&Vt(f)}}}break;default:throw Error(a(163))}Ks||512&t.flags&&al(t)}catch(e){Cc(t,t.return,e)}}if(t===e){Js=null;break}if(null!==(n=t.sibling)){n.return=t.return,Js=n;break}Js=t.return}}function kl(e){for(;null!==Js;){var t=Js;if(t===e){Js=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Js=n;break}Js=t.return}}function Sl(e){for(;null!==Js;){var t=Js;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ol(4,t)}catch(e){Cc(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){Cc(t,o,e)}}var a=t.return;try{al(t)}catch(e){Cc(t,a,e)}break;case 5:var i=t.return;try{al(t)}catch(e){Cc(t,i,e)}}}catch(e){Cc(t,t.return,e)}if(t===e){Js=null;break}var s=t.sibling;if(null!==s){s.return=t.return,Js=s;break}Js=t.return}}var El,Cl=Math.ceil,_l=x.ReactCurrentDispatcher,Pl=x.ReactCurrentOwner,Al=x.ReactCurrentBatchConfig,Tl=0,zl=null,Ml=null,Fl=0,Ol=0,Rl=Co(0),jl=0,Il=null,Nl=0,Dl=0,Ll=0,Bl=null,$l=null,Vl=0,Wl=1/0,Hl=null,Ul=!1,ql=null,Gl=null,Yl=!1,Xl=null,Ql=0,Kl=0,Zl=null,Jl=-1,ec=0;function tc(){return 0!=(6&Tl)?Ke():-1!==Jl?Jl:Jl=Ke()}function nc(e){return 0==(1&e.mode)?1:0!=(2&Tl)&&0!==Fl?Fl&-Fl:null!==ga.transition?(0===ec&&(ec=mt()),ec):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Qt(e.type)}function rc(e,t,n,r){if(50<Kl)throw Kl=0,Zl=null,Error(a(185));vt(e,n,r),0!=(2&Tl)&&e===zl||(e===zl&&(0==(2&Tl)&&(Dl|=n),4===jl&&lc(e,Fl)),oc(e,r),1===n&&0===Tl&&0==(1&t.mode)&&(Wl=Ke()+500,Bo&&Wo()))}function oc(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=e.pendingLanes;0<a;){var i=31-it(a),s=1<<i,l=o[i];-1===l?0!=(s&n)&&0==(s&r)||(o[i]=pt(s,t)):l<=t&&(e.expiredLanes|=s),a&=~s}}(e,t);var r=ft(e,e===zl?Fl:0);if(0===r)null!==n&&Ye(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ye(n),1===t)0===e.tag?function(e){Bo=!0,Vo(e)}(cc.bind(null,e)):Vo(cc.bind(null,e)),io((function(){0==(6&Tl)&&Wo()})),n=null;else{switch(xt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=zc(n,ac.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ac(e,t){if(Jl=-1,ec=0,0!=(6&Tl))throw Error(a(327));var n=e.callbackNode;if(Sc()&&e.callbackNode!==n)return null;var r=ft(e,e===zl?Fl:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=vc(e,r);else{t=r;var o=Tl;Tl|=2;var i=mc();for(zl===e&&Fl===t||(Hl=null,Wl=Ke()+500,pc(e,t));;)try{bc();break}catch(t){hc(e,t)}ka(),_l.current=i,Tl=o,null!==Ml?t=0:(zl=null,Fl=0,t=jl)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=ic(e,o)),1===t)throw n=Il,pc(e,0),lc(e,r),oc(e,Ke()),n;if(6===t)lc(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!sr(a(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=vc(e,r))&&0!==(i=ht(e))&&(r=i,t=ic(e,i)),1===t))throw n=Il,pc(e,0),lc(e,r),oc(e,Ke()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:kc(e,$l,Hl);break;case 3:if(lc(e,r),(130023424&r)===r&&10<(t=Vl+500-Ke())){if(0!==ft(e,0))break;if(((o=e.suspendedLanes)&r)!==r){tc(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(kc.bind(null,e,$l,Hl),t);break}kc(e,$l,Hl);break;case 4:if(lc(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var s=31-it(r);i=1<<s,(s=t[s])>o&&(o=s),r&=~i}if(r=o,10<(r=(120>(r=Ke()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Cl(r/1960))-r)){e.timeoutHandle=ro(kc.bind(null,e,$l,Hl),r);break}kc(e,$l,Hl);break;default:throw Error(a(329))}}}return oc(e,Ke()),e.callbackNode===n?ac.bind(null,e):null}function ic(e,t){var n=Bl;return e.current.memoizedState.isDehydrated&&(pc(e,t).flags|=256),2!==(e=vc(e,t))&&(t=$l,$l=n,null!==t&&sc(t)),e}function sc(e){null===$l?$l=e:$l.push.apply($l,e)}function lc(e,t){for(t&=~Ll,t&=~Dl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function cc(e){if(0!=(6&Tl))throw Error(a(327));Sc();var t=ft(e,0);if(0==(1&t))return oc(e,Ke()),null;var n=vc(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=ic(e,r))}if(1===n)throw n=Il,pc(e,0),lc(e,t),oc(e,Ke()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,kc(e,$l,Hl),oc(e,Ke()),null}function uc(e,t){var n=Tl;Tl|=1;try{return e(t)}finally{0===(Tl=n)&&(Wl=Ke()+500,Bo&&Wo())}}function dc(e){null!==Xl&&0===Xl.tag&&0==(6&Tl)&&Sc();var t=Tl;Tl|=1;var n=Al.transition,r=bt;try{if(Al.transition=null,bt=1,e)return e()}finally{bt=r,Al.transition=n,0==(6&(Tl=t))&&Wo()}}function fc(){Ol=Rl.current,_o(Rl)}function pc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Ml)for(n=Ml.return;null!==n;){var r=n;switch(na(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ro();break;case 3:ai(),_o(zo),_o(To),di();break;case 5:si(r);break;case 4:ai();break;case 13:case 19:_o(li);break;case 10:Sa(r.type._context);break;case 22:case 23:fc()}n=n.return}if(zl=e,Ml=e=Rc(e.current,null),Fl=Ol=t,jl=0,Il=null,Ll=Dl=Nl=0,$l=Bl=null,null!==Pa){for(t=0;t<Pa.length;t++)if(null!==(r=(n=Pa[t]).interleaved)){n.interleaved=null;var o=r.next,a=n.pending;if(null!==a){var i=a.next;a.next=o,r.next=i}n.pending=r}Pa=null}return e}function hc(e,t){for(;;){var n=Ml;try{if(ka(),fi.current=is,yi){for(var r=mi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}yi=!1}if(hi=0,vi=gi=mi=null,bi=!1,xi=0,Pl.current=null,null===n||null===n.return){jl=1,Il=t,Ml=null;break}e:{var i=e,s=n.return,l=n,c=t;if(t=Fl,l.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var u=c,d=l,f=d.tag;if(0==(1&d.mode)&&(0===f||11===f||15===f)){var p=d.alternate;p?(d.updateQueue=p.updateQueue,d.memoizedState=p.memoizedState,d.lanes=p.lanes):(d.updateQueue=null,d.memoizedState=null)}var h=vs(s);if(null!==h){h.flags&=-257,ys(h,s,l,0,t),1&h.mode&&gs(i,u,t),c=u;var m=(t=h).updateQueue;if(null===m){var g=new Set;g.add(c),t.updateQueue=g}else m.add(c);break e}if(0==(1&t)){gs(i,u,t),gc();break e}c=Error(a(426))}else if(aa&&1&l.mode){var v=vs(s);if(null!==v){0==(65536&v.flags)&&(v.flags|=256),ys(v,s,l,0,t),ma(us(c,l));break e}}i=c=us(c,l),4!==jl&&(jl=2),null===Bl?Bl=[i]:Bl.push(i),i=s;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Na(i,hs(0,c,t));break e;case 1:l=c;var y=i.type,b=i.stateNode;if(0==(128&i.flags)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Gl||!Gl.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,Na(i,ms(i,l,t));break e}}i=i.return}while(null!==i)}wc(n)}catch(e){t=e,Ml===n&&null!==n&&(Ml=n=n.return);continue}break}}function mc(){var e=_l.current;return _l.current=is,null===e?is:e}function gc(){0!==jl&&3!==jl&&2!==jl||(jl=4),null===zl||0==(268435455&Nl)&&0==(268435455&Dl)||lc(zl,Fl)}function vc(e,t){var n=Tl;Tl|=2;var r=mc();for(zl===e&&Fl===t||(Hl=null,pc(e,t));;)try{yc();break}catch(t){hc(e,t)}if(ka(),Tl=n,_l.current=r,null!==Ml)throw Error(a(261));return zl=null,Fl=0,jl}function yc(){for(;null!==Ml;)xc(Ml)}function bc(){for(;null!==Ml&&!Xe();)xc(Ml)}function xc(e){var t=El(e.alternate,e,Ol);e.memoizedProps=e.pendingProps,null===t?wc(e):Ml=t,Pl.current=null}function wc(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Ys(n,t,Ol)))return void(Ml=n)}else{if(null!==(n=Xs(n,t)))return n.flags&=32767,void(Ml=n);if(null===e)return jl=6,void(Ml=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Ml=t);Ml=t=e}while(null!==t);0===jl&&(jl=5)}function kc(e,t,n){var r=bt,o=Al.transition;try{Al.transition=null,bt=1,function(e,t,n,r){do{Sc()}while(null!==Xl);if(0!=(6&Tl))throw Error(a(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-it(n),a=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~a}}(e,i),e===zl&&(Ml=zl=null,Fl=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Yl||(Yl=!0,zc(tt,(function(){return Sc(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=Al.transition,Al.transition=null;var s=bt;bt=1;var l=Tl;Tl|=4,Pl.current=null,function(e,t){if(eo=Ht,pr(e=fr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var s=0,l=-1,c=-1,u=0,d=0,f=e,p=null;t:for(;;){for(var h;f!==n||0!==o&&3!==f.nodeType||(l=s+o),f!==i||0!==r&&3!==f.nodeType||(c=s+r),3===f.nodeType&&(s+=f.nodeValue.length),null!==(h=f.firstChild);)p=f,f=h;for(;;){if(f===e)break t;if(p===n&&++u===o&&(l=s),p===i&&++d===r&&(c=s),null!==(h=f.nextSibling))break;p=(f=p).parentNode}f=h}n=-1===l||-1===c?null:{start:l,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Ht=!1,Js=t;null!==Js;)if(e=(t=Js).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Js=e;else for(;null!==Js;){t=Js;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var g=m.memoizedProps,v=m.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?g:va(t.type,g),v);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var x=t.stateNode.containerInfo;1===x.nodeType?x.textContent="":9===x.nodeType&&x.documentElement&&x.removeChild(x.documentElement);break;default:throw Error(a(163))}}catch(e){Cc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Js=e;break}Js=t.return}m=nl,nl=!1}(e,n),vl(n,e),hr(to),Ht=!!eo,to=eo=null,e.current=n,bl(n,e,o),Qe(),Tl=l,bt=s,Al.transition=i}else e.current=n;if(Yl&&(Yl=!1,Xl=e,Ql=o),0===(i=e.pendingLanes)&&(Gl=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),oc(e,Ke()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(Ul)throw Ul=!1,e=ql,ql=null,e;0!=(1&Ql)&&0!==e.tag&&Sc(),0!=(1&(i=e.pendingLanes))?e===Zl?Kl++:(Kl=0,Zl=e):Kl=0,Wo()}(e,t,n,r)}finally{Al.transition=o,bt=r}return null}function Sc(){if(null!==Xl){var e=xt(Ql),t=Al.transition,n=bt;try{if(Al.transition=null,bt=16>e?16:e,null===Xl)var r=!1;else{if(e=Xl,Xl=null,Ql=0,0!=(6&Tl))throw Error(a(331));var o=Tl;for(Tl|=4,Js=e.current;null!==Js;){var i=Js,s=i.child;if(0!=(16&Js.flags)){var l=i.deletions;if(null!==l){for(var c=0;c<l.length;c++){var u=l[c];for(Js=u;null!==Js;){var d=Js;switch(d.tag){case 0:case 11:case 15:rl(8,d,i)}var f=d.child;if(null!==f)f.return=d,Js=f;else for(;null!==Js;){var p=(d=Js).sibling,h=d.return;if(il(d),d===u){Js=null;break}if(null!==p){p.return=h,Js=p;break}Js=h}}}var m=i.alternate;if(null!==m){var g=m.child;if(null!==g){m.child=null;do{var v=g.sibling;g.sibling=null,g=v}while(null!==g)}}Js=i}}if(0!=(2064&i.subtreeFlags)&&null!==s)s.return=i,Js=s;else e:for(;null!==Js;){if(0!=(2048&(i=Js).flags))switch(i.tag){case 0:case 11:case 15:rl(9,i,i.return)}var y=i.sibling;if(null!==y){y.return=i.return,Js=y;break e}Js=i.return}}var b=e.current;for(Js=b;null!==Js;){var x=(s=Js).child;if(0!=(2064&s.subtreeFlags)&&null!==x)x.return=s,Js=x;else e:for(s=b;null!==Js;){if(0!=(2048&(l=Js).flags))try{switch(l.tag){case 0:case 11:case 15:ol(9,l)}}catch(e){Cc(l,l.return,e)}if(l===s){Js=null;break e}var w=l.sibling;if(null!==w){w.return=l.return,Js=w;break e}Js=l.return}}if(Tl=o,Wo(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,Al.transition=t}}return!1}function Ec(e,t,n){e=ja(e,t=hs(0,t=us(n,t),1),1),t=tc(),null!==e&&(vt(e,1,t),oc(e,t))}function Cc(e,t,n){if(3===e.tag)Ec(e,e,n);else for(;null!==t;){if(3===t.tag){Ec(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Gl||!Gl.has(r))){t=ja(t,e=ms(t,e=us(n,e),1),1),e=tc(),null!==t&&(vt(t,1,e),oc(t,e));break}}t=t.return}}function _c(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=tc(),e.pingedLanes|=e.suspendedLanes&n,zl===e&&(Fl&n)===n&&(4===jl||3===jl&&(130023424&Fl)===Fl&&500>Ke()-Vl?pc(e,0):Ll|=n),oc(e,t)}function Pc(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ut,0==(130023424&(ut<<=1))&&(ut=4194304)));var n=tc();null!==(e=za(e,t))&&(vt(e,t,n),oc(e,n))}function Ac(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Pc(e,n)}function Tc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),Pc(e,n)}function zc(e,t){return Ge(e,t)}function Mc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Fc(e,t,n,r){return new Mc(e,t,n,r)}function Oc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Rc(e,t){var n=e.alternate;return null===n?((n=Fc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function jc(e,t,n,r,o,i){var s=2;if(r=e,"function"==typeof e)Oc(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case S:return Ic(n.children,o,i,t);case E:s=8,o|=8;break;case C:return(e=Fc(12,n,t,2|o)).elementType=C,e.lanes=i,e;case T:return(e=Fc(13,n,t,o)).elementType=T,e.lanes=i,e;case z:return(e=Fc(19,n,t,o)).elementType=z,e.lanes=i,e;case O:return Nc(n,o,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case _:s=10;break e;case P:s=9;break e;case A:s=11;break e;case M:s=14;break e;case F:s=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Fc(s,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Ic(e,t,n,r){return(e=Fc(7,e,r,t)).lanes=n,e}function Nc(e,t,n,r){return(e=Fc(22,e,r,t)).elementType=O,e.lanes=n,e.stateNode={isHidden:!1},e}function Dc(e,t,n){return(e=Fc(6,e,null,t)).lanes=n,e}function Lc(e,t,n){return(t=Fc(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Bc(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function $c(e,t,n,r,o,a,i,s,l){return e=new Bc(e,t,n,s,l),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Fc(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Fa(a),e}function Vc(e){if(!e)return Ao;e:{if(Ve(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Oo(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(Oo(n))return Io(e,n,t)}return t}function Wc(e,t,n,r,o,a,i,s,l){return(e=$c(n,r,!0,e,0,a,0,s,l)).context=Vc(null),n=e.current,(a=Ra(r=tc(),o=nc(n))).callback=null!=t?t:null,ja(n,a,o),e.current.lanes=o,vt(e,o,r),oc(e,r),e}function Hc(e,t,n,r){var o=t.current,a=tc(),i=nc(o);return n=Vc(n),null===t.context?t.context=n:t.pendingContext=n,(t=Ra(a,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=ja(o,t,i))&&(rc(e,o,i,a),Ia(e,o,i)),i}function Uc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function qc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Gc(e,t){qc(e,t),(e=e.alternate)&&qc(e,t)}El=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||zo.current)xs=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return xs=!1,function(e,t,n){switch(t.tag){case 3:zs(t),ha();break;case 5:ii(t);break;case 1:Oo(t.type)&&No(t);break;case 4:oi(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;Po(ya,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Po(li,1&li.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Ds(e,t,n):(Po(li,1&li.current),null!==(e=Us(e,t,n))?e.sibling:null);Po(li,1&li.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Ws(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Po(li,li.current),r)break;return null;case 22:case 23:return t.lanes=0,Cs(e,t,n)}return Us(e,t,n)}(e,t,n);xs=0!=(131072&e.flags)}else xs=!1,aa&&0!=(1048576&t.flags)&&ea(t,Go,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Hs(e,t),e=t.pendingProps;var o=Fo(t,To.current);Ca(t,n),o=Ei(null,t,r,e,o,n);var i=Ci();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Oo(r)?(i=!0,No(t)):i=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Fa(t),o.updater=Va,t.stateNode=o,o._reactInternals=t,qa(t,r,e,n),t=Ts(null,t,r,!0,i,n)):(t.tag=0,aa&&i&&ta(t),ws(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Hs(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Oc(e)?1:0;if(null!=e){if((e=e.$$typeof)===A)return 11;if(e===M)return 14}return 2}(r),e=va(r,e),o){case 0:t=Ps(null,t,r,e,n);break e;case 1:t=As(null,t,r,e,n);break e;case 11:t=ks(null,t,r,e,n);break e;case 14:t=Ss(null,t,r,va(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ps(e,t,r,o=t.elementType===r?o:va(r,o),n);case 1:return r=t.type,o=t.pendingProps,As(e,t,r,o=t.elementType===r?o:va(r,o),n);case 3:e:{if(zs(t),null===e)throw Error(a(387));r=t.pendingProps,o=(i=t.memoizedState).element,Oa(e,t),Da(t,r,null,n);var s=t.memoizedState;if(r=s.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Ms(e,t,r,n,o=us(Error(a(423)),t));break e}if(r!==o){t=Ms(e,t,r,n,o=us(Error(a(424)),t));break e}for(oa=co(t.stateNode.containerInfo.firstChild),ra=t,aa=!0,ia=null,n=Za(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ha(),r===o){t=Us(e,t,n);break e}ws(e,t,r,n)}t=t.child}return t;case 5:return ii(t),null===e&&ua(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,s=o.children,no(r,o)?s=null:null!==i&&no(r,i)&&(t.flags|=32),_s(e,t),ws(e,t,s,n),t.child;case 6:return null===e&&ua(t),null;case 13:return Ds(e,t,n);case 4:return oi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ka(t,null,r,n):ws(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,ks(e,t,r,o=t.elementType===r?o:va(r,o),n);case 7:return ws(e,t,t.pendingProps,n),t.child;case 8:case 12:return ws(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,s=o.value,Po(ya,r._currentValue),r._currentValue=s,null!==i)if(sr(i.value,s)){if(i.children===o.children&&!zo.current){t=Us(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var l=i.dependencies;if(null!==l){s=i.child;for(var c=l.firstContext;null!==c;){if(c.context===r){if(1===i.tag){(c=Ra(-1,n&-n)).tag=2;var u=i.updateQueue;if(null!==u){var d=(u=u.shared).pending;null===d?c.next=c:(c.next=d.next,d.next=c),u.pending=c}}i.lanes|=n,null!==(c=i.alternate)&&(c.lanes|=n),Ea(i.return,n,t),l.lanes|=n;break}c=c.next}}else if(10===i.tag)s=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(s=i.return))throw Error(a(341));s.lanes|=n,null!==(l=s.alternate)&&(l.lanes|=n),Ea(s,n,t),s=i.sibling}else s=i.child;if(null!==s)s.return=i;else for(s=i;null!==s;){if(s===t){s=null;break}if(null!==(i=s.sibling)){i.return=s.return,s=i;break}s=s.return}i=s}ws(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Ca(t,n),r=r(o=_a(o)),t.flags|=1,ws(e,t,r,n),t.child;case 14:return o=va(r=t.type,t.pendingProps),Ss(e,t,r,o=va(r.type,o),n);case 15:return Es(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:va(r,o),Hs(e,t),t.tag=1,Oo(r)?(e=!0,No(t)):e=!1,Ca(t,n),Ha(t,r,o),qa(t,r,o,n),Ts(null,t,r,!0,e,n);case 19:return Ws(e,t,n);case 22:return Cs(e,t,n)}throw Error(a(156,t.tag))};var Yc="function"==typeof reportError?reportError:function(e){console.error(e)};function Xc(e){this._internalRoot=e}function Qc(e){this._internalRoot=e}function Kc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Zc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Jc(){}function eu(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a;if("function"==typeof o){var s=o;o=function(){var e=Uc(i);s.call(e)}}Hc(t,i,e,o)}else i=function(e,t,n,r,o){if(o){if("function"==typeof r){var a=r;r=function(){var e=Uc(i);a.call(e)}}var i=Wc(t,r,e,0,null,!1,0,"",Jc);return e._reactRootContainer=i,e[mo]=i.current,Vr(8===e.nodeType?e.parentNode:e),dc(),i}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var s=r;r=function(){var e=Uc(l);s.call(e)}}var l=$c(e,0,!1,null,0,!1,0,"",Jc);return e._reactRootContainer=l,e[mo]=l.current,Vr(8===e.nodeType?e.parentNode:e),dc((function(){Hc(t,l,n,r)})),l}(n,t,e,o,r);return Uc(i)}Qc.prototype.render=Xc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Hc(e,t,null,null)},Qc.prototype.unmount=Xc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;dc((function(){Hc(null,e,null,null)})),t[mo]=null}},Qc.prototype.unstable_scheduleHydration=function(e){if(e){var t=Et();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Ot.length&&0!==t&&t<Ot[n].priority;n++);Ot.splice(n,0,e),0===n&&Nt(e)}},wt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(yt(t,1|n),oc(t,Ke()),0==(6&Tl)&&(Wl=Ke()+500,Wo()))}break;case 13:dc((function(){var t=za(e,1);if(null!==t){var n=tc();rc(t,e,1,n)}})),Gc(e,1)}},kt=function(e){if(13===e.tag){var t=za(e,134217728);null!==t&&rc(t,e,134217728,tc()),Gc(e,134217728)}},St=function(e){if(13===e.tag){var t=nc(e),n=za(e,t);null!==n&&rc(n,e,t,tc()),Gc(e,t)}},Et=function(){return bt},Ct=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},ke=function(e,t,n){switch(t){case"input":if(Z(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=ko(r);if(!o)throw Error(a(90));G(r),Z(r,o)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Ae=uc,Te=dc;var tu={usingClientEntryPoint:!1,Events:[xo,wo,ko,_e,Pe,uc]},nu={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},ru={bundleType:nu.bundleType,version:nu.version,rendererPackageName:nu.rendererPackageName,rendererConfig:nu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:x.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ue(e))?null:e.stateNode},findFiberByHostInstance:nu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ou=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ou.isDisabled&&ou.supportsFiber)try{ot=ou.inject(ru),at=ou}catch(ue){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tu,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Kc(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Kc(e))throw Error(a(299));var n=!1,r="",o=Yc;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=$c(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,Vr(8===e.nodeType?e.parentNode:e),new Xc(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=Ue(t))?null:e.stateNode},t.flushSync=function(e){return dc(e)},t.hydrate=function(e,t,n){if(!Zc(t))throw Error(a(200));return eu(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Kc(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,o=!1,i="",s=Yc;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(s=n.onRecoverableError)),t=Wc(t,null,e,1,null!=n?n:null,o,0,i,s),e[mo]=t.current,Vr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Qc(t)},t.render=function(e,t,n){if(!Zc(t))throw Error(a(200));return eu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zc(e))throw Error(a(40));return!!e._reactRootContainer&&(dc((function(){eu(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=uc,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zc(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return eu(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{"use strict";var r=n(935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},590:e=>{var t="undefined"!=typeof Element,n="function"==typeof Map,r="function"==typeof Set,o="function"==typeof ArrayBuffer&&!!ArrayBuffer.isView;function a(e,i){if(e===i)return!0;if(e&&i&&"object"==typeof e&&"object"==typeof i){if(e.constructor!==i.constructor)return!1;var s,l,c,u;if(Array.isArray(e)){if((s=e.length)!=i.length)return!1;for(l=s;0!=l--;)if(!a(e[l],i[l]))return!1;return!0}if(n&&e instanceof Map&&i instanceof Map){if(e.size!==i.size)return!1;for(u=e.entries();!(l=u.next()).done;)if(!i.has(l.value[0]))return!1;for(u=e.entries();!(l=u.next()).done;)if(!a(l.value[1],i.get(l.value[0])))return!1;return!0}if(r&&e instanceof Set&&i instanceof Set){if(e.size!==i.size)return!1;for(u=e.entries();!(l=u.next()).done;)if(!i.has(l.value[0]))return!1;return!0}if(o&&ArrayBuffer.isView(e)&&ArrayBuffer.isView(i)){if((s=e.length)!=i.length)return!1;for(l=s;0!=l--;)if(e[l]!==i[l])return!1;return!0}if(e.constructor===RegExp)return e.source===i.source&&e.flags===i.flags;if(e.valueOf!==Object.prototype.valueOf&&"function"==typeof e.valueOf&&"function"==typeof i.valueOf)return e.valueOf()===i.valueOf();if(e.toString!==Object.prototype.toString&&"function"==typeof e.toString&&"function"==typeof i.toString)return e.toString()===i.toString();if((s=(c=Object.keys(e)).length)!==Object.keys(i).length)return!1;for(l=s;0!=l--;)if(!Object.prototype.hasOwnProperty.call(i,c[l]))return!1;if(t&&e instanceof Element)return!1;for(l=s;0!=l--;)if(("_owner"!==c[l]&&"__v"!==c[l]&&"__o"!==c[l]||!e.$$typeof)&&!a(e[c[l]],i[c[l]]))return!1;return!0}return e!=e&&i!=i}e.exports=function(e,t){try{return a(e,t)}catch(e){if((e.message||"").match(/stack|recursion/i))return console.warn("react-fast-compare cannot handle circular refs"),!1;throw e}}},921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,u=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,x=n?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case u:case d:case a:case s:case i:case p:return e;default:switch(e=e&&e.$$typeof){case c:case f:case g:case m:case l:return e;default:return t}}case o:return t}}}function k(e){return w(e)===d}t.AsyncMode=u,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=l,t.Element=r,t.ForwardRef=f,t.Fragment=a,t.Lazy=g,t.Memo=m,t.Portal=o,t.Profiler=s,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return k(e)||w(e)===u},t.isConcurrentMode=k,t.isContextConsumer=function(e){return w(e)===c},t.isContextProvider=function(e){return w(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return w(e)===f},t.isFragment=function(e){return w(e)===a},t.isLazy=function(e){return w(e)===g},t.isMemo=function(e){return w(e)===m},t.isPortal=function(e){return w(e)===o},t.isProfiler=function(e){return w(e)===s},t.isStrictMode=function(e){return w(e)===i},t.isSuspense=function(e){return w(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===s||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===l||e.$$typeof===c||e.$$typeof===f||e.$$typeof===y||e.$$typeof===b||e.$$typeof===x||e.$$typeof===v)},t.typeOf=w},864:(e,t,n)=>{"use strict";e.exports=n(921)},251:(e,t,n)=>{"use strict";var r=n(294),o=Symbol.for("react.element"),a=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,s=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,a={},c=null,u=null;for(r in void 0!==n&&(c=""+n),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(u=t.ref),t)i.call(t,r)&&!l.hasOwnProperty(r)&&(a[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===a[r]&&(a[r]=t[r]);return{$$typeof:o,type:e,key:c,ref:u,props:a,_owner:s.current}}t.Fragment=a,t.jsx=c,t.jsxs=c},408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),l=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var x=b.prototype=new y;x.constructor=b,m(x,v.prototype),x.isPureReactComponent=!0;var w=Array.isArray,k=Object.prototype.hasOwnProperty,S={current:null},E={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,r){var o,a={},i=null,s=null;if(null!=t)for(o in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,o)&&!E.hasOwnProperty(o)&&(a[o]=t[o]);var l=arguments.length-2;if(1===l)a.children=r;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];a.children=c}if(e&&e.defaultProps)for(o in l=e.defaultProps)void 0===a[o]&&(a[o]=l[o]);return{$$typeof:n,type:e,key:i,ref:s,props:a,_owner:S.current}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var P=/\/+/g;function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,o,a,i){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case r:l=!0}}if(l)return i=i(l=e),e=""===a?"."+A(l,0):a,w(i)?(o="",null!=e&&(o=e.replace(P,"$&/")+"/"),T(i,t,o,"",(function(e){return e}))):null!=i&&(_(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||l&&l.key===i.key?"":(""+i.key).replace(P,"$&/")+"/")+e)),t.push(i)),1;if(l=0,a=""===a?".":a+":",w(e))for(var c=0;c<e.length;c++){var u=a+A(s=e[c],c);l+=T(s,t,o,u,i)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),c=0;!(s=e.next()).done;)l+=T(s=s.value,t,o,u=a+A(s,c++),i);else if("object"===s)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function z(e,t,n){if(null==e)return e;var r=[],o=0;return T(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function M(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var F={current:null},O={transition:null},R={ReactCurrentDispatcher:F,ReactCurrentBatchConfig:O,ReactCurrentOwner:S};t.Children={map:z,forEach:function(e,t,n){z(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return z(e,(function(){t++})),t},toArray:function(e){return z(e,(function(e){return e}))||[]},only:function(e){if(!_(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=o,t.Profiler=i,t.PureComponent=b,t.StrictMode=a,t.Suspense=u,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),a=e.key,i=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,s=S.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(c in t)k.call(t,c)&&!E.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==l?l[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=r;else if(1<c){l=Array(c);for(var u=0;u<c;u++)l[u]=arguments[u+2];o.children=l}return{$$typeof:n,type:e.type,key:a,ref:i,props:o,_owner:s}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=C,t.createFactory=function(e){var t=C.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=_,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:M}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=O.transition;O.transition={};try{e()}finally{O.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return F.current.useCallback(e,t)},t.useContext=function(e){return F.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return F.current.useDeferredValue(e)},t.useEffect=function(e,t){return F.current.useEffect(e,t)},t.useId=function(){return F.current.useId()},t.useImperativeHandle=function(e,t,n){return F.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return F.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return F.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return F.current.useMemo(e,t)},t.useReducer=function(e,t,n){return F.current.useReducer(e,t,n)},t.useRef=function(e){return F.current.useRef(e)},t.useState=function(e){return F.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return F.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return F.current.useTransition()},t.version="18.2.0"},294:(e,t,n)=>{"use strict";e.exports=n(408)},893:(e,t,n)=>{"use strict";e.exports=n(251)},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var s=2*(r+1)-1,l=e[s],c=s+1,u=e[c];if(0>a(l,n))c<o&&0>a(u,l)?(e[r]=u,e[c]=n,r=c):(e[r]=l,e[s]=n,r=s);else{if(!(c<o&&0>a(u,n)))break e;e[r]=u,e[c]=n,r=c}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}var c=[],u=[],d=1,f=null,p=3,h=!1,m=!1,g=!1,v="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function x(e){for(var t=r(u);null!==t;){if(null===t.callback)o(u);else{if(!(t.startTime<=e))break;o(u),t.sortIndex=t.expirationTime,n(c,t)}t=r(u)}}function w(e){if(g=!1,x(e),!m)if(null!==r(c))m=!0,O(k);else{var t=r(u);null!==t&&R(w,t.startTime-e)}}function k(e,n){m=!1,g&&(g=!1,y(_),_=-1),h=!0;var a=p;try{for(x(n),f=r(c);null!==f&&(!(f.expirationTime>n)||e&&!T());){var i=f.callback;if("function"==typeof i){f.callback=null,p=f.priorityLevel;var s=i(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?f.callback=s:f===r(c)&&o(c),x(n)}else o(c);f=r(c)}if(null!==f)var l=!0;else{var d=r(u);null!==d&&R(w,d.startTime-n),l=!1}return l}finally{f=null,p=a,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var S,E=!1,C=null,_=-1,P=5,A=-1;function T(){return!(t.unstable_now()-A<P)}function z(){if(null!==C){var e=t.unstable_now();A=e;var n=!0;try{n=C(!0,e)}finally{n?S():(E=!1,C=null)}}else E=!1}if("function"==typeof b)S=function(){b(z)};else if("undefined"!=typeof MessageChannel){var M=new MessageChannel,F=M.port2;M.port1.onmessage=z,S=function(){F.postMessage(null)}}else S=function(){v(z,0)};function O(e){C=e,E||(E=!0,S())}function R(e,n){_=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,O(k))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):P=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(c)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:d++,callback:o,priorityLevel:e,startTime:a,expirationTime:s=a+s,sortIndex:-1},a>i?(e.sortIndex=a,n(u,e),null===r(c)&&e===r(u)&&(g?(y(_),_=-1):g=!0,R(w,a-i))):(e.sortIndex=s,n(c,e),m||h||(m=!0,O(k))),e},t.unstable_shouldYield=T,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},774:e=>{e.exports=function(e,t,n,r){var o=n?n.call(r,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var a=Object.keys(e),i=Object.keys(t);if(a.length!==i.length)return!1;for(var s=Object.prototype.hasOwnProperty.bind(t),l=0;l<a.length;l++){var c=a[l];if(!s(c))return!1;var u=e[c],d=t[c];if(!1===(o=n?n.call(r,u,d,c):void 0)||void 0===o&&u!==d)return!1}return!0}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],s=0;s<e.length;s++){var l=e[s],c=r.base?l[0]+r.base:l[0],u=a[c]||0,d="".concat(c," ").concat(u);a[c]=u+1;var f=n(d),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var h=o(p,r);r.byIndex=s,t.splice(s,0,{identifier:d,updater:h,references:1})}i.push(d)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=n(a[i]);t[s].references--}for(var l=r(e,o),c=0;c<a.length;c++){var u=n(a[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}a=l}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var a=r[e]={id:e,loaded:!1,exports:{}};return n[e](a,a.exports,o),a.loaded=!0,a.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var a=Object.create(null);o.r(a);var i={};e=e||[null,t({}),t([]),t(t)];for(var s=2&r&&n;"object"==typeof s&&!~e.indexOf(s);s=t(s))Object.getOwnPropertyNames(s).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,o.d(a,i),a},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),o.nc=void 0,(()=>{"use strict";var e=o(294),t=o.t(e,2),n=o(745);function r(t){return(0,e.forwardRef)(t)}var a=(...e)=>e.filter(Boolean).join(" ");function i(e){const t=typeof e;return null!=e&&("object"===t||"function"===t)&&!Array.isArray(e)}var s=e=>{const{condition:t,message:n}=e};function l(e,...t){return c(e)?e(...t):e}var c=e=>"function"==typeof e,u=e=>e?"":void 0,d=e=>!!e||void 0;function f(...e){return function(t){e.some((e=>(null==e||e(t),null==t?void 0:t.defaultPrevented)))}}var p=o(554),h=e=>"string"==typeof e?e.replace(/!(important)?$/,"").trim():e,m=(e,t)=>n=>{const r=String(t),o=(e=>/!(important)?$/.test(e))(r),a=h(r),s=e?`${e}.${a}`:a;let l=i(n.__cssMap)&&s in n.__cssMap?n.__cssMap[s].varRef:t;return l=h(l),o?`${l} !important`:l};function g(e){const{scale:t,transform:n,compose:r}=e;return(e,o)=>{var a;const i=m(t,e)(o);let s=null!=(a=null==n?void 0:n(i,o))?a:i;return r&&(s=r(s,o)),s}}var v=(...e)=>t=>e.reduce(((e,t)=>t(e)),t);function y(e,t){return n=>{const r={property:n,scale:e};return r.transform=g({scale:e,transform:t}),r}}var b=({rtl:e,ltr:t})=>n=>"rtl"===n.direction?e:t,x=["rotate(var(--chakra-rotate, 0))","scaleX(var(--chakra-scale-x, 1))","scaleY(var(--chakra-scale-y, 1))","skewX(var(--chakra-skew-x, 0))","skewY(var(--chakra-skew-y, 0))"],w={"--chakra-blur":"var(--chakra-empty,/*!*/ /*!*/)","--chakra-brightness":"var(--chakra-empty,/*!*/ /*!*/)","--chakra-contrast":"var(--chakra-empty,/*!*/ /*!*/)","--chakra-grayscale":"var(--chakra-empty,/*!*/ /*!*/)","--chakra-hue-rotate":"var(--chakra-empty,/*!*/ /*!*/)","--chakra-invert":"var(--chakra-empty,/*!*/ /*!*/)","--chakra-saturate":"var(--chakra-empty,/*!*/ /*!*/)","--chakra-sepia":"var(--chakra-empty,/*!*/ /*!*/)","--chakra-drop-shadow":"var(--chakra-empty,/*!*/ /*!*/)",filter:["var(--chakra-blur)","var(--chakra-brightness)","var(--chakra-contrast)","var(--chakra-grayscale)","var(--chakra-hue-rotate)","var(--chakra-invert)","var(--chakra-saturate)","var(--chakra-sepia)","var(--chakra-drop-shadow)"].join(" ")},k={backdropFilter:["var(--chakra-backdrop-blur)","var(--chakra-backdrop-brightness)","var(--chakra-backdrop-contrast)","var(--chakra-backdrop-grayscale)","var(--chakra-backdrop-hue-rotate)","var(--chakra-backdrop-invert)","var(--chakra-backdrop-opacity)","var(--chakra-backdrop-saturate)","var(--chakra-backdrop-sepia)"].join(" "),"--chakra-backdrop-blur":"var(--chakra-empty,/*!*/ /*!*/)","--chakra-backdrop-brightness":"var(--chakra-empty,/*!*/ /*!*/)","--chakra-backdrop-contrast":"var(--chakra-empty,/*!*/ /*!*/)","--chakra-backdrop-grayscale":"var(--chakra-empty,/*!*/ /*!*/)","--chakra-backdrop-hue-rotate":"var(--chakra-empty,/*!*/ /*!*/)","--chakra-backdrop-invert":"var(--chakra-empty,/*!*/ /*!*/)","--chakra-backdrop-opacity":"var(--chakra-empty,/*!*/ /*!*/)","--chakra-backdrop-saturate":"var(--chakra-empty,/*!*/ /*!*/)","--chakra-backdrop-sepia":"var(--chakra-empty,/*!*/ /*!*/)"},S={"row-reverse":{space:"--chakra-space-x-reverse",divide:"--chakra-divide-x-reverse"},"column-reverse":{space:"--chakra-space-y-reverse",divide:"--chakra-divide-y-reverse"}},E={"to-t":"to top","to-tr":"to top right","to-r":"to right","to-br":"to bottom right","to-b":"to bottom","to-bl":"to bottom left","to-l":"to left","to-tl":"to top left"},C=new Set(Object.values(E)),_=new Set(["none","-moz-initial","inherit","initial","revert","unset"]),P=e=>e.trim(),A=e=>"string"==typeof e&&e.includes("(")&&e.includes(")"),T=e=>t=>`${e}(${t})`,z={filter:e=>"auto"!==e?e:w,backdropFilter:e=>"auto"!==e?e:k,ring:e=>function(e){return{"--chakra-ring-offset-shadow":"var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset-width) var(--chakra-ring-offset-color)","--chakra-ring-shadow":"var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset-width)) var(--chakra-ring-color)","--chakra-ring-width":e,boxShadow:["var(--chakra-ring-offset-shadow)","var(--chakra-ring-shadow)","var(--chakra-shadow, 0 0 #0000)"].join(", ")}}(z.px(e)),bgClip:e=>"text"===e?{color:"transparent",backgroundClip:"text"}:{backgroundClip:e},transform:e=>"auto"===e?["translateX(var(--chakra-translate-x, 0))","translateY(var(--chakra-translate-y, 0))",...x].join(" "):"auto-gpu"===e?["translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)",...x].join(" "):e,vh:e=>"$100vh"===e?"var(--chakra-vh)":e,px(e){if(null==e)return e;const{unitless:t}=(e=>{const t=parseFloat(e.toString()),n=e.toString().replace(String(t),"");return{unitless:!n,value:t,unit:n}})(e);return t||"number"==typeof e?`${e}px`:e},fraction:e=>"number"!=typeof e||e>1?e:100*e+"%",float:(e,t)=>"rtl"===t.direction?{left:"right",right:"left"}[e]:e,degree(e){if(function(e){return/^var\(--.+\)$/.test(e)}(e)||null==e)return e;const t="string"==typeof e&&!e.endsWith("deg");return"number"==typeof e||t?`${e}deg`:e},gradient:(e,t)=>function(e,t){if(null==e||_.has(e))return e;if(!A(e)&&!_.has(e))return`url('${e}')`;const n=/(^[a-z-A-Z]+)\((.*)\)/g.exec(e),r=null==n?void 0:n[1],o=null==n?void 0:n[2];if(!r||!o)return e;const a=r.includes("-gradient")?r:`${r}-gradient`,[i,...s]=o.split(",").map(P).filter(Boolean);if(0===(null==s?void 0:s.length))return e;const l=i in E?E[i]:i;return s.unshift(l),`${a}(${s.map((e=>{if(C.has(e))return e;const n=e.indexOf(" "),[r,o]=-1!==n?[e.substr(0,n),e.substr(n+1)]:[e],a=A(o)?o:o&&o.split(" "),i=`colors.${r}`,s=i in t.__cssMap?t.__cssMap[i].varRef:r;return a?[s,...Array.isArray(a)?a:[a]].join(" "):s})).join(", ")})`}(e,null!=t?t:{}),blur:T("blur"),opacity:T("opacity"),brightness:T("brightness"),contrast:T("contrast"),dropShadow:T("drop-shadow"),grayscale:T("grayscale"),hueRotate:e=>T("hue-rotate")(z.degree(e)),invert:T("invert"),saturate:T("saturate"),sepia:T("sepia"),bgImage:e=>null==e||A(e)||_.has(e)?e:`url(${e})`,outline(e){const t="0"===String(e)||"none"===String(e);return null!==e&&t?{outline:"2px solid transparent",outlineOffset:"2px"}:{outline:e}},flexDirection(e){var t;const{space:n,divide:r}=null!=(t=S[e])?t:{},o={flexDirection:e};return n&&(o[n]=1),r&&(o[r]=1),o}},M={borderWidths:y("borderWidths"),borderStyles:y("borderStyles"),colors:y("colors"),borders:y("borders"),gradients:y("gradients",z.gradient),radii:y("radii",z.px),space:y("space",v(z.vh,z.px)),spaceT:y("space",v(z.vh,z.px)),degreeT:e=>({property:e,transform:z.degree}),prop:(e,t,n)=>({property:e,scale:t,...t&&{transform:g({scale:t,transform:n})}}),propT:(e,t)=>({property:e,transform:t}),sizes:y("sizes",v(z.vh,z.px)),sizesT:y("sizes",v(z.vh,z.fraction)),shadows:y("shadows"),logical:function(e){const{property:t,scale:n,transform:r}=e;return{scale:n,property:b(t),transform:n?g({scale:n,compose:r}):r}},blur:y("blur",z.blur)},F={background:M.colors("background"),backgroundColor:M.colors("backgroundColor"),backgroundImage:M.gradients("backgroundImage"),backgroundSize:!0,backgroundPosition:!0,backgroundRepeat:!0,backgroundAttachment:!0,backgroundClip:{transform:z.bgClip},bgSize:M.prop("backgroundSize"),bgPosition:M.prop("backgroundPosition"),bg:M.colors("background"),bgColor:M.colors("backgroundColor"),bgPos:M.prop("backgroundPosition"),bgRepeat:M.prop("backgroundRepeat"),bgAttachment:M.prop("backgroundAttachment"),bgGradient:M.gradients("backgroundImage"),bgClip:{transform:z.bgClip}};Object.assign(F,{bgImage:F.backgroundImage,bgImg:F.backgroundImage});var O={border:M.borders("border"),borderWidth:M.borderWidths("borderWidth"),borderStyle:M.borderStyles("borderStyle"),borderColor:M.colors("borderColor"),borderRadius:M.radii("borderRadius"),borderTop:M.borders("borderTop"),borderBlockStart:M.borders("borderBlockStart"),borderTopLeftRadius:M.radii("borderTopLeftRadius"),borderStartStartRadius:M.logical({scale:"radii",property:{ltr:"borderTopLeftRadius",rtl:"borderTopRightRadius"}}),borderEndStartRadius:M.logical({scale:"radii",property:{ltr:"borderBottomLeftRadius",rtl:"borderBottomRightRadius"}}),borderTopRightRadius:M.radii("borderTopRightRadius"),borderStartEndRadius:M.logical({scale:"radii",property:{ltr:"borderTopRightRadius",rtl:"borderTopLeftRadius"}}),borderEndEndRadius:M.logical({scale:"radii",property:{ltr:"borderBottomRightRadius",rtl:"borderBottomLeftRadius"}}),borderRight:M.borders("borderRight"),borderInlineEnd:M.borders("borderInlineEnd"),borderBottom:M.borders("borderBottom"),borderBlockEnd:M.borders("borderBlockEnd"),borderBottomLeftRadius:M.radii("borderBottomLeftRadius"),borderBottomRightRadius:M.radii("borderBottomRightRadius"),borderLeft:M.borders("borderLeft"),borderInlineStart:{property:"borderInlineStart",scale:"borders"},borderInlineStartRadius:M.logical({scale:"radii",property:{ltr:["borderTopLeftRadius","borderBottomLeftRadius"],rtl:["borderTopRightRadius","borderBottomRightRadius"]}}),borderInlineEndRadius:M.logical({scale:"radii",property:{ltr:["borderTopRightRadius","borderBottomRightRadius"],rtl:["borderTopLeftRadius","borderBottomLeftRadius"]}}),borderX:M.borders(["borderLeft","borderRight"]),borderInline:M.borders("borderInline"),borderY:M.borders(["borderTop","borderBottom"]),borderBlock:M.borders("borderBlock"),borderTopWidth:M.borderWidths("borderTopWidth"),borderBlockStartWidth:M.borderWidths("borderBlockStartWidth"),borderTopColor:M.colors("borderTopColor"),borderBlockStartColor:M.colors("borderBlockStartColor"),borderTopStyle:M.borderStyles("borderTopStyle"),borderBlockStartStyle:M.borderStyles("borderBlockStartStyle"),borderBottomWidth:M.borderWidths("borderBottomWidth"),borderBlockEndWidth:M.borderWidths("borderBlockEndWidth"),borderBottomColor:M.colors("borderBottomColor"),borderBlockEndColor:M.colors("borderBlockEndColor"),borderBottomStyle:M.borderStyles("borderBottomStyle"),borderBlockEndStyle:M.borderStyles("borderBlockEndStyle"),borderLeftWidth:M.borderWidths("borderLeftWidth"),borderInlineStartWidth:M.borderWidths("borderInlineStartWidth"),borderLeftColor:M.colors("borderLeftColor"),borderInlineStartColor:M.colors("borderInlineStartColor"),borderLeftStyle:M.borderStyles("borderLeftStyle"),borderInlineStartStyle:M.borderStyles("borderInlineStartStyle"),borderRightWidth:M.borderWidths("borderRightWidth"),borderInlineEndWidth:M.borderWidths("borderInlineEndWidth"),borderRightColor:M.colors("borderRightColor"),borderInlineEndColor:M.colors("borderInlineEndColor"),borderRightStyle:M.borderStyles("borderRightStyle"),borderInlineEndStyle:M.borderStyles("borderInlineEndStyle"),borderTopRadius:M.radii(["borderTopLeftRadius","borderTopRightRadius"]),borderBottomRadius:M.radii(["borderBottomLeftRadius","borderBottomRightRadius"]),borderLeftRadius:M.radii(["borderTopLeftRadius","borderBottomLeftRadius"]),borderRightRadius:M.radii(["borderTopRightRadius","borderBottomRightRadius"])};Object.assign(O,{rounded:O.borderRadius,roundedTop:O.borderTopRadius,roundedTopLeft:O.borderTopLeftRadius,roundedTopRight:O.borderTopRightRadius,roundedTopStart:O.borderStartStartRadius,roundedTopEnd:O.borderStartEndRadius,roundedBottom:O.borderBottomRadius,roundedBottomLeft:O.borderBottomLeftRadius,roundedBottomRight:O.borderBottomRightRadius,roundedBottomStart:O.borderEndStartRadius,roundedBottomEnd:O.borderEndEndRadius,roundedLeft:O.borderLeftRadius,roundedRight:O.borderRightRadius,roundedStart:O.borderInlineStartRadius,roundedEnd:O.borderInlineEndRadius,borderStart:O.borderInlineStart,borderEnd:O.borderInlineEnd,borderTopStartRadius:O.borderStartStartRadius,borderTopEndRadius:O.borderStartEndRadius,borderBottomStartRadius:O.borderEndStartRadius,borderBottomEndRadius:O.borderEndEndRadius,borderStartRadius:O.borderInlineStartRadius,borderEndRadius:O.borderInlineEndRadius,borderStartWidth:O.borderInlineStartWidth,borderEndWidth:O.borderInlineEndWidth,borderStartColor:O.borderInlineStartColor,borderEndColor:O.borderInlineEndColor,borderStartStyle:O.borderInlineStartStyle,borderEndStyle:O.borderInlineEndStyle});var R={color:M.colors("color"),textColor:M.colors("color"),fill:M.colors("fill"),stroke:M.colors("stroke")},j={boxShadow:M.shadows("boxShadow"),mixBlendMode:!0,blendMode:M.prop("mixBlendMode"),backgroundBlendMode:!0,bgBlendMode:M.prop("backgroundBlendMode"),opacity:!0};Object.assign(j,{shadow:j.boxShadow});var I={filter:{transform:z.filter},blur:M.blur("--chakra-blur"),brightness:M.propT("--chakra-brightness",z.brightness),contrast:M.propT("--chakra-contrast",z.contrast),hueRotate:M.propT("--chakra-hue-rotate",z.hueRotate),invert:M.propT("--chakra-invert",z.invert),saturate:M.propT("--chakra-saturate",z.saturate),dropShadow:M.propT("--chakra-drop-shadow",z.dropShadow),backdropFilter:{transform:z.backdropFilter},backdropBlur:M.blur("--chakra-backdrop-blur"),backdropBrightness:M.propT("--chakra-backdrop-brightness",z.brightness),backdropContrast:M.propT("--chakra-backdrop-contrast",z.contrast),backdropHueRotate:M.propT("--chakra-backdrop-hue-rotate",z.hueRotate),backdropInvert:M.propT("--chakra-backdrop-invert",z.invert),backdropSaturate:M.propT("--chakra-backdrop-saturate",z.saturate)},N={alignItems:!0,alignContent:!0,justifyItems:!0,justifyContent:!0,flexWrap:!0,flexDirection:{transform:z.flexDirection},flex:!0,flexFlow:!0,flexGrow:!0,flexShrink:!0,flexBasis:M.sizes("flexBasis"),justifySelf:!0,alignSelf:!0,order:!0,placeItems:!0,placeContent:!0,placeSelf:!0,gap:M.space("gap"),rowGap:M.space("rowGap"),columnGap:M.space("columnGap")};Object.assign(N,{flexDir:N.flexDirection});var D={gridGap:M.space("gridGap"),gridColumnGap:M.space("gridColumnGap"),gridRowGap:M.space("gridRowGap"),gridColumn:!0,gridRow:!0,gridAutoFlow:!0,gridAutoColumns:!0,gridColumnStart:!0,gridColumnEnd:!0,gridRowStart:!0,gridRowEnd:!0,gridAutoRows:!0,gridTemplate:!0,gridTemplateColumns:!0,gridTemplateRows:!0,gridTemplateAreas:!0,gridArea:!0},L={appearance:!0,cursor:!0,resize:!0,userSelect:!0,pointerEvents:!0,outline:{transform:z.outline},outlineOffset:!0,outlineColor:M.colors("outlineColor")},B={width:M.sizesT("width"),inlineSize:M.sizesT("inlineSize"),height:M.sizes("height"),blockSize:M.sizes("blockSize"),boxSize:M.sizes(["width","height"]),minWidth:M.sizes("minWidth"),minInlineSize:M.sizes("minInlineSize"),minHeight:M.sizes("minHeight"),minBlockSize:M.sizes("minBlockSize"),maxWidth:M.sizes("maxWidth"),maxInlineSize:M.sizes("maxInlineSize"),maxHeight:M.sizes("maxHeight"),maxBlockSize:M.sizes("maxBlockSize"),overflow:!0,overflowX:!0,overflowY:!0,overscrollBehavior:!0,overscrollBehaviorX:!0,overscrollBehaviorY:!0,display:!0,aspectRatio:!0,hideFrom:{scale:"breakpoints",transform:(e,t)=>{var n,r,o;return{[`@media screen and (min-width: ${null!=(o=null==(r=null==(n=t.__breakpoints)?void 0:n.get(e))?void 0:r.minW)?o:e})`]:{display:"none"}}}},hideBelow:{scale:"breakpoints",transform:(e,t)=>{var n,r,o;return{[`@media screen and (max-width: ${null!=(o=null==(r=null==(n=t.__breakpoints)?void 0:n.get(e))?void 0:r._minW)?o:e})`]:{display:"none"}}}},verticalAlign:!0,boxSizing:!0,boxDecorationBreak:!0,float:M.propT("float",z.float),objectFit:!0,objectPosition:!0,visibility:!0,isolation:!0};Object.assign(B,{w:B.width,h:B.height,minW:B.minWidth,maxW:B.maxWidth,minH:B.minHeight,maxH:B.maxHeight,overscroll:B.overscrollBehavior,overscrollX:B.overscrollBehaviorX,overscrollY:B.overscrollBehaviorY});var $={listStyleType:!0,listStylePosition:!0,listStylePos:M.prop("listStylePosition"),listStyleImage:!0,listStyleImg:M.prop("listStyleImage")},V=(e=>{const t=new WeakMap;return(n,r,o,a)=>{if(void 0===n)return e(n,r,o);t.has(n)||t.set(n,new Map);const i=t.get(n);if(i.has(r))return i.get(r);const s=e(n,r,o,a);return i.set(r,s),s}})((function(e,t,n,r){const o="string"==typeof t?t.split("."):[t];for(r=0;r<o.length&&e;r+=1)e=e[o[r]];return void 0===e?n:e})),W={border:"0px",clip:"rect(0, 0, 0, 0)",width:"1px",height:"1px",margin:"-1px",padding:"0px",overflow:"hidden",whiteSpace:"nowrap",position:"absolute"},H={position:"static",width:"auto",height:"auto",clip:"auto",padding:"0",margin:"0",overflow:"visible",whiteSpace:"normal"},U=(e,t,n)=>{const r={},o=V(e,t,{});for(const e in o)e in n&&null!=n[e]||(r[e]=o[e]);return r},q={srOnly:{transform:e=>!0===e?W:"focusable"===e?H:{}},layerStyle:{processResult:!0,transform:(e,t,n)=>U(t,`layerStyles.${e}`,n)},textStyle:{processResult:!0,transform:(e,t,n)=>U(t,`textStyles.${e}`,n)},apply:{processResult:!0,transform:(e,t,n)=>U(t,e,n)}},G={position:!0,pos:M.prop("position"),zIndex:M.prop("zIndex","zIndices"),inset:M.spaceT("inset"),insetX:M.spaceT(["left","right"]),insetInline:M.spaceT("insetInline"),insetY:M.spaceT(["top","bottom"]),insetBlock:M.spaceT("insetBlock"),top:M.spaceT("top"),insetBlockStart:M.spaceT("insetBlockStart"),bottom:M.spaceT("bottom"),insetBlockEnd:M.spaceT("insetBlockEnd"),left:M.spaceT("left"),insetInlineStart:M.logical({scale:"space",property:{ltr:"left",rtl:"right"}}),right:M.spaceT("right"),insetInlineEnd:M.logical({scale:"space",property:{ltr:"right",rtl:"left"}})};Object.assign(G,{insetStart:G.insetInlineStart,insetEnd:G.insetInlineEnd});var Y={ring:{transform:z.ring},ringColor:M.colors("--chakra-ring-color"),ringOffset:M.prop("--chakra-ring-offset-width"),ringOffsetColor:M.colors("--chakra-ring-offset-color"),ringInset:M.prop("--chakra-ring-inset")},X={margin:M.spaceT("margin"),marginTop:M.spaceT("marginTop"),marginBlockStart:M.spaceT("marginBlockStart"),marginRight:M.spaceT("marginRight"),marginInlineEnd:M.spaceT("marginInlineEnd"),marginBottom:M.spaceT("marginBottom"),marginBlockEnd:M.spaceT("marginBlockEnd"),marginLeft:M.spaceT("marginLeft"),marginInlineStart:M.spaceT("marginInlineStart"),marginX:M.spaceT(["marginInlineStart","marginInlineEnd"]),marginInline:M.spaceT("marginInline"),marginY:M.spaceT(["marginTop","marginBottom"]),marginBlock:M.spaceT("marginBlock"),padding:M.space("padding"),paddingTop:M.space("paddingTop"),paddingBlockStart:M.space("paddingBlockStart"),paddingRight:M.space("paddingRight"),paddingBottom:M.space("paddingBottom"),paddingBlockEnd:M.space("paddingBlockEnd"),paddingLeft:M.space("paddingLeft"),paddingInlineStart:M.space("paddingInlineStart"),paddingInlineEnd:M.space("paddingInlineEnd"),paddingX:M.space(["paddingInlineStart","paddingInlineEnd"]),paddingInline:M.space("paddingInline"),paddingY:M.space(["paddingTop","paddingBottom"]),paddingBlock:M.space("paddingBlock")};Object.assign(X,{m:X.margin,mt:X.marginTop,mr:X.marginRight,me:X.marginInlineEnd,marginEnd:X.marginInlineEnd,mb:X.marginBottom,ml:X.marginLeft,ms:X.marginInlineStart,marginStart:X.marginInlineStart,mx:X.marginX,my:X.marginY,p:X.padding,pt:X.paddingTop,py:X.paddingY,px:X.paddingX,pb:X.paddingBottom,pl:X.paddingLeft,ps:X.paddingInlineStart,paddingStart:X.paddingInlineStart,pr:X.paddingRight,pe:X.paddingInlineEnd,paddingEnd:X.paddingInlineEnd});var Q={textDecorationColor:M.colors("textDecorationColor"),textDecoration:!0,textDecor:{property:"textDecoration"},textDecorationLine:!0,textDecorationStyle:!0,textDecorationThickness:!0,textUnderlineOffset:!0,textShadow:M.shadows("textShadow")},K={clipPath:!0,transform:M.propT("transform",z.transform),transformOrigin:!0,translateX:M.spaceT("--chakra-translate-x"),translateY:M.spaceT("--chakra-translate-y"),skewX:M.degreeT("--chakra-skew-x"),skewY:M.degreeT("--chakra-skew-y"),scaleX:M.prop("--chakra-scale-x"),scaleY:M.prop("--chakra-scale-y"),scale:M.prop(["--chakra-scale-x","--chakra-scale-y"]),rotate:M.degreeT("--chakra-rotate")},Z={transition:!0,transitionDelay:!0,animation:!0,willChange:!0,transitionDuration:M.prop("transitionDuration","transition.duration"),transitionProperty:M.prop("transitionProperty","transition.property"),transitionTimingFunction:M.prop("transitionTimingFunction","transition.easing")},J={fontFamily:M.prop("fontFamily","fonts"),fontSize:M.prop("fontSize","fontSizes",z.px),fontWeight:M.prop("fontWeight","fontWeights"),lineHeight:M.prop("lineHeight","lineHeights"),letterSpacing:M.prop("letterSpacing","letterSpacings"),textAlign:!0,fontStyle:!0,textIndent:!0,wordBreak:!0,overflowWrap:!0,textOverflow:!0,textTransform:!0,whiteSpace:!0,isTruncated:{transform(e){if(!0===e)return{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"}}},noOfLines:{static:{overflow:"hidden",textOverflow:"ellipsis",display:"-webkit-box",WebkitBoxOrient:"vertical",WebkitLineClamp:"var(--chakra-line-clamp)"},property:"--chakra-line-clamp"}},ee={scrollBehavior:!0,scrollSnapAlign:!0,scrollSnapStop:!0,scrollSnapType:!0,scrollMargin:M.spaceT("scrollMargin"),scrollMarginTop:M.spaceT("scrollMarginTop"),scrollMarginBottom:M.spaceT("scrollMarginBottom"),scrollMarginLeft:M.spaceT("scrollMarginLeft"),scrollMarginRight:M.spaceT("scrollMarginRight"),scrollMarginX:M.spaceT(["scrollMarginLeft","scrollMarginRight"]),scrollMarginY:M.spaceT(["scrollMarginTop","scrollMarginBottom"]),scrollPadding:M.spaceT("scrollPadding"),scrollPaddingTop:M.spaceT("scrollPaddingTop"),scrollPaddingBottom:M.spaceT("scrollPaddingBottom"),scrollPaddingLeft:M.spaceT("scrollPaddingLeft"),scrollPaddingRight:M.spaceT("scrollPaddingRight"),scrollPaddingX:M.spaceT(["scrollPaddingLeft","scrollPaddingRight"]),scrollPaddingY:M.spaceT(["scrollPaddingTop","scrollPaddingBottom"])};function te(e){return i(e)&&e.reference?e.reference:String(e)}var ne=(e,...t)=>t.map(te).join(` ${e} `).replace(/calc/g,""),re=(...e)=>`calc(${ne("+",...e)})`,oe=(...e)=>`calc(${ne("-",...e)})`,ae=(...e)=>`calc(${ne("*",...e)})`,ie=(...e)=>`calc(${ne("/",...e)})`,se=e=>{const t=te(e);return null==t||Number.isNaN(parseFloat(t))?ae(t,-1):String(t).startsWith("-")?String(t).slice(1):`-${t}`},le=Object.assign((e=>({add:(...t)=>le(re(e,...t)),subtract:(...t)=>le(oe(e,...t)),multiply:(...t)=>le(ae(e,...t)),divide:(...t)=>le(ie(e,...t)),negate:()=>le(se(e)),toString:()=>e.toString()})),{add:re,subtract:oe,multiply:ae,divide:ie,negate:se});function ce(e,t){return`var(${e}${t?`, ${t}`:""})`}function ue(e,t=""){return function(e){return function(e){return e.replace(/[!-,/:-@[-^`{-~]/g,"\\$&")}(function(e){return e.includes("\\.")||Number.isInteger(parseFloat(e.toString()))?e:e.replace(".","\\.")}(function(e,t="-"){return e.replace(/\s+/g,t)}(e.toString())))}(`--${function(e,t=""){return[t,e].filter(Boolean).join("-")}(e,t)}`)}function de(e,t,n){const r=ue(e,n);return{variable:r,reference:ce(r,t)}}function fe(e){const t=null==e?0:e.length;return t?e[t-1]:void 0}function pe(e){if(null==e)return e;const{unitless:t}=function(e){const t=parseFloat(e.toString()),n=e.toString().replace(String(t),"");return{unitless:!n,value:t,unit:n}}(e);return t||"number"==typeof e?`${e}px`:e}var he=(e,t)=>parseInt(e[1],10)>parseInt(t[1],10)?1:-1,me=e=>Object.fromEntries(Object.entries(e).sort(he));function ge(e){const t=me(e);return Object.assign(Object.values(t),t)}function ve(e){var t;return e?"number"==typeof(e=null!=(t=pe(e))?t:e)?`${e+-.02}`:e.replace(/(\d+\.?\d*)/u,(e=>`${parseFloat(e)+-.02}`)):e}function ye(e,t){const n=["@media screen"];return e&&n.push("and",`(min-width: ${pe(e)})`),t&&n.push("and",`(max-width: ${pe(t)})`),n.join(" ")}function be(e){var t;if(!e)return null;e.base=null!=(t=e.base)?t:"0px";const n=ge(e),r=Object.entries(e).sort(he).map((([e,t],n,r)=>{var o;let[,a]=null!=(o=r[n+1])?o:[];return a=parseFloat(a)>0?ve(a):void 0,{_minW:ve(t),breakpoint:e,minW:t,maxW:a,maxWQuery:ye(null,a),minWQuery:ye(t),minMaxQuery:ye(t,a)}})),o=function(e){const t=Object.keys(me(e));return new Set(t)}(e),a=Array.from(o.values());return{keys:o,normalized:n,isResponsive(e){const t=Object.keys(e);return t.length>0&&t.every((e=>o.has(e)))},asObject:me(e),asArray:ge(e),details:r,get:e=>r.find((t=>t.breakpoint===e)),media:[null,...n.map((e=>ye(e))).slice(1)],toArrayValue(e){if(!i(e))throw new Error("toArrayValue: value must be an object");const t=a.map((t=>{var n;return null!=(n=e[t])?n:null}));for(;null===fe(t);)t.pop();return t},toObjectValue(e){if(!Array.isArray(e))throw new Error("toObjectValue: value must be an array");return e.reduce(((e,t,n)=>{const r=a[n];return null!=r&&null!=t&&(e[r]=t),e}),{})}}}var xe=(e,t)=>`${e}:hover ${t}, ${e}[data-hover] ${t}`,we=(e,t)=>`${e}:focus ${t}, ${e}[data-focus] ${t}`,ke=(e,t)=>`${e}:focus-visible ${t}`,Se=(e,t)=>`${e}:focus-within ${t}`,Ee=(e,t)=>`${e}:active ${t}, ${e}[data-active] ${t}`,Ce=(e,t)=>`${e}:disabled ${t}, ${e}[data-disabled] ${t}`,_e=(e,t)=>`${e}:invalid ${t}, ${e}[data-invalid] ${t}`,Pe=(e,t)=>`${e}:checked ${t}, ${e}[data-checked] ${t}`,Ae=e=>ze((t=>e(t,"&")),"[role=group]","[data-group]",".group"),Te=e=>ze((t=>e(t,"~ &")),"[data-peer]",".peer"),ze=(e,...t)=>t.map(e).join(", "),Me={_hover:"&:hover, &[data-hover]",_active:"&:active, &[data-active]",_focus:"&:focus, &[data-focus]",_highlighted:"&[data-highlighted]",_focusWithin:"&:focus-within",_focusVisible:"&:focus-visible, &[data-focus-visible]",_disabled:"&:disabled, &[disabled], &[aria-disabled=true], &[data-disabled]",_readOnly:"&[aria-readonly=true], &[readonly], &[data-readonly]",_before:"&::before",_after:"&::after",_empty:"&:empty",_expanded:"&[aria-expanded=true], &[data-expanded]",_checked:"&[aria-checked=true], &[data-checked]",_grabbed:"&[aria-grabbed=true], &[data-grabbed]",_pressed:"&[aria-pressed=true], &[data-pressed]",_invalid:"&[aria-invalid=true], &[data-invalid]",_valid:"&[data-valid], &[data-state=valid]",_loading:"&[data-loading], &[aria-busy=true]",_selected:"&[aria-selected=true], &[data-selected]",_hidden:"&[hidden], &[data-hidden]",_autofill:"&:-webkit-autofill",_even:"&:nth-of-type(even)",_odd:"&:nth-of-type(odd)",_first:"&:first-of-type",_firstLetter:"&::first-letter",_last:"&:last-of-type",_notFirst:"&:not(:first-of-type)",_notLast:"&:not(:last-of-type)",_visited:"&:visited",_activeLink:"&[aria-current=page]",_activeStep:"&[aria-current=step]",_indeterminate:"&:indeterminate, &[aria-checked=mixed], &[data-indeterminate]",_groupHover:Ae(xe),_peerHover:Te(xe),_groupFocus:Ae(we),_peerFocus:Te(we),_groupFocusVisible:Ae(ke),_peerFocusVisible:Te(ke),_groupActive:Ae(Ee),_peerActive:Te(Ee),_groupDisabled:Ae(Ce),_peerDisabled:Te(Ce),_groupInvalid:Ae(_e),_peerInvalid:Te(_e),_groupChecked:Ae(Pe),_peerChecked:Te(Pe),_groupFocusWithin:Ae(Se),_peerFocusWithin:Te(Se),_peerPlaceholderShown:Te(((e,t)=>`${e}:placeholder-shown ${t}`)),_placeholder:"&::placeholder",_placeholderShown:"&:placeholder-shown",_fullScreen:"&:fullscreen",_selection:"&::selection",_rtl:"[dir=rtl] &, &[dir=rtl]",_ltr:"[dir=ltr] &, &[dir=ltr]",_mediaDark:"@media (prefers-color-scheme: dark)",_mediaReduceMotion:"@media (prefers-reduced-motion: reduce)",_dark:".chakra-ui-dark &:not([data-theme]),[data-theme=dark] &:not([data-theme]),&[data-theme=dark]",_light:".chakra-ui-light &:not([data-theme]),[data-theme=light] &:not([data-theme]),&[data-theme=light]",_horizontal:"&[data-orientation=horizontal]",_vertical:"&[data-orientation=vertical]"},Fe=Object.keys(Me);function Oe(e,t){return de(String(e).replace(/\./g,"-"),void 0,t)}function Re(e,t,n={}){const{stop:r,getKey:o}=n;return function e(n,a=[]){var i;if(function(e){return"object"==typeof e&&null!=e&&!Array.isArray(e)}(n)||Array.isArray(n)){const s={};for(const[l,c]of Object.entries(n)){const u=null!=(i=null==o?void 0:o(l))?i:l,d=[...a,u];if(null==r?void 0:r(n,d))return t(n,a);s[u]=e(c,d)}return s}return t(n,a)}(e)}var je=["colors","borders","borderWidths","borderStyles","fonts","fontSizes","fontWeights","gradients","letterSpacings","lineHeights","radii","space","shadows","sizes","zIndices","transition","blur","breakpoints"],Ie=e=>Fe.includes(e)||"default"===e;var Ne=p({},F,O,R,N,B,I,Y,L,D,q,G,j,X,ee,J,Q,K,$,Z),De=Object.assign({},X,B,N,D,G),Le=(Object.keys(De),[...Object.keys(Ne),...Fe]),Be={...Ne,...Me},$e=e=>e in Be,Ve=(e,t)=>e.startsWith("--")&&"string"==typeof t&&!function(e){return/^var\(--.+\)$/.test(e)}(t),We=(e,t)=>{var n,r;if(null==t)return t;const o=t=>{var n,r;return null==(r=null==(n=e.__cssMap)?void 0:n[t])?void 0:r.varRef},a=e=>{var t;return null!=(t=o(e))?t:e},[i,s]=function(e){const t=[];let n="",r=!1;for(let o=0;o<e.length;o++){const a=e[o];"("===a?(r=!0,n+=a):")"===a?(r=!1,n+=a):","!==a||r?n+=a:(t.push(n),n="")}return n=n.trim(),n&&t.push(n),t}(t);return null!=(r=null!=(n=o(i))?n:a(s))?r:a(t)},He=e=>t=>{const n=function(e){const{configs:t={},pseudos:n={},theme:r}=e,o=(e,a=!1)=>{var s,c,u;const d=l(e,r),f=(e=>t=>{if(!t.__breakpoints)return e;const{isResponsive:n,toArrayValue:r,media:o}=t.__breakpoints,a={};for(const s in e){let c=l(e[s],t);if(null==c)continue;if(c=i(c)&&n(c)?r(c):c,!Array.isArray(c)){a[s]=c;continue}const u=c.slice(0,o.length).length;for(let e=0;e<u;e+=1){const t=null==o?void 0:o[e];t?(a[t]=a[t]||{},null!=c[e]&&(a[t][s]=c[e])):a[s]=c[e]}}return a})(d)(r);let h={};for(let e in f){let m=l(f[e],r);e in n&&(e=n[e]),Ve(e,m)&&(m=We(r,m));let g=t[e];if(!0===g&&(g={property:e}),i(m)){h[e]=null!=(s=h[e])?s:{},h[e]=p({},h[e],o(m,!0));continue}let v=null!=(u=null==(c=null==g?void 0:g.transform)?void 0:c.call(g,m,r,d))?u:m;v=(null==g?void 0:g.processResult)?o(v,!0):v;const y=l(null==g?void 0:g.property,r);if(!a&&(null==g?void 0:g.static)){const e=l(g.static,r);h=p({},h,e)}if(y&&Array.isArray(y))for(const e of y)h[e]=v;else y?"&"===y&&i(v)?h=p({},h,v):h[y]=v:i(v)?h=p({},h,v):h[e]=v}return h};return o}({theme:t,pseudos:Me,configs:Ne});return n(e)};function Ue(e){return{definePartsStyle:e=>e,defineMultiStyleConfig:t=>({parts:e,...t})}}function qe(e,t){for(let n=t+1;n<e.length;n++)if(null!=e[n])return n;return-1}function Ge(e){return function(e,t=[]){const n=Object.assign({},e);for(const e of t)e in n&&delete n[e];return n}(e,["styleConfig","size","variant","colorScheme"])}var Ye=new Set([...Le,"textStyle","layerStyle","apply","noOfLines","focusBorderColor","errorBorderColor","as","__css","css","sx"]),Xe=new Set(["htmlWidth","htmlHeight","htmlSize","htmlTranslate"]);function Qe(e){return Xe.has(e)||!Ye.has(e)}var Ke=(0,e.createContext)({});function Ze(){const t=(0,e.useContext)(Ke);if(void 0===t)throw new Error("useColorMode must be used within a ColorModeProvider");return t}function Je(e,t){const{colorMode:n}=Ze();return"dark"===n?t:e}Ke.displayName="ColorModeContext";var et=(e=>{const t=new WeakMap;return(n,r,o,a)=>{if(void 0===n)return e(n,r,o);t.has(n)||t.set(n,new Map);const i=t.get(n);if(i.has(r))return i.get(r);const s=e(n,r,o,a);return i.set(r,s),s}})((function(e,t,n,r){const o="string"==typeof t?t.split("."):[t];for(r=0;r<o.length&&e;r+=1)e=e[o[r]];return void 0===e?n:e}));function tt(e,t){const n={};return Object.keys(e).forEach((r=>{const o=e[r];t(o,r,e)&&(n[r]=o)})),n}var nt=e=>tt(e,(e=>null!=e));function rt(e,...t){return"function"==typeof e?e(...t):e}function ot(...e){return function(t){e.some((e=>(null==e||e(t),null==t?void 0:t.defaultPrevented)))}}function at(){return at=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},at.apply(this,arguments)}function it(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}var st=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,lt=it((function(e){return st.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),ct=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),ut=Math.abs,dt=String.fromCharCode,ft=Object.assign;function pt(e){return e.trim()}function ht(e,t,n){return e.replace(t,n)}function mt(e,t){return e.indexOf(t)}function gt(e,t){return 0|e.charCodeAt(t)}function vt(e,t,n){return e.slice(t,n)}function yt(e){return e.length}function bt(e){return e.length}function xt(e,t){return t.push(e),e}var wt=1,kt=1,St=0,Et=0,Ct=0,_t="";function Pt(e,t,n,r,o,a,i){return{value:e,root:t,parent:n,type:r,props:o,children:a,line:wt,column:kt,length:i,return:""}}function At(e,t){return ft(Pt("",null,null,"",null,null,0),e,{length:-e.length},t)}function Tt(){return Ct=Et>0?gt(_t,--Et):0,kt--,10===Ct&&(kt=1,wt--),Ct}function zt(){return Ct=Et<St?gt(_t,Et++):0,kt++,10===Ct&&(kt=1,wt++),Ct}function Mt(){return gt(_t,Et)}function Ft(){return Et}function Ot(e,t){return vt(_t,e,t)}function Rt(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function jt(e){return wt=kt=1,St=yt(_t=e),Et=0,[]}function It(e){return _t="",e}function Nt(e){return pt(Ot(Et-1,Bt(91===e?e+2:40===e?e+1:e)))}function Dt(e){for(;(Ct=Mt())&&Ct<33;)zt();return Rt(e)>2||Rt(Ct)>3?"":" "}function Lt(e,t){for(;--t&&zt()&&!(Ct<48||Ct>102||Ct>57&&Ct<65||Ct>70&&Ct<97););return Ot(e,Ft()+(t<6&&32==Mt()&&32==zt()))}function Bt(e){for(;zt();)switch(Ct){case e:return Et;case 34:case 39:34!==e&&39!==e&&Bt(Ct);break;case 40:41===e&&Bt(e);break;case 92:zt()}return Et}function $t(e,t){for(;zt()&&e+Ct!==57&&(e+Ct!==84||47!==Mt()););return"/*"+Ot(t,Et-1)+"*"+dt(47===e?e:zt())}function Vt(e){for(;!Rt(Mt());)zt();return Ot(e,Et)}var Wt="-ms-",Ht="-moz-",Ut="-webkit-",qt="comm",Gt="rule",Yt="decl",Xt="@import",Qt="@keyframes",Kt="@layer";function Zt(e,t){for(var n="",r=bt(e),o=0;o<r;o++)n+=t(e[o],o,e,t)||"";return n}function Jt(e,t,n,r){switch(e.type){case Kt:if(e.children.length)break;case Xt:case Yt:return e.return=e.return||e.value;case qt:return"";case Qt:return e.return=e.value+"{"+Zt(e.children,r)+"}";case Gt:e.value=e.props.join(",")}return yt(n=Zt(e.children,r))?e.return=e.value+"{"+n+"}":""}function en(e){return It(tn("",null,null,null,[""],e=jt(e),0,[0],e))}function tn(e,t,n,r,o,a,i,s,l){for(var c=0,u=0,d=i,f=0,p=0,h=0,m=1,g=1,v=1,y=0,b="",x=o,w=a,k=r,S=b;g;)switch(h=y,y=zt()){case 40:if(108!=h&&58==gt(S,d-1)){-1!=mt(S+=ht(Nt(y),"&","&\f"),"&\f")&&(v=-1);break}case 34:case 39:case 91:S+=Nt(y);break;case 9:case 10:case 13:case 32:S+=Dt(h);break;case 92:S+=Lt(Ft()-1,7);continue;case 47:switch(Mt()){case 42:case 47:xt(rn($t(zt(),Ft()),t,n),l);break;default:S+="/"}break;case 123*m:s[c++]=yt(S)*v;case 125*m:case 59:case 0:switch(y){case 0:case 125:g=0;case 59+u:-1==v&&(S=ht(S,/\f/g,"")),p>0&&yt(S)-d&&xt(p>32?on(S+";",r,n,d-1):on(ht(S," ","")+";",r,n,d-2),l);break;case 59:S+=";";default:if(xt(k=nn(S,t,n,c,u,o,s,b,x=[],w=[],d),a),123===y)if(0===u)tn(S,t,k,k,x,a,d,s,w);else switch(99===f&&110===gt(S,3)?100:f){case 100:case 108:case 109:case 115:tn(e,k,k,r&&xt(nn(e,k,k,0,0,o,s,b,o,x=[],d),w),o,w,d,s,r?x:w);break;default:tn(S,k,k,k,[""],w,0,s,w)}}c=u=p=0,m=v=1,b=S="",d=i;break;case 58:d=1+yt(S),p=h;default:if(m<1)if(123==y)--m;else if(125==y&&0==m++&&125==Tt())continue;switch(S+=dt(y),y*m){case 38:v=u>0?1:(S+="\f",-1);break;case 44:s[c++]=(yt(S)-1)*v,v=1;break;case 64:45===Mt()&&(S+=Nt(zt())),f=Mt(),u=d=yt(b=S+=Vt(Ft())),y++;break;case 45:45===h&&2==yt(S)&&(m=0)}}return a}function nn(e,t,n,r,o,a,i,s,l,c,u){for(var d=o-1,f=0===o?a:[""],p=bt(f),h=0,m=0,g=0;h<r;++h)for(var v=0,y=vt(e,d+1,d=ut(m=i[h])),b=e;v<p;++v)(b=pt(m>0?f[v]+" "+y:ht(y,/&\f/g,f[v])))&&(l[g++]=b);return Pt(e,t,n,0===o?Gt:s,l,c,u)}function rn(e,t,n){return Pt(e,t,n,qt,dt(Ct),vt(e,2,-2),0)}function on(e,t,n,r){return Pt(e,t,n,Yt,vt(e,0,r),vt(e,r+1,-1),r)}var an=function(e,t,n){for(var r=0,o=0;r=o,o=Mt(),38===r&&12===o&&(t[n]=1),!Rt(o);)zt();return Ot(e,Et)},sn=new WeakMap,ln=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||sn.get(n))&&!r){sn.set(e,!0);for(var o=[],a=function(e,t){return It(function(e,t){var n=-1,r=44;do{switch(Rt(r)){case 0:38===r&&12===Mt()&&(t[n]=1),e[n]+=an(Et-1,t,n);break;case 2:e[n]+=Nt(r);break;case 4:if(44===r){e[++n]=58===Mt()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=dt(r)}}while(r=zt());return e}(jt(e),t))}(t,o),i=n.props,s=0,l=0;s<a.length;s++)for(var c=0;c<i.length;c++,l++)e.props[l]=o[s]?a[s].replace(/&\f/g,i[c]):i[c]+" "+a[s]}}},cn=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function un(e,t){switch(function(e,t){return 45^gt(e,0)?(((t<<2^gt(e,0))<<2^gt(e,1))<<2^gt(e,2))<<2^gt(e,3):0}(e,t)){case 5103:return Ut+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return Ut+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return Ut+e+Ht+e+Wt+e+e;case 6828:case 4268:return Ut+e+Wt+e+e;case 6165:return Ut+e+Wt+"flex-"+e+e;case 5187:return Ut+e+ht(e,/(\w+).+(:[^]+)/,Ut+"box-$1$2"+Wt+"flex-$1$2")+e;case 5443:return Ut+e+Wt+"flex-item-"+ht(e,/flex-|-self/,"")+e;case 4675:return Ut+e+Wt+"flex-line-pack"+ht(e,/align-content|flex-|-self/,"")+e;case 5548:return Ut+e+Wt+ht(e,"shrink","negative")+e;case 5292:return Ut+e+Wt+ht(e,"basis","preferred-size")+e;case 6060:return Ut+"box-"+ht(e,"-grow","")+Ut+e+Wt+ht(e,"grow","positive")+e;case 4554:return Ut+ht(e,/([^-])(transform)/g,"$1"+Ut+"$2")+e;case 6187:return ht(ht(ht(e,/(zoom-|grab)/,Ut+"$1"),/(image-set)/,Ut+"$1"),e,"")+e;case 5495:case 3959:return ht(e,/(image-set\([^]*)/,Ut+"$1$`$1");case 4968:return ht(ht(e,/(.+:)(flex-)?(.*)/,Ut+"box-pack:$3"+Wt+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+Ut+e+e;case 4095:case 3583:case 4068:case 2532:return ht(e,/(.+)-inline(.+)/,Ut+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(yt(e)-1-t>6)switch(gt(e,t+1)){case 109:if(45!==gt(e,t+4))break;case 102:return ht(e,/(.+:)(.+)-([^]+)/,"$1"+Ut+"$2-$3$1"+Ht+(108==gt(e,t+3)?"$3":"$2-$3"))+e;case 115:return~mt(e,"stretch")?un(ht(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==gt(e,t+1))break;case 6444:switch(gt(e,yt(e)-3-(~mt(e,"!important")&&10))){case 107:return ht(e,":",":"+Ut)+e;case 101:return ht(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+Ut+(45===gt(e,14)?"inline-":"")+"box$3$1"+Ut+"$2$3$1"+Wt+"$2box$3")+e}break;case 5936:switch(gt(e,t+11)){case 114:return Ut+e+Wt+ht(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return Ut+e+Wt+ht(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return Ut+e+Wt+ht(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return Ut+e+Wt+e+e}return e}var dn=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case Yt:e.return=un(e.value,e.length);break;case Qt:return Zt([At(e,{value:ht(e.value,"@","@"+Ut)})],r);case Gt:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return Zt([At(e,{props:[ht(t,/:(read-\w+)/,":"+Ht+"$1")]})],r);case"::placeholder":return Zt([At(e,{props:[ht(t,/:(plac\w+)/,":"+Ut+"input-$1")]}),At(e,{props:[ht(t,/:(plac\w+)/,":"+Ht+"$1")]}),At(e,{props:[ht(t,/:(plac\w+)/,Wt+"input-$1")]})],r)}return""}))}}],fn=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var r,o,a=e.stylisPlugins||dn,i={},s=[];r=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)i[t[n]]=!0;s.push(e)}));var l,c,u,d,f=[Jt,(d=function(e){l.insert(e)},function(e){e.root||(e=e.return)&&d(e)})],p=(c=[ln,cn].concat(a,f),u=bt(c),function(e,t,n,r){for(var o="",a=0;a<u;a++)o+=c[a](e,t,n,r)||"";return o});o=function(e,t,n,r){l=n,function(e){Zt(en(e),p)}(e?e+"{"+t.styles+"}":t.styles),r&&(h.inserted[t.name]=!0)};var h={key:t,sheet:new ct({key:t,container:r,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:i,registered:{},insert:o};return h.sheet.hydrate(s),h},pn=function(e){var t=new WeakMap;return function(n){if(t.has(n))return t.get(n);var r=e(n);return t.set(n,r),r}},hn={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},mn=/[A-Z]|^ms/g,gn=/_EMO_([^_]+?)_([^]*?)_EMO_/g,vn=function(e){return 45===e.charCodeAt(1)},yn=function(e){return null!=e&&"boolean"!=typeof e},bn=it((function(e){return vn(e)?e:e.replace(mn,"-$&").toLowerCase()})),xn=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(gn,(function(e,t,n){return kn={name:t,styles:n,next:kn},t}))}return 1===hn[e]||vn(e)||"number"!=typeof t||0===t?t:t+"px"};function wn(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return kn={name:n.name,styles:n.styles,next:kn},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)kn={name:r.name,styles:r.styles,next:kn},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=wn(e,t,n[o])+";";else for(var a in n){var i=n[a];if("object"!=typeof i)null!=t&&void 0!==t[i]?r+=a+"{"+t[i]+"}":yn(i)&&(r+=bn(a)+":"+xn(a,i)+";");else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var s=wn(e,t,i);switch(a){case"animation":case"animationName":r+=bn(a)+":"+s+";";break;default:r+=a+"{"+s+"}"}}else for(var l=0;l<i.length;l++)yn(i[l])&&(r+=bn(a)+":"+xn(a,i[l])+";")}return r}(e,t,n);case"function":if(void 0!==e){var o=kn,a=n(e);return kn=o,wn(e,t,a)}}if(null==t)return n;var i=t[n];return void 0!==i?i:n}var kn,Sn=/label:\s*([^\s;\n{]+)\s*(;|$)/g,En=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,o="";kn=void 0;var a=e[0];null==a||void 0===a.raw?(r=!1,o+=wn(n,t,a)):o+=a[0];for(var i=1;i<e.length;i++)o+=wn(n,t,e[i]),r&&(o+=a[i]);Sn.lastIndex=0;for(var s,l="";null!==(s=Sn.exec(o));)l+="-"+s[1];var c=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)}(o)+l;return{name:c,styles:o,next:kn}},Cn=!!t.useInsertionEffect&&t.useInsertionEffect,_n=Cn||function(e){return e()},Pn=Cn||e.useLayoutEffect,An=e.createContext("undefined"!=typeof HTMLElement?fn({key:"css"}):null);An.Provider;var Tn,zn=function(t){return(0,e.forwardRef)((function(n,r){var o=(0,e.useContext)(An);return t(n,o,r)}))},Mn=e.createContext({}),Fn=pn((function(e){return pn((function(t){return function(e,t){return"function"==typeof t?t(e):at({},e,t)}(e,t)}))})),On=function(t){var n=e.useContext(Mn);return t.theme!==n&&(n=Fn(n)(t.theme)),e.createElement(Mn.Provider,{value:n},t.children)},Rn=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},jn=function(e,t,n){Rn(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var o=t;do{e.insert(t===o?"."+r:"",o,e.sheet,!0),o=o.next}while(void 0!==o)}},In=lt,Nn=function(e){return"theme"!==e},Dn=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?In:Nn},Ln=function(e,t,n){var r;if(t){var o=t.shouldForwardProp;r=e.__emotion_forwardProp&&o?function(t){return e.__emotion_forwardProp(t)&&o(t)}:o}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},Bn=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return Rn(t,n,r),_n((function(){return jn(t,n,r)})),null},$n=function t(n,r){var o,a,i=n.__emotion_real===n,s=i&&n.__emotion_base||n;void 0!==r&&(o=r.label,a=r.target);var l=Ln(n,r,i),c=l||Dn(s),u=!c("as");return function(){var d=arguments,f=i&&void 0!==n.__emotion_styles?n.__emotion_styles.slice(0):[];if(void 0!==o&&f.push("label:"+o+";"),null==d[0]||void 0===d[0].raw)f.push.apply(f,d);else{f.push(d[0][0]);for(var p=d.length,h=1;h<p;h++)f.push(d[h],d[0][h])}var m=zn((function(t,n,r){var o=u&&t.as||s,i="",d=[],p=t;if(null==t.theme){for(var h in p={},t)p[h]=t[h];p.theme=e.useContext(Mn)}"string"==typeof t.className?i=function(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):r+=n+" "})),r}(n.registered,d,t.className):null!=t.className&&(i=t.className+" ");var m=En(f.concat(d),n.registered,p);i+=n.key+"-"+m.name,void 0!==a&&(i+=" "+a);var g=u&&void 0===l?Dn(o):c,v={};for(var y in t)u&&"as"===y||g(y)&&(v[y]=t[y]);return v.className=i,v.ref=r,e.createElement(e.Fragment,null,e.createElement(Bn,{cache:n,serialized:m,isStringTag:"string"==typeof o}),e.createElement(o,v))}));return m.displayName=void 0!==o?o:"Styled("+("string"==typeof s?s:s.displayName||s.name||"Component")+")",m.defaultProps=n.defaultProps,m.__emotion_real=m,m.__emotion_base=s,m.__emotion_styles=f,m.__emotion_forwardProp=l,Object.defineProperty(m,"toString",{value:function(){return"."+a}}),m.withComponent=function(e,n){return t(e,at({},r,n,{shouldForwardProp:Ln(m,n,!0)})).apply(void 0,f)},m}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){$n[e]=$n(e)}));var Vn=null!=(Tn=$n.default)?Tn:$n,Wn=({baseStyle:e})=>t=>{const{theme:n,css:r,__css:o,sx:a,...i}=t,s=tt(i,((e,t)=>$e(t))),l=function(e,...t){if(null==e)throw new TypeError("Cannot convert undefined or null to object");const n={...e};for(const e of t)if(null!=e)for(const t in e)Object.prototype.hasOwnProperty.call(e,t)&&(t in n&&delete n[t],n[t]=e[t]);return n}({},o,rt(e,t),nt(s),a),c=He(l)(t.theme);return r?[c,r]:c};function Hn(t,n){const{baseStyle:r,...o}=null!=n?n:{};o.shouldForwardProp||(o.shouldForwardProp=Qe);const a=Wn({baseStyle:r}),i=Vn(t,o)(a);return e.forwardRef((function(t,n){const{colorMode:r,forced:o}=Ze();return e.createElement(i,{ref:n,"data-theme":o?r:void 0,...t})}))}var Un=function(){const e=new Map;return new Proxy(Hn,{apply:(e,t,n)=>Hn(...n),get:(t,n)=>(e.has(n)||e.set(n,Hn(n)),e.get(n))})}(),qn=o(893),Gn=r((function(e,t){const{direction:n,align:r,justify:o,wrap:a,basis:i,grow:s,shrink:l,...c}=e,u={display:"flex",flexDirection:n,alignItems:r,justifyContent:o,flexWrap:a,flexBasis:i,flexGrow:s,flexShrink:l};return(0,qn.jsx)(Un.div,{ref:t,__css:u,...c})}));Gn.displayName="Flex";var Yn=Un("div");Yn.displayName="Box";var Xn=r((function(e,t){const{size:n,centerContent:r=!0,...o}=e,a=r?{display:"flex",alignItems:"center",justifyContent:"center"}:{};return(0,qn.jsx)(Yn,{ref:t,boxSize:n,__css:{...a,flexShrink:0,flexGrow:0},...o})}));Xn.displayName="Square";var Qn=r((function(e,t){const{size:n,...r}=e;return(0,qn.jsx)(Xn,{size:n,ref:t,borderRadius:"9999px",...r})}));Qn.displayName="Circle";var Kn=function(){return e.createElement("svg",{cursor:"pointer",width:"24",viewBox:"0 0 18 18",xmlns:"http://www.w3.org/2000/svg"},e.createElement("title",null,"Close"),e.createElement("path",{fill:"white",d:"M9.00023 7.58599L13.9502 2.63599L15.3642 4.04999L10.4142 8.99999L15.3642 13.95L13.9502 15.364L9.00023 10.414L4.05023 15.364L2.63623 13.95L7.58623 8.99999L2.63623 4.04999L4.05023 2.63599L9.00023 7.58599Z"}))},Zn=function(){return e.createElement("svg",{cursor:"pointer",width:"24px",viewBox:"0 0 20 20",xmlns:"http://www.w3.org/2000/svg",fill:"hsl(229, 31%, 21%)"},e.createElement("title",null,"Menu"),e.createElement("path",{d:"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z"}))};const Jn=function(t){var n=t.toggle,r=t.isOpen;return e.createElement(Yn,{display:{base:"block",md:"none"},onClick:n},r?e.createElement(Kn,null):e.createElement(Zn,null))};var er=e=>(0,qn.jsx)(Un.div,{className:"chakra-stack__item",...e,__css:{display:"inline-block",flex:"0 0 auto",minWidth:0,...e.__css}});function tr(t){return e.Children.toArray(t).filter((t=>(0,e.isValidElement)(t)))}er.displayName="StackItem",Object.freeze(["base","sm","md","lg","xl","2xl"]);var nr=r(((t,n)=>{const{isInline:r,direction:o,align:s,justify:l,spacing:c="0.5rem",wrap:u,children:d,divider:f,className:p,shouldWrapChildren:h,...m}=t,g=r?"row":null!=o?o:"column",v=(0,e.useMemo)((()=>function(e){const{spacing:t,direction:n}=e,r={column:{my:t,mx:0,borderLeftWidth:0,borderBottomWidth:"1px"},"column-reverse":{my:t,mx:0,borderLeftWidth:0,borderBottomWidth:"1px"},row:{mx:t,my:0,borderLeftWidth:"1px",borderBottomWidth:0},"row-reverse":{mx:t,my:0,borderLeftWidth:"1px",borderBottomWidth:0}};return{"&":(o=n,a=e=>r[e],Array.isArray(o)?o.map((e=>null===e?null:a(e))):i(o)?Object.keys(o).reduce(((e,t)=>(e[t]=a(o[t]),e)),{}):null!=o?a(o):null)};var o,a}({spacing:c,direction:g})),[c,g]),y=!!f,b=!h&&!y,x=(0,e.useMemo)((()=>{const t=tr(d);return b?t:t.map(((n,r)=>{const o=void 0!==n.key?n.key:r,a=r+1===t.length,i=h?(0,qn.jsx)(er,{children:n},o):n;if(!y)return i;const s=(0,e.cloneElement)(f,{__css:v}),l=a?null:s;return(0,qn.jsxs)(e.Fragment,{children:[i,l]},o)}))}),[f,v,y,b,h,d]),w=a("chakra-stack",p);return(0,qn.jsx)(Un.div,{ref:n,display:"flex",alignItems:s,justifyContent:l,flexDirection:g,flexWrap:u,gap:y?void 0:c,className:w,...m,children:x})}));function rr(t={}){const{name:n,strict:r=!0,hookName:o="useContext",providerName:a="Provider",errorMessage:i,defaultValue:s}=t,l=(0,e.createContext)(s);return l.displayName=n,[l.Provider,function t(){var n;const s=(0,e.useContext)(l);if(!s&&r){const e=new Error(null!=i?i:`${o} returned \`undefined\`. Seems you forgot to wrap component within ${a}`);throw e.name="ContextError",null==(n=Error.captureStackTrace)||n.call(Error,e,t),e}return s},l]}nr.displayName="Stack";var[or,ar]=rr({strict:!1,name:"ButtonGroupContext"});function ir(t){const{children:n,className:r,...o}=t,i=(0,e.isValidElement)(n)?(0,e.cloneElement)(n,{"aria-hidden":!0,focusable:!1}):n,s=a("chakra-button__icon",r);return(0,qn.jsx)(Un.span,{display:"inline-flex",alignSelf:"center",flexShrink:0,...o,className:s,children:i})}ir.displayName="ButtonIcon",o(679);var sr=zn((function(t,n){var r=t.styles,o=En([r],void 0,e.useContext(Mn)),a=e.useRef();return Pn((function(){var e=n.key+"-global",t=new n.sheet.constructor({key:e,nonce:n.sheet.nonce,container:n.sheet.container,speedy:n.sheet.isSpeedy}),r=!1,i=document.querySelector('style[data-emotion="'+e+" "+o.name+'"]');return n.sheet.tags.length&&(t.before=n.sheet.tags[0]),null!==i&&(r=!0,i.setAttribute("data-emotion",e),t.hydrate([i])),a.current=[t,r],function(){t.flush()}}),[n]),Pn((function(){var e=a.current,t=e[0];if(e[1])e[1]=!1;else{if(void 0!==o.next&&jn(n,o.next,!0),t.tags.length){var r=t.tags[t.tags.length-1].nextElementSibling;t.before=r,t.flush()}n.insert("",o,t,!1)}}),[n,o.name]),null}));function lr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return En(t)}function cr(){const t=(0,e.useContext)(Mn);if(!t)throw Error("useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`");return t}var ur=o(590);function dr(t,n={}){var r;const{styleConfig:o,...a}=n,{theme:s,colorMode:c}={...Ze(),theme:cr()},u=t?et(s,`components.${t}`):void 0,d=o||u,f=p({theme:s,colorMode:c},null!=(r=null==d?void 0:d.defaultProps)?r:{},nt(function(e,t){const n={};return Object.keys(e).forEach((r=>{t.includes(r)||(n[r]=e[r])})),n}(a,["children"]))),h=(0,e.useRef)({});if(d){const e=function(e){return t=>{var n;const{variant:r,size:o,theme:a}=t,s=function(e){const t=e.__breakpoints;return function(e,n,r,o){var a,s;if(!t)return;const c={},u=function(e,t){return Array.isArray(e)?e:i(e)?t(e):null!=e?[e]:void 0}(r,t.toArrayValue);if(!u)return c;const d=u.length,f=1===d,h=!!e.parts;for(let r=0;r<d;r++){const i=t.details[r],d=t.details[qe(u,r)],m=ye(i.minW,null==d?void 0:d._minW),g=l(null==(a=e[n])?void 0:a[u[r]],o);g&&(h?null==(s=e.parts)||s.forEach((e=>{p(c,{[e]:f?g[e]:{[m]:g[e]}})})):h?c[m]=g:f?p(c,g):c[m]=g)}return c}}(a);return p({},l(null!=(n=e.baseStyle)?n:{},t),s(e,"sizes",o,t),s(e,"variants",r,t))}}(d),t=e(f);ur(h.current,t)||(h.current=t)}return h.current}function fr(e,t={}){return dr(e,t)}function pr(e,t={}){return dr(e,t)}var hr=function(){var e=lr.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}}({"0%":{transform:"rotate(0deg)"},"100%":{transform:"rotate(360deg)"}}),mr=r(((e,t)=>{const n=fr("Spinner",e),{label:r="Loading...",thickness:o="2px",speed:i="0.45s",emptyColor:s="transparent",className:l,...c}=Ge(e),u=a("chakra-spinner",l),d={display:"inline-block",borderColor:"currentColor",borderStyle:"solid",borderRadius:"99999px",borderWidth:o,borderBottomColor:s,borderLeftColor:s,animation:`${hr} ${i} linear infinite`,...n};return(0,qn.jsx)(Un.div,{ref:t,__css:d,className:u,...c,children:r&&(0,qn.jsx)(Un.span,{srOnly:!0,children:r})})}));function gr(t){const{label:n,placement:r,spacing:o="0.5rem",children:i=(0,qn.jsx)(mr,{color:"currentColor",width:"1em",height:"1em"}),className:s,__css:l,...c}=t,u=a("chakra-button__spinner",s),d="start"===r?"marginEnd":"marginStart",f=(0,e.useMemo)((()=>({display:"flex",alignItems:"center",position:n?"relative":"absolute",[d]:n?o:0,fontSize:"1em",lineHeight:"normal",...l})),[l,n,d,o]);return(0,qn.jsx)(Un.div,{className:u,...c,__css:f,children:i})}function vr(...e){return t=>{e.forEach((e=>{!function(e,t){if(null!=e)if("function"!=typeof e)try{e.current=t}catch(n){throw new Error(`Cannot assign value '${t}' to ref '${e}'`)}else e(t)}(e,t)}))}}function yr(...t){return(0,e.useMemo)((()=>vr(...t)),t)}mr.displayName="Spinner",gr.displayName="ButtonSpinner";var br=r(((t,n)=>{const r=ar(),o=fr("Button",{...r,...t}),{isDisabled:i=(null==r?void 0:r.isDisabled),isLoading:s,isActive:l,children:c,leftIcon:d,rightIcon:f,loadingText:p,iconSpacing:h="0.5rem",type:m,spinner:g,spinnerPlacement:v="start",className:y,as:b,...x}=Ge(t),w=(0,e.useMemo)((()=>{const e={...null==o?void 0:o._focus,zIndex:1};return{display:"inline-flex",appearance:"none",alignItems:"center",justifyContent:"center",userSelect:"none",position:"relative",whiteSpace:"nowrap",verticalAlign:"middle",outline:"none",...o,...!!r&&{_focus:e}}}),[o,r]),{ref:k,type:S}=function(t){const[n,r]=(0,e.useState)(!t),o=(0,e.useCallback)((e=>{e&&r("BUTTON"===e.tagName)}),[]);return{ref:o,type:n?"button":void 0}}(b),E={rightIcon:f,leftIcon:d,iconSpacing:h,children:c};return(0,qn.jsxs)(Un.button,{ref:yr(n,k),as:b,type:null!=m?m:S,"data-active":u(l),"data-loading":u(s),__css:w,className:a("chakra-button",y),...x,disabled:i||s,children:[s&&"start"===v&&(0,qn.jsx)(gr,{className:"chakra-button__spinner--start",label:p,placement:"start",spacing:h,children:g}),s?p||(0,qn.jsx)(Un.span,{opacity:0,children:(0,qn.jsx)(xr,{...E})}):(0,qn.jsx)(xr,{...E}),s&&"end"===v&&(0,qn.jsx)(gr,{className:"chakra-button__spinner--end",label:p,placement:"end",spacing:h,children:g})]})}));function xr(e){const{leftIcon:t,rightIcon:n,children:r,iconSpacing:o}=e;return(0,qn.jsxs)(qn.Fragment,{children:[t&&(0,qn.jsx)(ir,{marginEnd:o,children:t}),r,n&&(0,qn.jsx)(ir,{marginStart:o,children:n})]})}br.displayName="Button";const wr=function(t){var n=t.text,r=t.color,o=void 0===r?"hsl(229, 31%, 21%)":r,a=t.isOpen,i=t.to,s=void 0===i?"#":i,l=t.isLast;return e.createElement(br,{onClick:function(){window.location.href=s},variant:"ghost",py:a?10:5,px:6,width:a?"100%":"auto",color:a?"white":o,borderTop:a?"0.5px solid grey":"none",borderBottom:a&&l?"0.5px solid grey":"none",fontSize:a?"18px":"12px",borderRadius:"none",fontWeight:a?400:500,textTransform:"uppercase",letterSpacing:"1.5px",_hover:{color:"hsl(0, 94%, 66%)"},_active:{bg:"none"}},n)},kr=function(t){var n=t.text,r=t.isCapitalized,o=void 0!==r&&r,a=t.withShadow,i=void 0===a||a,s=t.onClick;return e.createElement(br,{onClick:s,variant:"solid",bgColor:"hsl(0, 94%, 66%)",py:5,px:6,boxShadow:i?"0px 8px 11px -4px rgba(210, 213, 237, 1)":"none",color:"white",borderRadius:"5px",fontWeight:500,border:"2px",borderColor:"hsl(0, 94%, 66%)",fontSize:"12px",letterSpacing:"1.5px",textTransform:o?"uppercase":"none",_hover:{bg:"#ffffff",color:"hsl(0, 94%, 66%)",border:"2px",borderColor:"hsl(0, 94%, 66%)"}},n)},Sr=function(t){var n=t.text,r=t.isCapitalized,o=void 0!==r&&r,a=t.onClick;return e.createElement(br,{onClick:a,variant:"solid",bg:"none",py:5,px:6,color:"white",borderRadius:"5px",fontWeight:500,border:"2px",borderColor:"white",fontSize:"18px",letterSpacing:"1.5px",textTransform:o?"uppercase":"none",width:"100%",marginTop:10,_hover:{bg:"none"}},n)},Er=function(){return e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24"},e.createElement("path",{fill:"#FFF",fillRule:"evenodd",d:"M22.675 0H1.325C.593 0 0 .593 0 1.325v21.351C0 23.407.593 24 1.325 24H12.82v-9.294H9.692v-3.622h3.128V8.413c0-3.1 1.893-4.788 4.659-4.788 1.325 0 2.463.099 2.795.143v3.24l-1.918.001c-1.504 0-1.795.715-1.795 1.763v2.313h3.587l-.467 3.622h-3.12V24h6.116c.73 0 1.323-.593 1.323-1.325V1.325C24 .593 23.407 0 22.675 0z"}))},Cr=function(){return e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"20"},e.createElement("path",{fill:"#FFF",fillRule:"evenodd",d:"M24 2.557a9.83 9.83 0 0 1-2.828.775A4.932 4.932 0 0 0 23.337.608a9.864 9.864 0 0 1-3.127 1.195A4.916 4.916 0 0 0 16.616.248c-3.179 0-5.515 2.966-4.797 6.045A13.978 13.978 0 0 1 1.671 1.149a4.93 4.93 0 0 0 1.523 6.574 4.903 4.903 0 0 1-2.229-.616c-.054 2.281 1.581 4.415 3.949 4.89a4.935 4.935 0 0 1-2.224.084 4.928 4.928 0 0 0 4.6 3.419A9.9 9.9 0 0 1 0 17.54a13.94 13.94 0 0 0 7.548 2.212c9.142 0 14.307-7.721 13.995-14.646A10.025 10.025 0 0 0 24 2.557z"}))};var _r=function(){return _r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},_r.apply(this,arguments)};function Pr(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}function Ar(e,t,n){if(n||2===arguments.length)for(var r,o=0,a=t.length;o<a;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}Object.create,Object.create;var Tr=o(774),zr=o.n(Tr),Mr="-ms-",Fr="-moz-",Or="-webkit-",Rr="comm",jr="rule",Ir="decl",Nr="@import",Dr="@keyframes",Lr="@layer",Br=Math.abs,$r=String.fromCharCode,Vr=Object.assign;function Wr(e){return e.trim()}function Hr(e,t){return(e=t.exec(e))?e[0]:e}function Ur(e,t,n){return e.replace(t,n)}function qr(e,t){return e.indexOf(t)}function Gr(e,t){return 0|e.charCodeAt(t)}function Yr(e,t,n){return e.slice(t,n)}function Xr(e){return e.length}function Qr(e){return e.length}function Kr(e,t){return t.push(e),e}function Zr(e,t){return e.filter((function(e){return!Hr(e,t)}))}var Jr=1,eo=1,to=0,no=0,ro=0,oo="";function ao(e,t,n,r,o,a,i,s){return{value:e,root:t,parent:n,type:r,props:o,children:a,line:Jr,column:eo,length:i,return:"",siblings:s}}function io(e,t){return Vr(ao("",null,null,"",null,null,0,e.siblings),e,{length:-e.length},t)}function so(e){for(;e.root;)e=io(e.root,{children:[e]});Kr(e,e.siblings)}function lo(){return ro=no<to?Gr(oo,no++):0,eo++,10===ro&&(eo=1,Jr++),ro}function co(){return Gr(oo,no)}function uo(){return no}function fo(e,t){return Yr(oo,e,t)}function po(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function ho(e){return Wr(fo(no-1,vo(91===e?e+2:40===e?e+1:e)))}function mo(e){for(;(ro=co())&&ro<33;)lo();return po(e)>2||po(ro)>3?"":" "}function go(e,t){for(;--t&&lo()&&!(ro<48||ro>102||ro>57&&ro<65||ro>70&&ro<97););return fo(e,uo()+(t<6&&32==co()&&32==lo()))}function vo(e){for(;lo();)switch(ro){case e:return no;case 34:case 39:34!==e&&39!==e&&vo(ro);break;case 40:41===e&&vo(e);break;case 92:lo()}return no}function yo(e,t){for(;lo()&&e+ro!==57&&(e+ro!==84||47!==co()););return"/*"+fo(t,no-1)+"*"+$r(47===e?e:lo())}function bo(e){for(;!po(co());)lo();return fo(e,no)}function xo(e,t){for(var n="",r=0;r<e.length;r++)n+=t(e[r],r,e,t)||"";return n}function wo(e,t,n,r){switch(e.type){case Lr:if(e.children.length)break;case Nr:case Ir:return e.return=e.return||e.value;case Rr:return"";case Dr:return e.return=e.value+"{"+xo(e.children,r)+"}";case jr:if(!Xr(e.value=e.props.join(",")))return""}return Xr(n=xo(e.children,r))?e.return=e.value+"{"+n+"}":""}function ko(e,t,n){switch(function(e,t){return 45^Gr(e,0)?(((t<<2^Gr(e,0))<<2^Gr(e,1))<<2^Gr(e,2))<<2^Gr(e,3):0}(e,t)){case 5103:return Or+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return Or+e+e;case 4789:return Fr+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return Or+e+Fr+e+Mr+e+e;case 5936:switch(Gr(e,t+11)){case 114:return Or+e+Mr+Ur(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return Or+e+Mr+Ur(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return Or+e+Mr+Ur(e,/[svh]\w+-[tblr]{2}/,"lr")+e}case 6828:case 4268:case 2903:return Or+e+Mr+e+e;case 6165:return Or+e+Mr+"flex-"+e+e;case 5187:return Or+e+Ur(e,/(\w+).+(:[^]+)/,Or+"box-$1$2"+Mr+"flex-$1$2")+e;case 5443:return Or+e+Mr+"flex-item-"+Ur(e,/flex-|-self/g,"")+(Hr(e,/flex-|baseline/)?"":Mr+"grid-row-"+Ur(e,/flex-|-self/g,""))+e;case 4675:return Or+e+Mr+"flex-line-pack"+Ur(e,/align-content|flex-|-self/g,"")+e;case 5548:return Or+e+Mr+Ur(e,"shrink","negative")+e;case 5292:return Or+e+Mr+Ur(e,"basis","preferred-size")+e;case 6060:return Or+"box-"+Ur(e,"-grow","")+Or+e+Mr+Ur(e,"grow","positive")+e;case 4554:return Or+Ur(e,/([^-])(transform)/g,"$1"+Or+"$2")+e;case 6187:return Ur(Ur(Ur(e,/(zoom-|grab)/,Or+"$1"),/(image-set)/,Or+"$1"),e,"")+e;case 5495:case 3959:return Ur(e,/(image-set\([^]*)/,Or+"$1$`$1");case 4968:return Ur(Ur(e,/(.+:)(flex-)?(.*)/,Or+"box-pack:$3"+Mr+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+Or+e+e;case 4200:if(!Hr(e,/flex-|baseline/))return Mr+"grid-column-align"+Yr(e,t)+e;break;case 2592:case 3360:return Mr+Ur(e,"template-","")+e;case 4384:case 3616:return n&&n.some((function(e,n){return t=n,Hr(e.props,/grid-\w+-end/)}))?~qr(e+(n=n[t].value),"span")?e:Mr+Ur(e,"-start","")+e+Mr+"grid-row-span:"+(~qr(n,"span")?Hr(n,/\d+/):+Hr(n,/\d+/)-+Hr(e,/\d+/))+";":Mr+Ur(e,"-start","")+e;case 4896:case 4128:return n&&n.some((function(e){return Hr(e.props,/grid-\w+-start/)}))?e:Mr+Ur(Ur(e,"-end","-span"),"span ","")+e;case 4095:case 3583:case 4068:case 2532:return Ur(e,/(.+)-inline(.+)/,Or+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(Xr(e)-1-t>6)switch(Gr(e,t+1)){case 109:if(45!==Gr(e,t+4))break;case 102:return Ur(e,/(.+:)(.+)-([^]+)/,"$1"+Or+"$2-$3$1"+Fr+(108==Gr(e,t+3)?"$3":"$2-$3"))+e;case 115:return~qr(e,"stretch")?ko(Ur(e,"stretch","fill-available"),t,n)+e:e}break;case 5152:case 5920:return Ur(e,/(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/,(function(t,n,r,o,a,i,s){return Mr+n+":"+r+s+(o?Mr+n+"-span:"+(a?i:+i-+r)+s:"")+e}));case 4949:if(121===Gr(e,t+6))return Ur(e,":",":"+Or)+e;break;case 6444:switch(Gr(e,45===Gr(e,14)?18:11)){case 120:return Ur(e,/(.+:)([^;\s!]+)(;|(\s+)?!.+)?/,"$1"+Or+(45===Gr(e,14)?"inline-":"")+"box$3$1"+Or+"$2$3$1"+Mr+"$2box$3")+e;case 100:return Ur(e,":",":"+Mr)+e}break;case 5719:case 2647:case 2135:case 3927:case 2391:return Ur(e,"scroll-","scroll-snap-")+e}return e}function So(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case Ir:return void(e.return=ko(e.value,e.length,n));case Dr:return xo([io(e,{value:Ur(e.value,"@","@"+Or)})],r);case jr:if(e.length)return function(e,t){return e.map(t).join("")}(n=e.props,(function(t){switch(Hr(t,r=/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":so(io(e,{props:[Ur(t,/:(read-\w+)/,":"+Fr+"$1")]})),so(io(e,{props:[t]})),Vr(e,{props:Zr(n,r)});break;case"::placeholder":so(io(e,{props:[Ur(t,/:(plac\w+)/,":"+Or+"input-$1")]})),so(io(e,{props:[Ur(t,/:(plac\w+)/,":"+Fr+"$1")]})),so(io(e,{props:[Ur(t,/:(plac\w+)/,Mr+"input-$1")]})),so(io(e,{props:[t]})),Vr(e,{props:Zr(n,r)})}return""}))}}function Eo(e){return function(e){return oo="",e}(Co("",null,null,null,[""],e=function(e){return Jr=eo=1,to=Xr(oo=e),no=0,[]}(e),0,[0],e))}function Co(e,t,n,r,o,a,i,s,l){for(var c=0,u=0,d=i,f=0,p=0,h=0,m=1,g=1,v=1,y=0,b="",x=o,w=a,k=r,S=b;g;)switch(h=y,y=lo()){case 40:if(108!=h&&58==Gr(S,d-1)){-1!=qr(S+=Ur(ho(y),"&","&\f"),"&\f")&&(v=-1);break}case 34:case 39:case 91:S+=ho(y);break;case 9:case 10:case 13:case 32:S+=mo(h);break;case 92:S+=go(uo()-1,7);continue;case 47:switch(co()){case 42:case 47:Kr(Po(yo(lo(),uo()),t,n,l),l);break;default:S+="/"}break;case 123*m:s[c++]=Xr(S)*v;case 125*m:case 59:case 0:switch(y){case 0:case 125:g=0;case 59+u:-1==v&&(S=Ur(S,/\f/g,"")),p>0&&Xr(S)-d&&Kr(p>32?Ao(S+";",r,n,d-1,l):Ao(Ur(S," ","")+";",r,n,d-2,l),l);break;case 59:S+=";";default:if(Kr(k=_o(S,t,n,c,u,o,s,b,x=[],w=[],d,a),a),123===y)if(0===u)Co(S,t,k,k,x,a,d,s,w);else switch(99===f&&110===Gr(S,3)?100:f){case 100:case 108:case 109:case 115:Co(e,k,k,r&&Kr(_o(e,k,k,0,0,o,s,b,o,x=[],d,w),w),o,w,d,s,r?x:w);break;default:Co(S,k,k,k,[""],w,0,s,w)}}c=u=p=0,m=v=1,b=S="",d=i;break;case 58:d=1+Xr(S),p=h;default:if(m<1)if(123==y)--m;else if(125==y&&0==m++&&125==(ro=no>0?Gr(oo,--no):0,eo--,10===ro&&(eo=1,Jr--),ro))continue;switch(S+=$r(y),y*m){case 38:v=u>0?1:(S+="\f",-1);break;case 44:s[c++]=(Xr(S)-1)*v,v=1;break;case 64:45===co()&&(S+=ho(lo())),f=co(),u=d=Xr(b=S+=bo(uo())),y++;break;case 45:45===h&&2==Xr(S)&&(m=0)}}return a}function _o(e,t,n,r,o,a,i,s,l,c,u,d){for(var f=o-1,p=0===o?a:[""],h=Qr(p),m=0,g=0,v=0;m<r;++m)for(var y=0,b=Yr(e,f+1,f=Br(g=i[m])),x=e;y<h;++y)(x=Wr(g>0?p[y]+" "+b:Ur(b,/&\f/g,p[y])))&&(l[v++]=x);return ao(e,t,n,0===o?jr:s,l,c,u,d)}function Po(e,t,n,r){return ao(e,t,n,Rr,$r(ro),Yr(e,2,-2),0,r)}function Ao(e,t,n,r,o){return ao(e,t,n,Ir,Yr(e,0,r),Yr(e,r+1,-1),r,o)}const To={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var zo="undefined"!=typeof process&&void 0!==process.env&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",Mo="active",Fo="data-styled-version",Oo="6.1.5",Ro="/*!sc*/\n",jo="undefined"!=typeof window&&"HTMLElement"in window,Io=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY),No=(new Set,Object.freeze([])),Do=Object.freeze({});var Lo=new Set(["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","tr","track","u","ul","use","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"]),Bo=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,$o=/(^-|-$)/g;function Vo(e){return e.replace(Bo,"-").replace($o,"")}var Wo=/(a)(d)/gi,Ho=52,Uo=function(e){return String.fromCharCode(e+(e>25?39:97))};function qo(e){var t,n="";for(t=Math.abs(e);t>Ho;t=t/Ho|0)n=Uo(t%Ho)+n;return(Uo(t%Ho)+n).replace(Wo,"$1-$2")}var Go,Yo=5381,Xo=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},Qo=function(e){return Xo(Yo,e)};function Ko(e){return"string"==typeof e&&!0}var Zo="function"==typeof Symbol&&Symbol.for,Jo=Zo?Symbol.for("react.memo"):60115,ea=Zo?Symbol.for("react.forward_ref"):60112,ta={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},na={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},ra={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},oa=((Go={})[ea]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},Go[Jo]=ra,Go);function aa(e){return("type"in(t=e)&&t.type.$$typeof)===Jo?ra:"$$typeof"in e?oa[e.$$typeof]:ta;var t}var ia=Object.defineProperty,sa=Object.getOwnPropertyNames,la=Object.getOwnPropertySymbols,ca=Object.getOwnPropertyDescriptor,ua=Object.getPrototypeOf,da=Object.prototype;function fa(e,t,n){if("string"!=typeof t){if(da){var r=ua(t);r&&r!==da&&fa(e,r,n)}var o=sa(t);la&&(o=o.concat(la(t)));for(var a=aa(e),i=aa(t),s=0;s<o.length;++s){var l=o[s];if(!(l in na||n&&n[l]||i&&l in i||a&&l in a)){var c=ca(t,l);try{ia(e,l,c)}catch(e){}}}}return e}function pa(e){return"function"==typeof e}function ha(e){return"object"==typeof e&&"styledComponentId"in e}function ma(e,t){return e&&t?"".concat(e," ").concat(t):e||t||""}function ga(e,t){if(0===e.length)return"";for(var n=e[0],r=1;r<e.length;r++)n+=t?t+e[r]:e[r];return n}function va(e){return null!==e&&"object"==typeof e&&e.constructor.name===Object.name&&!("props"in e&&e.$$typeof)}function ya(e,t,n){if(void 0===n&&(n=!1),!n&&!va(e)&&!Array.isArray(e))return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)e[r]=ya(e[r],t[r]);else if(va(t))for(var r in t)e[r]=ya(e[r],t[r]);return e}function ba(e,t){Object.defineProperty(e,"toString",{value:t})}function xa(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new Error("An error occurred. See https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/utils/errors.md#".concat(e," for more information.").concat(t.length>0?" Args: ".concat(t.join(", ")):""))}var wa=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}return e.prototype.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},e.prototype.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)if((o<<=1)<0)throw xa(16,"".concat(e));this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var a=r;a<o;a++)this.groupSizes[a]=0}for(var i=this.indexOfGroup(e+1),s=(a=0,t.length);a<s;a++)this.tag.insertRule(i,t[a])&&(this.groupSizes[e]++,i++)},e.prototype.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},e.prototype.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,a=r;a<o;a++)t+="".concat(this.tag.getRule(a)).concat(Ro);return t},e}(),ka=new Map,Sa=new Map,Ea=1,Ca=function(e){if(ka.has(e))return ka.get(e);for(;Sa.has(Ea);)Ea++;var t=Ea++;return ka.set(e,t),Sa.set(t,e),t},_a=function(e,t){Ea=t+1,ka.set(e,t),Sa.set(t,e)},Pa="style[".concat(zo,"][").concat(Fo,'="').concat(Oo,'"]'),Aa=new RegExp("^".concat(zo,'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)')),Ta=function(e,t,n){for(var r,o=n.split(","),a=0,i=o.length;a<i;a++)(r=o[a])&&e.registerName(t,r)},za=function(e,t){for(var n,r=(null!==(n=t.textContent)&&void 0!==n?n:"").split(Ro),o=[],a=0,i=r.length;a<i;a++){var s=r[a].trim();if(s){var l=s.match(Aa);if(l){var c=0|parseInt(l[1],10),u=l[2];0!==c&&(_a(u,c),Ta(e,u,l[3]),e.getTag().insertRules(c,o)),o.length=0}else o.push(s)}}};function Ma(){return o.nc}var Fa=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){var t=Array.from(e.querySelectorAll("style[".concat(zo,"]")));return t[t.length-1]}(n),a=void 0!==o?o.nextSibling:null;r.setAttribute(zo,Mo),r.setAttribute(Fo,Oo);var i=Ma();return i&&r.setAttribute("nonce",i),n.insertBefore(r,a),r},Oa=function(){function e(e){this.element=Fa(e),this.element.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}throw xa(17)}(this.element),this.length=0}return e.prototype.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},e.prototype.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},e.prototype.getRule=function(e){var t=this.sheet.cssRules[e];return t&&t.cssText?t.cssText:""},e}(),Ra=function(){function e(e){this.element=Fa(e),this.nodes=this.element.childNodes,this.length=0}return e.prototype.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t);return this.element.insertBefore(n,this.nodes[e]||null),this.length++,!0}return!1},e.prototype.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},e.prototype.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),ja=function(){function e(e){this.rules=[],this.length=0}return e.prototype.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},e.prototype.deleteRule=function(e){this.rules.splice(e,1),this.length--},e.prototype.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),Ia=jo,Na={isServer:!jo,useCSSOMInjection:!Io},Da=function(){function e(e,t,n){void 0===e&&(e=Do),void 0===t&&(t={});var r=this;this.options=_r(_r({},Na),e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&jo&&Ia&&(Ia=!1,function(e){for(var t=document.querySelectorAll(Pa),n=0,r=t.length;n<r;n++){var o=t[n];o&&o.getAttribute(zo)!==Mo&&(za(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this)),ba(this,(function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=function(n){var o=function(e){return Sa.get(e)}(n);if(void 0===o)return"continue";var a=e.names.get(o),i=t.getGroup(n);if(void 0===a||0===i.length)return"continue";var s="".concat(zo,".g").concat(n,'[id="').concat(o,'"]'),l="";void 0!==a&&a.forEach((function(e){e.length>0&&(l+="".concat(e,","))})),r+="".concat(i).concat(s,'{content:"').concat(l,'"}').concat(Ro)},a=0;a<n;a++)o(a);return r}(r)}))}return e.registerId=function(e){return Ca(e)},e.prototype.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(_r(_r({},this.options),t),this.gs,n&&this.names||void 0)},e.prototype.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},e.prototype.getTag=function(){return this.tag||(this.tag=(e=function(e){var t=e.useCSSOMInjection,n=e.target;return e.isServer?new ja(n):t?new Oa(n):new Ra(n)}(this.options),new wa(e)));var e},e.prototype.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},e.prototype.registerName=function(e,t){if(Ca(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},e.prototype.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(Ca(e),n)},e.prototype.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},e.prototype.clearRules=function(e){this.getTag().clearGroup(Ca(e)),this.clearNames(e)},e.prototype.clearTag=function(){this.tag=void 0},e}(),La=/&/g,Ba=/^\s*\/\/.*$/gm;function $a(e,t){return e.map((function(e){return"rule"===e.type&&(e.value="".concat(t," ").concat(e.value),e.value=e.value.replaceAll(",",",".concat(t," ")),e.props=e.props.map((function(e){return"".concat(t," ").concat(e)}))),Array.isArray(e.children)&&"@keyframes"!==e.type&&(e.children=$a(e.children,t)),e}))}function Va(e){var t,n,r,o=void 0===e?Do:e,a=o.options,i=void 0===a?Do:a,s=o.plugins,l=void 0===s?No:s,c=function(e,r,o){return o.startsWith(n)&&o.endsWith(n)&&o.replaceAll(n,"").length>0?".".concat(t):e},u=l.slice();u.push((function(e){e.type===jr&&e.value.includes("&")&&(e.props[0]=e.props[0].replace(La,n).replace(r,c))})),i.prefix&&u.push(So),u.push(wo);var d=function(e,o,a,s){void 0===o&&(o=""),void 0===a&&(a=""),void 0===s&&(s="&"),t=s,n=o,r=new RegExp("\\".concat(n,"\\b"),"g");var l=e.replace(Ba,""),c=Eo(a||o?"".concat(a," ").concat(o," { ").concat(l," }"):l);i.namespace&&(c=$a(c,i.namespace));var d,f,p,h=[];return xo(c,(d=u.concat((p=function(e){return h.push(e)},function(e){e.root||(e=e.return)&&p(e)})),f=Qr(d),function(e,t,n,r){for(var o="",a=0;a<f;a++)o+=d[a](e,t,n,r)||"";return o})),h};return d.hash=l.length?l.reduce((function(e,t){return t.name||xa(15),Xo(e,t.name)}),Yo).toString():"",d}var Wa=new Da,Ha=Va(),Ua=e.createContext({shouldForwardProp:void 0,styleSheet:Wa,stylis:Ha}),qa=(Ua.Consumer,e.createContext(void 0));function Ga(){return(0,e.useContext)(Ua)}function Ya(t){var n=(0,e.useState)(t.stylisPlugins),r=n[0],o=n[1],a=Ga().styleSheet,i=(0,e.useMemo)((function(){var e=a;return t.sheet?e=t.sheet:t.target&&(e=e.reconstructWithOptions({target:t.target},!1)),t.disableCSSOMInjection&&(e=e.reconstructWithOptions({useCSSOMInjection:!1})),e}),[t.disableCSSOMInjection,t.sheet,t.target,a]),s=(0,e.useMemo)((function(){return Va({options:{namespace:t.namespace,prefix:t.enableVendorPrefixes},plugins:r})}),[t.enableVendorPrefixes,t.namespace,r]);(0,e.useEffect)((function(){zr()(r,t.stylisPlugins)||o(t.stylisPlugins)}),[t.stylisPlugins]);var l=(0,e.useMemo)((function(){return{shouldForwardProp:t.shouldForwardProp,styleSheet:i,stylis:s}}),[t.shouldForwardProp,i,s]);return e.createElement(Ua.Provider,{value:l},e.createElement(qa.Provider,{value:s},t.children))}var Xa=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=Ha);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.name=e,this.id="sc-keyframes-".concat(e),this.rules=t,ba(this,(function(){throw xa(12,String(n.name))}))}return e.prototype.getName=function(e){return void 0===e&&(e=Ha),this.name+e.hash},e}(),Qa=function(e){return e>="A"&&e<="Z"};function Ka(e){for(var t="",n=0;n<e.length;n++){var r=e[n];if(1===n&&"-"===r&&"-"===e[0])return e;Qa(r)?t+="-"+r.toLowerCase():t+=r}return t.startsWith("ms-")?"-"+t:t}var Za=function(e){return null==e||!1===e||""===e},Ja=function(e){var t,n,r=[];for(var o in e){var a=e[o];e.hasOwnProperty(o)&&!Za(a)&&(Array.isArray(a)&&a.isCss||pa(a)?r.push("".concat(Ka(o),":"),a,";"):va(a)?r.push.apply(r,Ar(Ar(["".concat(o," {")],Ja(a),!1),["}"],!1)):r.push("".concat(Ka(o),": ").concat((t=o,null==(n=a)||"boolean"==typeof n||""===n?"":"number"!=typeof n||0===n||t in To||t.startsWith("--")?String(n).trim():"".concat(n,"px")),";")))}return r};function ei(e,t,n,r){return Za(e)?[]:ha(e)?[".".concat(e.styledComponentId)]:pa(e)?!pa(o=e)||o.prototype&&o.prototype.isReactComponent||!t?[e]:ei(e(t),t,n,r):e instanceof Xa?n?(e.inject(n,r),[e.getName(r)]):[e]:va(e)?Ja(e):Array.isArray(e)?Array.prototype.concat.apply(No,e.map((function(e){return ei(e,t,n,r)}))):[e.toString()];var o}function ti(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(pa(n)&&!ha(n))return!1}return!0}var ni=Qo(Oo),ri=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&ti(e),this.componentId=t,this.baseHash=Xo(ni,t),this.baseStyle=n,Da.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.baseStyle?this.baseStyle.generateAndInjectStyles(e,t,n):"";if(this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(this.componentId,this.staticRulesId))r=ma(r,this.staticRulesId);else{var o=ga(ei(this.rules,e,t,n)),a=qo(Xo(this.baseHash,o)>>>0);if(!t.hasNameForId(this.componentId,a)){var i=n(o,".".concat(a),void 0,this.componentId);t.insertRules(this.componentId,a,i)}r=ma(r,a),this.staticRulesId=a}else{for(var s=Xo(this.baseHash,n.hash),l="",c=0;c<this.rules.length;c++){var u=this.rules[c];if("string"==typeof u)l+=u;else if(u){var d=ga(ei(u,e,t,n));s=Xo(s,d+c),l+=d}}if(l){var f=qo(s>>>0);t.hasNameForId(this.componentId,f)||t.insertRules(this.componentId,f,n(l,".".concat(f),void 0,this.componentId)),r=ma(r,f)}}return r},e}(),oi=e.createContext(void 0);oi.Consumer;var ai={};function ii(t,n,r){var o=ha(t),a=t,i=!Ko(t),s=n.attrs,l=void 0===s?No:s,c=n.componentId,u=void 0===c?function(e,t){var n="string"!=typeof e?"sc":Vo(e);ai[n]=(ai[n]||0)+1;var r="".concat(n,"-").concat(function(e){return qo(Qo(e)>>>0)}(Oo+n+ai[n]));return t?"".concat(t,"-").concat(r):r}(n.displayName,n.parentComponentId):c,d=n.displayName,f=void 0===d?function(e){return Ko(e)?"styled.".concat(e):"Styled(".concat(function(e){return e.displayName||e.name||"Component"}(e),")")}(t):d,p=n.displayName&&n.componentId?"".concat(Vo(n.displayName),"-").concat(n.componentId):n.componentId||u,h=o&&a.attrs?a.attrs.concat(l).filter(Boolean):l,m=n.shouldForwardProp;if(o&&a.shouldForwardProp){var g=a.shouldForwardProp;if(n.shouldForwardProp){var v=n.shouldForwardProp;m=function(e,t){return g(e,t)&&v(e,t)}}else m=g}var y=new ri(r,p,o?a.componentStyle:void 0);function b(t,n){return function(t,n,r){var o=t.attrs,a=t.componentStyle,i=t.defaultProps,s=t.foldedComponentIds,l=t.styledComponentId,c=t.target,u=e.useContext(oi),d=Ga(),f=t.shouldForwardProp||d.shouldForwardProp,p=function(e,t,n){return void 0===n&&(n=Do),e.theme!==n.theme&&e.theme||t||n.theme}(n,u,i)||Do,h=function(e,t,n){for(var r,o=_r(_r({},t),{className:void 0,theme:n}),a=0;a<e.length;a+=1){var i=pa(r=e[a])?r(o):r;for(var s in i)o[s]="className"===s?ma(o[s],i[s]):"style"===s?_r(_r({},o[s]),i[s]):i[s]}return t.className&&(o.className=ma(o.className,t.className)),o}(o,n,p),m=h.as||c,g={};for(var v in h)void 0===h[v]||"$"===v[0]||"as"===v||"theme"===v&&h.theme===p||("forwardedAs"===v?g.as=h.forwardedAs:f&&!f(v,m)||(g[v]=h[v]));var y=function(e,t){var n=Ga();return e.generateAndInjectStyles(t,n.styleSheet,n.stylis)}(a,h),b=ma(s,l);return y&&(b+=" "+y),h.className&&(b+=" "+h.className),g[Ko(m)&&!Lo.has(m)?"class":"className"]=b,g.ref=r,(0,e.createElement)(m,g)}(x,t,n)}b.displayName=f;var x=e.forwardRef(b);return x.attrs=h,x.componentStyle=y,x.displayName=f,x.shouldForwardProp=m,x.foldedComponentIds=o?ma(a.foldedComponentIds,a.styledComponentId):"",x.styledComponentId=p,x.target=o?a.target:t,Object.defineProperty(x,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(e){this._foldedDefaultProps=o?function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var r=0,o=t;r<o.length;r++)ya(e,o[r],!0);return e}({},a.defaultProps,e):e}}),ba(x,(function(){return".".concat(x.styledComponentId)})),i&&fa(x,t,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0}),x}function si(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n}new Set;var li=function(e){return Object.assign(e,{isCss:!0})};function ci(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];if(pa(e)||va(e))return li(ei(si(No,Ar([e],t,!0))));var r=e;return 0===t.length&&1===r.length&&"string"==typeof r[0]?ei(r):li(ei(si(r,t)))}function ui(e,t,n){if(void 0===n&&(n=Do),!t)throw xa(1,t);var r=function(r){for(var o=[],a=1;a<arguments.length;a++)o[a-1]=arguments[a];return e(t,n,ci.apply(void 0,Ar([r],o,!1)))};return r.attrs=function(r){return ui(e,t,_r(_r({},n),{attrs:Array.prototype.concat(n.attrs,r).filter(Boolean)}))},r.withConfig=function(r){return ui(e,t,_r(_r({},n),r))},r}var di,fi=function(e){return ui(ii,e)},pi=fi;Lo.forEach((function(e){pi[e]=fi(e)})),function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=ti(e),Da.registerId(this.componentId+1)}e.prototype.createStyles=function(e,t,n,r){var o=r(ga(ei(this.rules,t,n,r)),""),a=this.componentId+e;n.insertRules(a,a,o)},e.prototype.removeStyles=function(e,t){t.clearRules(this.componentId+e)},e.prototype.renderStyles=function(e,t,n,r){e>2&&Da.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)}}(),function(){function t(){var t=this;this._emitSheetCSS=function(){var e=t.instance.toString(),n=Ma(),r=ga([n&&'nonce="'.concat(n,'"'),"".concat(zo,'="true"'),"".concat(Fo,'="').concat(Oo,'"')].filter(Boolean)," ");return"<style ".concat(r,">").concat(e,"</style>")},this.getStyleTags=function(){if(t.sealed)throw xa(2);return t._emitSheetCSS()},this.getStyleElement=function(){var n;if(t.sealed)throw xa(2);var r=((n={})[zo]="",n[Fo]=Oo,n.dangerouslySetInnerHTML={__html:t.instance.toString()},n),o=Ma();return o&&(r.nonce=o),[e.createElement("style",_r({},r,{key:"sc-0-0"}))]},this.seal=function(){t.sealed=!0},this.instance=new Da({isServer:!0}),this.sealed=!1}t.prototype.collectStyles=function(t){if(this.sealed)throw xa(2);return e.createElement(Ya,{sheet:this.instance},t)},t.prototype.interleaveWithNodeStream=function(e){throw xa(3)}}(),"__sc-".concat(zo,"__");var hi,mi,gi=pi.div(di||(hi=["\n  display: flex;\n  margin-top: 10vh;\n  svg {\n    margin: 0 20px;\n    path {\n      &:hover {\n        fill: hsl(0, 94%, 66%);\n        transition: 0.3s;\n        cursor: pointer;\n      }\n    }\n  }\n"],mi||(mi=hi.slice(0)),di=Object.freeze(Object.defineProperties(hi,{raw:{value:Object.freeze(mi)}}))));const vi=function(t){var n=t.isOpen;return e.createElement(Yn,{display:{base:n?"block":"none",md:"block"},flexBasis:{base:"100%",md:"auto"},height:{base:"100vh",md:"auto"}},e.createElement(nr,{spacing:8,align:"center",justify:["center","space-between","flex-end","flex-end"],direction:["column","column","row","row"],pt:[4,4,0,0],gap:0},e.createElement(wr,{text:"features",to:"#features",isOpen:n}),e.createElement(wr,{text:"pricing",to:"#pricing",isOpen:n}),e.createElement(wr,{text:"contact",to:"#contact",isOpen:n,isLast:!0}),n?e.createElement(e.Fragment,null,e.createElement(Sr,{text:"Login",isCapitalized:!0}),e.createElement(gi,null,e.createElement(Er,null),e.createElement(Cr,null))):e.createElement(kr,{text:"login",isCapitalized:!0})))},yi=function(){return e.createElement("svg",{width:"148",height:"25",xmlns:"http://www.w3.org/2000/svg"},e.createElement("g",{fill:"none",fillRule:"evenodd"},e.createElement("path",{d:"M37 6.299h5.227c.746 0 1.434.155 2.062.466.629.311 1.123.735 1.484 1.27s.542 1.12.542 1.754c0 .672-.165 1.254-.495 1.746-.33.491-.762.868-1.297 1.129v.15c.697.248 1.25.643 1.661 1.185.41.541.616 1.191.616 1.95 0 .735-.196 1.385-.588 1.951a3.817 3.817 0 0 1-1.587 1.307c-.665.305-1.403.457-2.212.457H37V6.299zm5.04 5.45c.548 0 .986-.152 1.316-.457.33-.305.495-.688.495-1.148 0-.448-.159-.824-.476-1.13-.318-.304-.738-.457-1.26-.457H39.52v3.192h2.52zm.28 5.619c.61 0 1.086-.159 1.428-.476.342-.317.513-.731.513-1.241 0-.51-.174-.927-.522-1.251-.349-.324-.847-.485-1.494-.485H39.52v3.453h2.8zm12.927 2.595c-1.307 0-2.492-.308-3.556-.924a6.711 6.711 0 0 1-2.511-2.53c-.61-1.07-.915-2.246-.915-3.528 0-1.281.305-2.457.915-3.528a6.711 6.711 0 0 1 2.51-2.529C52.756 6.308 53.94 6 55.248 6c1.306 0 2.492.308 3.556.924a6.711 6.711 0 0 1 2.51 2.53c.61 1.07.915 2.246.915 3.527 0 1.282-.305 2.458-.915 3.528a6.711 6.711 0 0 1-2.51 2.53c-1.064.616-2.25.924-3.556.924zm0-2.39a4.52 4.52 0 0 0 2.258-.578 4.177 4.177 0 0 0 1.615-1.624c.392-.697.588-1.494.588-2.39 0-.896-.196-1.692-.588-2.389a4.177 4.177 0 0 0-1.615-1.624 4.52 4.52 0 0 0-2.258-.579 4.47 4.47 0 0 0-2.25.579 4.195 4.195 0 0 0-1.605 1.624c-.392.697-.588 1.493-.588 2.39 0 .895.196 1.692.588 2.389a4.195 4.195 0 0 0 1.605 1.624 4.47 4.47 0 0 0 2.25.578zm15.353 2.39c-1.307 0-2.492-.308-3.556-.924a6.711 6.711 0 0 1-2.51-2.53c-.61-1.07-.915-2.246-.915-3.528 0-1.281.305-2.457.914-3.528a6.711 6.711 0 0 1 2.511-2.529C68.108 6.308 69.294 6 70.6 6c1.307 0 2.492.308 3.556.924a6.711 6.711 0 0 1 2.51 2.53c.61 1.07.915 2.246.915 3.527 0 1.282-.305 2.458-.914 3.528a6.711 6.711 0 0 1-2.511 2.53c-1.064.616-2.25.924-3.556.924zm0-2.39a4.52 4.52 0 0 0 2.259-.578 4.177 4.177 0 0 0 1.614-1.624c.392-.697.588-1.494.588-2.39 0-.896-.196-1.692-.588-2.389a4.177 4.177 0 0 0-1.614-1.624 4.52 4.52 0 0 0-2.259-.579 4.47 4.47 0 0 0-2.25.579 4.195 4.195 0 0 0-1.605 1.624c-.392.697-.588 1.493-.588 2.39 0 .895.196 1.692.588 2.389a4.195 4.195 0 0 0 1.606 1.624 4.47 4.47 0 0 0 2.249.578zM79.83 6.3h2.52v5.73h.15l4.89-5.73h3.043v.149L85.6 11.973l5.338 7.542v.149h-3.08l-3.994-5.693-1.512 1.773v3.92h-2.52V6.299zM93.779 6h3.248l3.546 9.39h.15L104.268 6h3.267v13.365h-2.501v-6.589l.15-2.221h-.15l-3.398 8.81h-1.96l-3.416-8.81h-.149l.15 2.221v6.59h-2.483V6zm20.8 0h2.894l5.021 13.365h-2.781l-1.12-3.192h-5.115l-1.12 3.192h-2.781L114.579 6zm3.193 7.859l-1.176-3.36-.486-1.606h-.149l-.485 1.606-1.195 3.36h3.49zM124.553 6h4.872c.871 0 1.646.18 2.324.541.678.361 1.204.862 1.577 1.503.374.64.56 1.366.56 2.175 0 .858-.27 1.62-.812 2.286a4.617 4.617 0 0 1-2.044 1.447l-.018.13 3.584 5.134v.15h-2.894l-3.453-5.022h-1.176v5.021h-2.52V6zm4.853 6.03c.573 0 1.04-.175 1.4-.523.361-.349.542-.79.542-1.326 0-.51-.172-.945-.514-1.306-.342-.361-.806-.542-1.39-.542h-2.371v3.696h2.333zm7.23-6.03h2.52v5.73h.15l4.89-5.73h3.043v.15l-4.835 5.525 5.34 7.541v.15h-3.08l-3.996-5.694-1.512 1.773v3.92h-2.52V6z",fill:"#242A45",fillRule:"nonzero"}),e.createElement("g",null,e.createElement("circle",{fill:"#5267DF",cx:"12.5",cy:"12.5",r:"12.5"}),e.createElement("path",{d:"M9 9v10l3.54-3.44L16.078 19V9a2 2 0 0 0-2-2H11a2 2 0 0 0-2 2z",fill:"#FFF"}))))},bi=function(){return e.createElement("svg",{width:"148",height:"25",xmlns:"http://www.w3.org/2000/svg"},e.createElement("g",{fill:"white",fillRule:"evenodd"},e.createElement("path",{d:"M37 6.299h5.227c.746 0 1.434.155 2.062.466.629.311 1.123.735 1.484 1.27s.542 1.12.542 1.754c0 .672-.165 1.254-.495 1.746-.33.491-.762.868-1.297 1.129v.15c.697.248 1.25.643 1.661 1.185.41.541.616 1.191.616 1.95 0 .735-.196 1.385-.588 1.951a3.817 3.817 0 0 1-1.587 1.307c-.665.305-1.403.457-2.212.457H37V6.299zm5.04 5.45c.548 0 .986-.152 1.316-.457.33-.305.495-.688.495-1.148 0-.448-.159-.824-.476-1.13-.318-.304-.738-.457-1.26-.457H39.52v3.192h2.52zm.28 5.619c.61 0 1.086-.159 1.428-.476.342-.317.513-.731.513-1.241 0-.51-.174-.927-.522-1.251-.349-.324-.847-.485-1.494-.485H39.52v3.453h2.8zm12.927 2.595c-1.307 0-2.492-.308-3.556-.924a6.711 6.711 0 0 1-2.511-2.53c-.61-1.07-.915-2.246-.915-3.528 0-1.281.305-2.457.915-3.528a6.711 6.711 0 0 1 2.51-2.529C52.756 6.308 53.94 6 55.248 6c1.306 0 2.492.308 3.556.924a6.711 6.711 0 0 1 2.51 2.53c.61 1.07.915 2.246.915 3.527 0 1.282-.305 2.458-.915 3.528a6.711 6.711 0 0 1-2.51 2.53c-1.064.616-2.25.924-3.556.924zm0-2.39a4.52 4.52 0 0 0 2.258-.578 4.177 4.177 0 0 0 1.615-1.624c.392-.697.588-1.494.588-2.39 0-.896-.196-1.692-.588-2.389a4.177 4.177 0 0 0-1.615-1.624 4.52 4.52 0 0 0-2.258-.579 4.47 4.47 0 0 0-2.25.579 4.195 4.195 0 0 0-1.605 1.624c-.392.697-.588 1.493-.588 2.39 0 .895.196 1.692.588 2.389a4.195 4.195 0 0 0 1.605 1.624 4.47 4.47 0 0 0 2.25.578zm15.353 2.39c-1.307 0-2.492-.308-3.556-.924a6.711 6.711 0 0 1-2.51-2.53c-.61-1.07-.915-2.246-.915-3.528 0-1.281.305-2.457.914-3.528a6.711 6.711 0 0 1 2.511-2.529C68.108 6.308 69.294 6 70.6 6c1.307 0 2.492.308 3.556.924a6.711 6.711 0 0 1 2.51 2.53c.61 1.07.915 2.246.915 3.527 0 1.282-.305 2.458-.914 3.528a6.711 6.711 0 0 1-2.511 2.53c-1.064.616-2.25.924-3.556.924zm0-2.39a4.52 4.52 0 0 0 2.259-.578 4.177 4.177 0 0 0 1.614-1.624c.392-.697.588-1.494.588-2.39 0-.896-.196-1.692-.588-2.389a4.177 4.177 0 0 0-1.614-1.624 4.52 4.52 0 0 0-2.259-.579 4.47 4.47 0 0 0-2.25.579 4.195 4.195 0 0 0-1.605 1.624c-.392.697-.588 1.493-.588 2.39 0 .895.196 1.692.588 2.389a4.195 4.195 0 0 0 1.606 1.624 4.47 4.47 0 0 0 2.249.578zM79.83 6.3h2.52v5.73h.15l4.89-5.73h3.043v.149L85.6 11.973l5.338 7.542v.149h-3.08l-3.994-5.693-1.512 1.773v3.92h-2.52V6.299zM93.779 6h3.248l3.546 9.39h.15L104.268 6h3.267v13.365h-2.501v-6.589l.15-2.221h-.15l-3.398 8.81h-1.96l-3.416-8.81h-.149l.15 2.221v6.59h-2.483V6zm20.8 0h2.894l5.021 13.365h-2.781l-1.12-3.192h-5.115l-1.12 3.192h-2.781L114.579 6zm3.193 7.859l-1.176-3.36-.486-1.606h-.149l-.485 1.606-1.195 3.36h3.49zM124.553 6h4.872c.871 0 1.646.18 2.324.541.678.361 1.204.862 1.577 1.503.374.64.56 1.366.56 2.175 0 .858-.27 1.62-.812 2.286a4.617 4.617 0 0 1-2.044 1.447l-.018.13 3.584 5.134v.15h-2.894l-3.453-5.022h-1.176v5.021h-2.52V6zm4.853 6.03c.573 0 1.04-.175 1.4-.523.361-.349.542-.79.542-1.326 0-.51-.172-.945-.514-1.306-.342-.361-.806-.542-1.39-.542h-2.371v3.696h2.333zm7.23-6.03h2.52v5.73h.15l4.89-5.73h3.043v.15l-4.835 5.525 5.34 7.541v.15h-3.08l-3.996-5.694-1.512 1.773v3.92h-2.52V6z",fill:"white",fillRule:"nonzero"}),e.createElement("g",null,e.createElement("circle",{fill:"#fff",cx:"12.5",cy:"12.5",r:"12.5"}),e.createElement("path",{d:"M9 9v10l3.54-3.44L16.078 19V9a2 2 0 0 0-2-2H11a2 2 0 0 0-2 2z",fill:"#5267DF"}))))};function xi(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var wi=function(t){var n=t.children,r=t.isOpen;return e.createElement(Gn,{"data-testid":"nav-bar",as:"nav",align:"center",justify:"space-between",wrap:"wrap",w:"100%",mb:3,py:3,px:8,position:"fixed",zIndex:1140,bgColor:{base:r?"hsl(229, 31%, 21%, 90%)":"white"}},n)};const ki=function(){var t,n,r=(t=(0,e.useState)(!1),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,s=[],l=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=a.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){c=!0,o=e}finally{try{if(!l&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return s}}(t,n)||function(e,t){if(e){if("string"==typeof e)return xi(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?xi(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],a=r[1];return e.createElement(wi,{isOpen:o},o?e.createElement(bi,null):e.createElement(yi,null),e.createElement(Jn,{toggle:function(){return a(!o)},isOpen:o}),e.createElement(vi,{isOpen:o}))};var Si,Ei;function Ci(){return Ci=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ci.apply(this,arguments)}const _i=function(t){return e.createElement("svg",Ci({xmlns:"http://www.w3.org/2000/svg",xmlnsXlink:"http://www.w3.org/1999/xlink",viewBox:"0 0 650 450"},t),Si||(Si=e.createElement("defs",null,e.createElement("filter",{id:"illustration-hero_svg__a",width:"118%",height:"126.9%",x:"-9%",y:"-5.7%",filterUnits:"objectBoundingBox"},e.createElement("feOffset",{dy:2,in:"SourceAlpha",result:"shadowOffsetOuter1"}),e.createElement("feGaussianBlur",{in:"shadowOffsetOuter1",result:"shadowBlurOuter1",stdDeviation:2}),e.createElement("feColorMatrix",{in:"shadowBlurOuter1",result:"shadowMatrixOuter1",values:"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0"}),e.createElement("feMerge",null,e.createElement("feMergeNode",{in:"shadowMatrixOuter1"}),e.createElement("feMergeNode",{in:"SourceGraphic"}))),e.createElement("filter",{id:"illustration-hero_svg__b",width:"126%",height:"139%",x:"-13%",y:"-11.7%",filterUnits:"objectBoundingBox"},e.createElement("feOffset",{dy:30,in:"SourceAlpha",result:"shadowOffsetOuter1"}),e.createElement("feGaussianBlur",{in:"shadowOffsetOuter1",result:"shadowBlurOuter1",stdDeviation:20}),e.createElement("feColorMatrix",{in:"shadowBlurOuter1",values:"0 0 0 0 0.18243335 0 0 0 0 0.230632694 0 0 0 0 0.506057518 0 0 0 0.200120192 0"})),e.createElement("rect",{id:"illustration-hero_svg__c",width:578,height:385,rx:26}),e.createElement("rect",{id:"illustration-hero_svg__e",width:536,height:346,y:3,rx:8}),e.createElement("linearGradient",{id:"illustration-hero_svg__d",x1:"99.013%",x2:"2.544%",y1:"71.675%",y2:"29.014%"},e.createElement("stop",{offset:"0%",stopColor:"#151515"}),e.createElement("stop",{offset:"100%",stopColor:"#3D3D3D"})))),Ei||(Ei=e.createElement("g",{fill:"none",filter:"url(#illustration-hero_svg__a)",transform:"translate(39 9)"},e.createElement("g",{transform:"translate(.5 .5)"},e.createElement("use",{xlinkHref:"#illustration-hero_svg__c",fill:"#000",filter:"url(#illustration-hero_svg__b)"}),e.createElement("use",{xlinkHref:"#illustration-hero_svg__c",fill:"#777"}),e.createElement("rect",{width:574.23,height:381.865,x:2,y:2,fill:"url(#illustration-hero_svg__d)",rx:25}),e.createElement("g",{transform:"translate(21.03 16.303)"},e.createElement("rect",{width:471.463,height:353.756,x:33,fill:"#2A2A2A",opacity:.1,rx:5}),e.createElement("mask",{id:"illustration-hero_svg__f",fill:"#fff"},e.createElement("use",{xlinkHref:"#illustration-hero_svg__e"})),e.createElement("use",{xlinkHref:"#illustration-hero_svg__e",fill:"#E8EAF6"}),e.createElement("g",{mask:"url(#illustration-hero_svg__f)"},e.createElement("path",{fill:"#5267DF",d:"M-3.53 3.197h547v59h-547z"}),e.createElement("g",{fill:"#FFF",transform:"translate(22.47 17.197)"},e.createElement("circle",{cx:16,cy:16,r:16,opacity:.245}),e.createElement("circle",{cx:477,cy:16,r:16,opacity:.104}),e.createElement("g",{transform:"translate(47 6)"},e.createElement("rect",{width:120,height:6,opacity:.75,rx:3}),e.createElement("rect",{width:64,height:6,y:14,opacity:.25,rx:3})))),e.createElement("g",{mask:"url(#illustration-hero_svg__f)"},e.createElement("g",{transform:"translate(57 96)"},e.createElement("rect",{width:261,height:316,fill:"#FFF",rx:8}),e.createElement("rect",{width:128,height:316,x:295,fill:"#FFF",rx:8}),e.createElement("rect",{width:120,height:6,x:78.47,y:38.197,fill:"#242A45",opacity:.5,rx:3}))))),e.createElement("g",{transform:"translate(110 135)"},e.createElement("circle",{cx:16,cy:26,r:16,fill:"#F98E5D"}),e.createElement("rect",{width:88,height:6,x:284,fill:"#242A45",opacity:.25,rx:3}),e.createElement("rect",{width:88,height:6,x:284,y:20,fill:"#242A45",opacity:.25,rx:3}),e.createElement("rect",{width:88,height:6,x:284,y:40,fill:"#242A45",opacity:.25,rx:3}),e.createElement("rect",{width:88,height:6,x:284,y:60,fill:"#242A45",opacity:.25,rx:3}),e.createElement("rect",{width:88,height:6,x:284,y:94,fill:"#242A45",opacity:.25,rx:3}),e.createElement("rect",{width:88,height:6,x:284,y:114,fill:"#242A45",opacity:.25,rx:3}),e.createElement("rect",{width:88,height:6,x:284,y:134,fill:"#242A45",opacity:.25,rx:3}),e.createElement("rect",{width:64,height:6,x:47,y:30,fill:"#242A45",opacity:.25,rx:3})),e.createElement("g",{transform:"translate(110 201)"},e.createElement("circle",{cx:16,cy:16,r:16,fill:"#6AC6D6"}),e.createElement("rect",{width:120,height:6,x:47,y:6,fill:"#242A45",opacity:.5,rx:3}),e.createElement("rect",{width:64,height:6,x:47,y:20,fill:"#242A45",opacity:.25,rx:3})),e.createElement("g",{transform:"translate(110 257)"},e.createElement("circle",{cx:16,cy:16,r:16,fill:"#A47ED4"}),e.createElement("rect",{width:120,height:6,x:47,y:6,fill:"#242A45",opacity:.5,rx:3}),e.createElement("rect",{width:64,height:6,x:47,y:20,fill:"#242A45",opacity:.25,rx:3})),e.createElement("g",{transform:"translate(110 313)"},e.createElement("circle",{cx:16,cy:16,r:16,fill:"#EC7878"}),e.createElement("rect",{width:120,height:6,x:47,y:6,fill:"#242A45",opacity:.5,rx:3}),e.createElement("rect",{width:64,height:6,x:47,y:20,fill:"#242A45",opacity:.25,rx:3})))))};var Pi=Boolean(null==globalThis?void 0:globalThis.document)?e.useLayoutEffect:e.useEffect,Ai=(0,e.createContext)({getDocument:()=>document,getWindow:()=>window});function Ti(t){const{children:n,environment:r,disabled:o}=t,a=(0,e.useRef)(null),i=(0,e.useMemo)((()=>r||{getDocument:()=>{var e,t;return null!=(t=null==(e=a.current)?void 0:e.ownerDocument)?t:document},getWindow:()=>{var e,t;return null!=(t=null==(e=a.current)?void 0:e.ownerDocument.defaultView)?t:window}}),[r]),s=!o||!r;return(0,qn.jsxs)(Ai.Provider,{value:i,children:[n,s&&(0,qn.jsx)("span",{id:"__chakra_env",hidden:!0,ref:a})]})}function zi(t){const{breakpoint:n,hide:r,children:o,ssr:a}=t,[i]=function(t,n={}){const{ssr:r=!0,fallback:o}=n,{getWindow:a}=function({defer:t}={}){const[,n]=(0,e.useReducer)((e=>e+1),0);return Pi((()=>{t&&n()}),[t]),(0,e.useContext)(Ai)}(),i=Array.isArray(t)?t:[t];let s=Array.isArray(o)?o:[o];s=s.filter((e=>null!=e));const[l,c]=(0,e.useState)((()=>i.map(((e,t)=>({media:e,matches:r?!!s[t]:a().matchMedia(e).matches})))));return(0,e.useEffect)((()=>{const e=a();c(i.map((t=>({media:t,matches:e.matchMedia(t).matches}))));const t=i.map((t=>e.matchMedia(t))),n=e=>{c((t=>t.slice().map((t=>t.media===e.media?{...t,matches:e.matches}:t))))};return t.forEach((e=>{"function"==typeof e.addListener?e.addListener(n):e.addEventListener("change",n)})),()=>{t.forEach((e=>{"function"==typeof e.removeListener?e.removeListener(n):e.removeEventListener("change",n)}))}}),[a]),l.map((e=>e.matches))}(n,{ssr:a});return(r?!i:i)?o:null}Ai.displayName="EnvironmentContext",Ti.displayName="EnvironmentProvider";var Mi=(e,t)=>{var n,r;return null!=(r=null==(n=null==e?void 0:e.breakpoints)?void 0:n[t])?r:t};function Fi(e){const{children:t,ssr:n}=e,r=function(e){const{breakpoint:t="",below:n,above:r}=e,o=cr(),a=Mi(o,n),i=Mi(o,r);let s=t;return a?s=`(max-width: ${a})`:i&&(s=`(min-width: ${i})`),s}(e);return(0,qn.jsx)(zi,{breakpoint:r,hide:!0,ssr:n,children:t})}Fi.displayName="Hide";var Oi=r((function(e,t){const n=fr("Text",e),{className:r,align:o,decoration:i,casing:s,...l}=Ge(e),c=function(e){const t=Object.assign({},e);for(let e in t)void 0===t[e]&&delete t[e];return t}({textAlign:e.align,textDecoration:e.decoration,textTransform:e.casing});return(0,qn.jsx)(Un.p,{ref:t,className:a("chakra-text",e.className),...c,...l,__css:n})}));Oi.displayName="Text";const Ri=function(t){var n=t.text,r=t.onClick;return e.createElement(br,{onClick:r,variant:"solid",bgColor:"hsl(231, 69%, 60%)",py:5,px:6,boxShadow:"0px 8px 11px -4px rgba(210, 213, 237, 1)",color:"white",borderRadius:"5px",border:"2px",fontWeight:500,borderColor:"hsl(231, 69%, 60%)",fontSize:"14px",_hover:{bg:"#ffffff",color:"hsl(231, 69%, 60%)",border:"2px",borderColor:"hsl(231, 69%, 60%)"}},n)},ji=function(t){var n=t.text,r=t.onClick;return e.createElement(br,{onClick:r,variant:"solid",bgColor:"#f7f7face",py:5,px:6,boxShadow:"0px 8px 11px -4px rgba(210, 213, 237, 1)",color:"#666666",borderRadius:"5px",border:"2px",fontWeight:500,borderColor:"#f7f7face",fontSize:"14px",_hover:{bg:"#ffffff",color:"#666666",border:"2px",borderColor:"#666666"}},n)};var Ii=["borders","breakpoints","colors","components","config","direction","fonts","fontSizes","fontWeights","letterSpacings","lineHeights","radii","shadows","sizes","space","styles","transition","zIndices"],Ni={letterSpacings:{tighter:"-0.05em",tight:"-0.025em",normal:"0",wide:"0.025em",wider:"0.05em",widest:"0.1em"},lineHeights:{normal:"normal",none:1,shorter:1.25,short:1.375,base:1.5,tall:1.625,taller:"2",3:".75rem",4:"1rem",5:"1.25rem",6:"1.5rem",7:"1.75rem",8:"2rem",9:"2.25rem",10:"2.5rem"},fontWeights:{hairline:100,thin:200,light:300,normal:400,medium:500,semibold:600,bold:700,extrabold:800,black:900},fonts:{heading:'-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',body:'-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',mono:'SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace'},fontSizes:{"3xs":"0.45rem","2xs":"0.625rem",xs:"0.75rem",sm:"0.875rem",md:"1rem",lg:"1.125rem",xl:"1.25rem","2xl":"1.5rem","3xl":"1.875rem","4xl":"2.25rem","5xl":"3rem","6xl":"3.75rem","7xl":"4.5rem","8xl":"6rem","9xl":"8rem"}},Di={px:"1px",.5:"0.125rem",1:"0.25rem",1.5:"0.375rem",2:"0.5rem",2.5:"0.625rem",3:"0.75rem",3.5:"0.875rem",4:"1rem",5:"1.25rem",6:"1.5rem",7:"1.75rem",8:"2rem",9:"2.25rem",10:"2.5rem",12:"3rem",14:"3.5rem",16:"4rem",20:"5rem",24:"6rem",28:"7rem",32:"8rem",36:"9rem",40:"10rem",44:"11rem",48:"12rem",52:"13rem",56:"14rem",60:"15rem",64:"16rem",72:"18rem",80:"20rem",96:"24rem"},Li={...Di,max:"max-content",min:"min-content",full:"100%","3xs":"14rem","2xs":"16rem",xs:"20rem",sm:"24rem",md:"28rem",lg:"32rem",xl:"36rem","2xl":"42rem","3xl":"48rem","4xl":"56rem","5xl":"64rem","6xl":"72rem","7xl":"80rem","8xl":"90rem",prose:"60ch",container:{sm:"640px",md:"768px",lg:"1024px",xl:"1280px"}},Bi={breakpoints:{base:"0em",sm:"30em",md:"48em",lg:"62em",xl:"80em","2xl":"96em"},zIndices:{hide:-1,auto:"auto",base:0,docked:10,dropdown:1e3,sticky:1100,banner:1200,overlay:1300,modal:1400,popover:1500,skipLink:1600,toast:1700,tooltip:1800},radii:{none:"0",sm:"0.125rem",base:"0.25rem",md:"0.375rem",lg:"0.5rem",xl:"0.75rem","2xl":"1rem","3xl":"1.5rem",full:"9999px"},blur:{none:0,sm:"4px",base:"8px",md:"12px",lg:"16px",xl:"24px","2xl":"40px","3xl":"64px"},colors:{transparent:"transparent",current:"currentColor",black:"#000000",white:"#FFFFFF",whiteAlpha:{50:"rgba(255, 255, 255, 0.04)",100:"rgba(255, 255, 255, 0.06)",200:"rgba(255, 255, 255, 0.08)",300:"rgba(255, 255, 255, 0.16)",400:"rgba(255, 255, 255, 0.24)",500:"rgba(255, 255, 255, 0.36)",600:"rgba(255, 255, 255, 0.48)",700:"rgba(255, 255, 255, 0.64)",800:"rgba(255, 255, 255, 0.80)",900:"rgba(255, 255, 255, 0.92)"},blackAlpha:{50:"rgba(0, 0, 0, 0.04)",100:"rgba(0, 0, 0, 0.06)",200:"rgba(0, 0, 0, 0.08)",300:"rgba(0, 0, 0, 0.16)",400:"rgba(0, 0, 0, 0.24)",500:"rgba(0, 0, 0, 0.36)",600:"rgba(0, 0, 0, 0.48)",700:"rgba(0, 0, 0, 0.64)",800:"rgba(0, 0, 0, 0.80)",900:"rgba(0, 0, 0, 0.92)"},gray:{50:"#F7FAFC",100:"#EDF2F7",200:"#E2E8F0",300:"#CBD5E0",400:"#A0AEC0",500:"#718096",600:"#4A5568",700:"#2D3748",800:"#1A202C",900:"#171923"},red:{50:"#FFF5F5",100:"#FED7D7",200:"#FEB2B2",300:"#FC8181",400:"#F56565",500:"#E53E3E",600:"#C53030",700:"#9B2C2C",800:"#822727",900:"#63171B"},orange:{50:"#FFFAF0",100:"#FEEBC8",200:"#FBD38D",300:"#F6AD55",400:"#ED8936",500:"#DD6B20",600:"#C05621",700:"#9C4221",800:"#7B341E",900:"#652B19"},yellow:{50:"#FFFFF0",100:"#FEFCBF",200:"#FAF089",300:"#F6E05E",400:"#ECC94B",500:"#D69E2E",600:"#B7791F",700:"#975A16",800:"#744210",900:"#5F370E"},green:{50:"#F0FFF4",100:"#C6F6D5",200:"#9AE6B4",300:"#68D391",400:"#48BB78",500:"#38A169",600:"#2F855A",700:"#276749",800:"#22543D",900:"#1C4532"},teal:{50:"#E6FFFA",100:"#B2F5EA",200:"#81E6D9",300:"#4FD1C5",400:"#38B2AC",500:"#319795",600:"#2C7A7B",700:"#285E61",800:"#234E52",900:"#1D4044"},blue:{50:"#ebf8ff",100:"#bee3f8",200:"#90cdf4",300:"#63b3ed",400:"#4299e1",500:"#3182ce",600:"#2b6cb0",700:"#2c5282",800:"#2a4365",900:"#1A365D"},cyan:{50:"#EDFDFD",100:"#C4F1F9",200:"#9DECF9",300:"#76E4F7",400:"#0BC5EA",500:"#00B5D8",600:"#00A3C4",700:"#0987A0",800:"#086F83",900:"#065666"},purple:{50:"#FAF5FF",100:"#E9D8FD",200:"#D6BCFA",300:"#B794F4",400:"#9F7AEA",500:"#805AD5",600:"#6B46C1",700:"#553C9A",800:"#44337A",900:"#322659"},pink:{50:"#FFF5F7",100:"#FED7E2",200:"#FBB6CE",300:"#F687B3",400:"#ED64A6",500:"#D53F8C",600:"#B83280",700:"#97266D",800:"#702459",900:"#521B41"},linkedin:{50:"#E8F4F9",100:"#CFEDFB",200:"#9BDAF3",300:"#68C7EC",400:"#34B3E4",500:"#00A0DC",600:"#008CC9",700:"#0077B5",800:"#005E93",900:"#004471"},facebook:{50:"#E8F4F9",100:"#D9DEE9",200:"#B7C2DA",300:"#6482C0",400:"#4267B2",500:"#385898",600:"#314E89",700:"#29487D",800:"#223B67",900:"#1E355B"},messenger:{50:"#D0E6FF",100:"#B9DAFF",200:"#A2CDFF",300:"#7AB8FF",400:"#2E90FF",500:"#0078FF",600:"#0063D1",700:"#0052AC",800:"#003C7E",900:"#002C5C"},whatsapp:{50:"#dffeec",100:"#b9f5d0",200:"#90edb3",300:"#65e495",400:"#3cdd78",500:"#22c35e",600:"#179848",700:"#0c6c33",800:"#01421c",900:"#001803"},twitter:{50:"#E5F4FD",100:"#C8E9FB",200:"#A8DCFA",300:"#83CDF7",400:"#57BBF5",500:"#1DA1F2",600:"#1A94DA",700:"#1681BF",800:"#136B9E",900:"#0D4D71"},telegram:{50:"#E3F2F9",100:"#C5E4F3",200:"#A2D4EC",300:"#7AC1E4",400:"#47A9DA",500:"#0088CC",600:"#007AB8",700:"#006BA1",800:"#005885",900:"#003F5E"}},...Ni,sizes:Li,shadows:{xs:"0 0 0 1px rgba(0, 0, 0, 0.05)",sm:"0 1px 2px 0 rgba(0, 0, 0, 0.05)",base:"0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",md:"0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",lg:"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",xl:"0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)","2xl":"0 25px 50px -12px rgba(0, 0, 0, 0.25)",outline:"0 0 0 3px rgba(66, 153, 225, 0.6)",inner:"inset 0 2px 4px 0 rgba(0,0,0,0.06)",none:"none","dark-lg":"rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px"},space:Di,borders:{none:0,"1px":"1px solid","2px":"2px solid","4px":"4px solid","8px":"8px solid"},transition:{property:{common:"background-color, border-color, color, fill, stroke, opacity, box-shadow, transform",colors:"background-color, border-color, color, fill, stroke",dimensions:"width, height",position:"left, right, top, bottom",background:"background-color, background-image, background-position"},easing:{"ease-in":"cubic-bezier(0.4, 0, 1, 1)","ease-out":"cubic-bezier(0, 0, 0.2, 1)","ease-in-out":"cubic-bezier(0.4, 0, 0.2, 1)"},duration:{"ultra-fast":"50ms",faster:"100ms",fast:"150ms",normal:"200ms",slow:"300ms",slower:"400ms","ultra-slow":"500ms"}}},{defineMultiStyleConfig:$i,definePartsStyle:Vi}=Ue(["stepper","step","title","description","indicator","separator","icon","number"]),Wi=de("stepper-indicator-size"),Hi=de("stepper-icon-size"),Ui=de("stepper-title-font-size"),qi=de("stepper-description-font-size"),Gi=de("stepper-accent-color"),Yi=$i({baseStyle:Vi((({colorScheme:e})=>({stepper:{display:"flex",justifyContent:"space-between",gap:"4","&[data-orientation=vertical]":{flexDirection:"column",alignItems:"flex-start"},"&[data-orientation=horizontal]":{flexDirection:"row",alignItems:"center"},[Gi.variable]:`colors.${e}.500`,_dark:{[Gi.variable]:`colors.${e}.200`}},title:{fontSize:Ui.reference,fontWeight:"medium"},description:{fontSize:qi.reference,color:"chakra-subtle-text"},number:{fontSize:Ui.reference},step:{flexShrink:0,position:"relative",display:"flex",gap:"2","&[data-orientation=horizontal]":{alignItems:"center"},flex:"1","&:last-of-type:not([data-stretch])":{flex:"initial"}},icon:{flexShrink:0,width:Hi.reference,height:Hi.reference},indicator:{flexShrink:0,borderRadius:"full",width:Wi.reference,height:Wi.reference,display:"flex",justifyContent:"center",alignItems:"center","&[data-status=active]":{borderWidth:"2px",borderColor:Gi.reference},"&[data-status=complete]":{bg:Gi.reference,color:"chakra-inverse-text"},"&[data-status=incomplete]":{borderWidth:"2px"}},separator:{bg:"chakra-border-color",flex:"1","&[data-status=complete]":{bg:Gi.reference},"&[data-orientation=horizontal]":{width:"100%",height:"2px",marginStart:"2"},"&[data-orientation=vertical]":{width:"2px",position:"absolute",height:"100%",maxHeight:`calc(100% - ${Wi.reference} - 8px)`,top:`calc(${Wi.reference} + 4px)`,insetStart:`calc(${Wi.reference} / 2 - 1px)`}}}))),sizes:{xs:Vi({stepper:{[Wi.variable]:"sizes.4",[Hi.variable]:"sizes.3",[Ui.variable]:"fontSizes.xs",[qi.variable]:"fontSizes.xs"}}),sm:Vi({stepper:{[Wi.variable]:"sizes.6",[Hi.variable]:"sizes.4",[Ui.variable]:"fontSizes.sm",[qi.variable]:"fontSizes.xs"}}),md:Vi({stepper:{[Wi.variable]:"sizes.8",[Hi.variable]:"sizes.5",[Ui.variable]:"fontSizes.md",[qi.variable]:"fontSizes.sm"}}),lg:Vi({stepper:{[Wi.variable]:"sizes.10",[Hi.variable]:"sizes.6",[Ui.variable]:"fontSizes.lg",[qi.variable]:"fontSizes.md"}})},defaultProps:{size:"md",colorScheme:"blue"}});function Xi(e,t={}){let n=!1;function r(t){const n=`chakra-${(["container","root"].includes(null!=t?t:"")?[e]:[e,t]).filter(Boolean).join("__")}`;return{className:n,selector:`.${n}`,toString:()=>t}}return{parts:function(...o){!function(){if(n)throw new Error("[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?");n=!0}();for(const e of o)t[e]=r(e);return Xi(e,t)},toPart:r,extend:function(...n){for(const e of n)e in t||(t[e]=r(e));return Xi(e,t)},selectors:function(){return Object.fromEntries(Object.entries(t).map((([e,t])=>[e,t.selector])))},classnames:function(){return Object.fromEntries(Object.entries(t).map((([e,t])=>[e,t.className])))},get keys(){return Object.keys(t)},__type:{}}}var Qi=Xi("accordion").parts("root","container","button","panel").extend("icon"),Ki=Xi("alert").parts("title","description","container").extend("icon","spinner"),Zi=Xi("avatar").parts("label","badge","container").extend("excessLabel","group"),Ji=Xi("breadcrumb").parts("link","item","container").extend("separator"),es=(Xi("button").parts(),Xi("checkbox").parts("control","icon","container").extend("label")),ts=(Xi("progress").parts("track","filledTrack").extend("label"),Xi("drawer").parts("overlay","dialogContainer","dialog").extend("header","closeButton","body","footer")),ns=Xi("editable").parts("preview","input","textarea"),rs=Xi("form").parts("container","requiredIndicator","helperText"),os=Xi("formError").parts("text","icon"),as=Xi("input").parts("addon","field","element","group"),is=Xi("list").parts("container","item","icon"),ss=Xi("menu").parts("button","list","item").extend("groupTitle","icon","command","divider"),ls=Xi("modal").parts("overlay","dialogContainer","dialog").extend("header","closeButton","body","footer"),cs=Xi("numberinput").parts("root","field","stepperGroup","stepper"),us=(Xi("pininput").parts("field"),Xi("popover").parts("content","header","body","footer").extend("popper","arrow","closeButton")),ds=Xi("progress").parts("label","filledTrack","track"),fs=Xi("radio").parts("container","control","label"),ps=Xi("select").parts("field","icon"),hs=Xi("slider").parts("container","track","thumb","filledTrack","mark"),ms=Xi("stat").parts("container","label","helpText","number","icon"),gs=Xi("switch").parts("container","track","thumb","label"),vs=Xi("table").parts("table","thead","tbody","tr","th","td","tfoot","caption"),ys=Xi("tabs").parts("root","tab","tablist","tabpanel","tabpanels","indicator"),bs=Xi("tag").parts("container","label","closeButton"),xs=Xi("card").parts("container","header","body","footer");function ws(e){const t=function(e,t="-"){return e.replace(/\s+/g,t)}(e.toString());return t.includes("\\.")?e:function(e){return!Number.isInteger(parseFloat(e.toString()))}(e)?t.replace(".","\\."):e}function ks(e,t){return`var(${ws(e)}${t?`, ${t}`:""})`}function Ss(e,t){const n=function(e,t=""){return`--${function(e,t=""){return[t,ws(e)].filter(Boolean).join("-")}(e,t)}`}(e,null==t?void 0:t.prefix);return{variable:n,reference:ks(n,(r=null==t?void 0:t.fallback,"string"==typeof r?r:null==r?void 0:r.reference))};var r}function Es(e){return i(e)&&e.reference?e.reference:String(e)}Xi("stepper").parts("stepper","step","title","description","indicator","separator","icon","number");var Cs=(e,...t)=>t.map(Es).join(` ${e} `).replace(/calc/g,""),_s=(...e)=>`calc(${Cs("+",...e)})`,Ps=(...e)=>`calc(${Cs("-",...e)})`,As=(...e)=>`calc(${Cs("*",...e)})`,Ts=(...e)=>`calc(${Cs("/",...e)})`,zs=e=>{const t=Es(e);return null==t||Number.isNaN(parseFloat(t))?As(t,-1):String(t).startsWith("-")?String(t).slice(1):`-${t}`},Ms=Object.assign((e=>({add:(...t)=>Ms(_s(e,...t)),subtract:(...t)=>Ms(Ps(e,...t)),multiply:(...t)=>Ms(As(e,...t)),divide:(...t)=>Ms(Ts(e,...t)),negate:()=>Ms(zs(e)),toString:()=>e.toString()})),{add:_s,subtract:Ps,multiply:As,divide:Ts,negate:zs}),{defineMultiStyleConfig:Fs,definePartsStyle:Os}=Ue(gs.keys),Rs=Ss("switch-track-width"),js=Ss("switch-track-height"),Is=Ss("switch-track-diff"),Ns=Ms.subtract(Rs,js),Ds=Ss("switch-thumb-x"),Ls=Ss("switch-bg"),Bs=e=>{const{colorScheme:t}=e;return{borderRadius:"full",p:"0.5",width:[Rs.reference],height:[js.reference],transitionProperty:"common",transitionDuration:"fast",[Ls.variable]:"colors.gray.300",_dark:{[Ls.variable]:"colors.whiteAlpha.400"},_focusVisible:{boxShadow:"outline"},_disabled:{opacity:.4,cursor:"not-allowed"},_checked:{[Ls.variable]:`colors.${t}.500`,_dark:{[Ls.variable]:`colors.${t}.200`}},bg:Ls.reference}},$s={bg:"white",transitionProperty:"transform",transitionDuration:"normal",borderRadius:"inherit",width:[js.reference],height:[js.reference],_checked:{transform:`translateX(${Ds.reference})`}},Vs=Fs({baseStyle:Os((e=>({container:{[Is.variable]:Ns,[Ds.variable]:Is.reference,_rtl:{[Ds.variable]:Ms(Is).negate().toString()}},track:Bs(e),thumb:$s}))),sizes:{sm:Os({container:{[Rs.variable]:"1.375rem",[js.variable]:"sizes.3"}}),md:Os({container:{[Rs.variable]:"1.875rem",[js.variable]:"sizes.4"}}),lg:Os({container:{[Rs.variable]:"2.875rem",[js.variable]:"sizes.6"}})},defaultProps:{size:"md",colorScheme:"blue"}});function Ws(e,t){return n=>"dark"===n.colorMode?t:e}function Hs(e){const{orientation:t,vertical:n,horizontal:r}=e;return t?"vertical"===t?n:r:{}}var{defineMultiStyleConfig:Us,definePartsStyle:qs}=Ue(vs.keys),Gs=qs({table:{fontVariantNumeric:"lining-nums tabular-nums",borderCollapse:"collapse",width:"full"},th:{fontFamily:"heading",fontWeight:"bold",textTransform:"uppercase",letterSpacing:"wider",textAlign:"start"},td:{textAlign:"start"},caption:{mt:4,fontFamily:"heading",textAlign:"center",fontWeight:"medium"}}),Ys={"&[data-is-numeric=true]":{textAlign:"end"}},Xs=Us({baseStyle:Gs,variants:{simple:qs((e=>{const{colorScheme:t}=e;return{th:{color:Ws("gray.600","gray.400")(e),borderBottom:"1px",borderColor:Ws(`${t}.100`,`${t}.700`)(e),...Ys},td:{borderBottom:"1px",borderColor:Ws(`${t}.100`,`${t}.700`)(e),...Ys},caption:{color:Ws("gray.600","gray.100")(e)},tfoot:{tr:{"&:last-of-type":{th:{borderBottomWidth:0}}}}}})),striped:qs((e=>{const{colorScheme:t}=e;return{th:{color:Ws("gray.600","gray.400")(e),borderBottom:"1px",borderColor:Ws(`${t}.100`,`${t}.700`)(e),...Ys},td:{borderBottom:"1px",borderColor:Ws(`${t}.100`,`${t}.700`)(e),...Ys},caption:{color:Ws("gray.600","gray.100")(e)},tbody:{tr:{"&:nth-of-type(odd)":{"th, td":{borderBottomWidth:"1px",borderColor:Ws(`${t}.100`,`${t}.700`)(e)},td:{background:Ws(`${t}.100`,`${t}.700`)(e)}}}},tfoot:{tr:{"&:last-of-type":{th:{borderBottomWidth:0}}}}}})),unstyled:{}},sizes:{sm:qs({th:{px:"4",py:"1",lineHeight:"4",fontSize:"xs"},td:{px:"4",py:"2",fontSize:"sm",lineHeight:"4"},caption:{px:"4",py:"2",fontSize:"xs"}}),md:qs({th:{px:"6",py:"3",lineHeight:"4",fontSize:"xs"},td:{px:"6",py:"4",lineHeight:"5"},caption:{px:"6",py:"2",fontSize:"sm"}}),lg:qs({th:{px:"8",py:"4",lineHeight:"5",fontSize:"sm"},td:{px:"8",py:"5",lineHeight:"6"},caption:{px:"6",py:"2",fontSize:"md"}})},defaultProps:{variant:"simple",size:"md",colorScheme:"gray"}});function Qs(e,t,n){return Math.min(Math.max(e,n),t)}class Ks extends Error{constructor(e){super(`Failed to parse color: "${e}"`)}}var Zs=Ks;function Js(e){if("string"!=typeof e)throw new Zs(e);if("transparent"===e.trim().toLowerCase())return[0,0,0,0];let t=e.trim();t=sl.test(e)?function(e){const t=e.toLowerCase().trim(),n=tl[function(e){let t=5381,n=e.length;for(;n;)t=33*t^e.charCodeAt(--n);return(t>>>0)%2341}(t)];if(!n)throw new Zs(e);return`#${n}`}(e):e;const n=rl.exec(t);if(n){const e=Array.from(n).slice(1);return[...e.slice(0,3).map((e=>parseInt(nl(e,2),16))),parseInt(nl(e[3]||"f",2),16)/255]}const r=ol.exec(t);if(r){const e=Array.from(r).slice(1);return[...e.slice(0,3).map((e=>parseInt(e,16))),parseInt(e[3]||"ff",16)/255]}const o=al.exec(t);if(o){const e=Array.from(o).slice(1);return[...e.slice(0,3).map((e=>parseInt(e,10))),parseFloat(e[3]||"1")]}const a=il.exec(t);if(a){const[t,n,r,o]=Array.from(a).slice(1).map(parseFloat);if(Qs(0,100,n)!==n)throw new Zs(e);if(Qs(0,100,r)!==r)throw new Zs(e);return[...cl(t,n,r),Number.isNaN(o)?1:o]}throw new Zs(e)}const el=e=>parseInt(e.replace(/_/g,""),36),tl="1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm".split(" ").reduce(((e,t)=>{const n=el(t.substring(0,3)),r=el(t.substring(3)).toString(16);let o="";for(let e=0;e<6-r.length;e++)o+="0";return e[n]=`${o}${r}`,e}),{}),nl=(e,t)=>Array.from(Array(t)).map((()=>e)).join(""),rl=new RegExp(`^#${nl("([a-f0-9])",3)}([a-f0-9])?$`,"i"),ol=new RegExp(`^#${nl("([a-f0-9]{2})",3)}([a-f0-9]{2})?$`,"i"),al=new RegExp(`^rgba?\\(\\s*(\\d+)\\s*${nl(",\\s*(\\d+)\\s*",2)}(?:,\\s*([\\d.]+))?\\s*\\)$`,"i"),il=/^hsla?\(\s*([\d.]+)\s*,\s*([\d.]+)%\s*,\s*([\d.]+)%(?:\s*,\s*([\d.]+))?\s*\)$/i,sl=/^[a-z]+$/i,ll=e=>Math.round(255*e),cl=(e,t,n)=>{let r=n/100;if(0===t)return[r,r,r].map(ll);const o=(e%360+360)%360/60,a=(1-Math.abs(2*r-1))*(t/100),i=a*(1-Math.abs(o%2-1));let s=0,l=0,c=0;o>=0&&o<1?(s=a,l=i):o>=1&&o<2?(s=i,l=a):o>=2&&o<3?(l=a,c=i):o>=3&&o<4?(l=i,c=a):o>=4&&o<5?(s=i,c=a):o>=5&&o<6&&(s=a,c=i);const u=r-a/2;return[s+u,l+u,c+u].map(ll)};function ul(e,t){const[n,r,o,a]=Js(e);return function(e,t,n,r){return`rgba(${Qs(0,255,e).toFixed()}, ${Qs(0,255,t).toFixed()}, ${Qs(0,255,n).toFixed()}, ${parseFloat(Qs(0,1,r).toFixed(3))})`}(n,r,o,a-t)}var dl=e=>0===Object.keys(e).length,fl=(e,t,n)=>{const r=function(e,t,n,r,o){for(t=t.split?t.split("."):t,r=0;r<t.length;r++)e=e?e[t[r]]:o;return e===o?n:e}(e,`colors.${t}`,t);try{return function(e){const[t,n,r,o]=Js(e);let a=e=>{const t=Qs(0,255,e).toString(16);return 1===t.length?`0${t}`:t};a(t),a(n),a(r),o<1&&a(Math.round(255*o))}(r),r}catch{return null!=n?n:"#000000"}},pl=(e,t)=>n=>ul(fl(n,e),1-t);function hl(e="1rem",t="rgba(255, 255, 255, 0.15)"){return{backgroundImage:`linear-gradient(\n    45deg,\n    ${t} 25%,\n    transparent 25%,\n    transparent 50%,\n    ${t} 50%,\n    ${t} 75%,\n    transparent 75%,\n    transparent\n  )`,backgroundSize:`${e} ${e}`}}var ml=()=>`#${Math.floor(16777215*Math.random()).toString(16).padEnd(6,"0")}`;var gl=de("tabs-color"),vl=de("tabs-bg"),yl=de("tabs-border-color"),{defineMultiStyleConfig:bl,definePartsStyle:xl}=Ue(ys.keys),wl=e=>{const{orientation:t}=e;return{display:"vertical"===t?"flex":"block"}},kl=e=>{const{isFitted:t}=e;return{flex:t?1:void 0,transitionProperty:"common",transitionDuration:"normal",_focusVisible:{zIndex:1,boxShadow:"outline"},_disabled:{cursor:"not-allowed",opacity:.4}}},Sl=e=>{const{align:t="start",orientation:n}=e;return{justifyContent:{end:"flex-end",center:"center",start:"flex-start"}[t],flexDirection:"vertical"===n?"column":"row"}},El={p:4},Cl=xl((e=>({root:wl(e),tab:kl(e),tablist:Sl(e),tabpanel:El}))),_l={sm:xl({tab:{py:1,px:4,fontSize:"sm"}}),md:xl({tab:{fontSize:"md",py:2,px:4}}),lg:xl({tab:{fontSize:"lg",py:3,px:4}})},Pl=xl((e=>{const{colorScheme:t,orientation:n}=e,r="vertical"===n,o=r?"borderStart":"borderBottom";return{tablist:{[o]:"2px solid",borderColor:"inherit"},tab:{[o]:"2px solid",borderColor:"transparent",[r?"marginStart":"marginBottom"]:"-2px",_selected:{[gl.variable]:`colors.${t}.600`,_dark:{[gl.variable]:`colors.${t}.300`},borderColor:"currentColor"},_active:{[vl.variable]:"colors.gray.200",_dark:{[vl.variable]:"colors.whiteAlpha.300"}},_disabled:{_active:{bg:"none"}},color:gl.reference,bg:vl.reference}}})),Al=xl((e=>{const{colorScheme:t}=e;return{tab:{borderTopRadius:"md",border:"1px solid",borderColor:"transparent",mb:"-1px",[yl.variable]:"transparent",_selected:{[gl.variable]:`colors.${t}.600`,[yl.variable]:"colors.white",_dark:{[gl.variable]:`colors.${t}.300`,[yl.variable]:"colors.gray.800"},borderColor:"inherit",borderBottomColor:yl.reference},color:gl.reference},tablist:{mb:"-1px",borderBottom:"1px solid",borderColor:"inherit"}}})),Tl=xl((e=>{const{colorScheme:t}=e;return{tab:{border:"1px solid",borderColor:"inherit",[vl.variable]:"colors.gray.50",_dark:{[vl.variable]:"colors.whiteAlpha.50"},mb:"-1px",_notLast:{marginEnd:"-1px"},_selected:{[vl.variable]:"colors.white",[gl.variable]:`colors.${t}.600`,_dark:{[vl.variable]:"colors.gray.800",[gl.variable]:`colors.${t}.300`},borderColor:"inherit",borderTopColor:"currentColor",borderBottomColor:"transparent"},color:gl.reference,bg:vl.reference},tablist:{mb:"-1px",borderBottom:"1px solid",borderColor:"inherit"}}})),zl=xl((e=>{const{colorScheme:t,theme:n}=e;return{tab:{borderRadius:"full",fontWeight:"semibold",color:"gray.600",_selected:{color:fl(n,`${t}.700`),bg:fl(n,`${t}.100`)}}}})),Ml=bl({baseStyle:Cl,sizes:_l,variants:{line:Pl,enclosed:Al,"enclosed-colored":Tl,"soft-rounded":zl,"solid-rounded":xl((e=>{const{colorScheme:t}=e;return{tab:{borderRadius:"full",fontWeight:"semibold",[gl.variable]:"colors.gray.600",_dark:{[gl.variable]:"inherit"},_selected:{[gl.variable]:"colors.white",[vl.variable]:`colors.${t}.600`,_dark:{[gl.variable]:"colors.gray.800",[vl.variable]:`colors.${t}.300`}},color:gl.reference,bg:vl.reference}}})),unstyled:xl({})},defaultProps:{size:"md",variant:"line",colorScheme:"blue"}}),Fl=function(e,t){const n={};for(const t of["bg","color","shadow"])if(Array.isArray(t)){const[r,o]=t;n[r]=de(`${e}-${r}`,o)}else n[t]=de(`${e}-${t}`);return n}("badge"),Ol={baseStyle:{px:1,textTransform:"uppercase",fontSize:"xs",borderRadius:"sm",fontWeight:"bold",bg:Fl.bg.reference,color:Fl.color.reference,boxShadow:Fl.shadow.reference},variants:{solid:e=>{const{colorScheme:t,theme:n}=e,r=pl(`${t}.500`,.6)(n);return{[Fl.bg.variable]:`colors.${t}.500`,[Fl.color.variable]:"colors.white",_dark:{[Fl.bg.variable]:r,[Fl.color.variable]:"colors.whiteAlpha.800"}}},subtle:e=>{const{colorScheme:t,theme:n}=e,r=pl(`${t}.200`,.16)(n);return{[Fl.bg.variable]:`colors.${t}.100`,[Fl.color.variable]:`colors.${t}.800`,_dark:{[Fl.bg.variable]:r,[Fl.color.variable]:`colors.${t}.200`}}},outline:e=>{const{colorScheme:t,theme:n}=e,r=pl(`${t}.200`,.8)(n);return{[Fl.color.variable]:`colors.${t}.500`,_dark:{[Fl.color.variable]:r},[Fl.shadow.variable]:`inset 0 0 0px 1px ${Fl.color.reference}`}}},defaultProps:{variant:"subtle",colorScheme:"gray"}},{defineMultiStyleConfig:Rl,definePartsStyle:jl}=Ue(bs.keys),Il=de("tag-bg"),Nl=de("tag-color"),Dl=de("tag-shadow"),Ll=de("tag-min-height"),Bl=de("tag-min-width"),$l=de("tag-font-size"),Vl=de("tag-padding-inline"),Wl=jl({container:{fontWeight:"medium",lineHeight:1.2,outline:0,[Nl.variable]:Fl.color.reference,[Il.variable]:Fl.bg.reference,[Dl.variable]:Fl.shadow.reference,color:Nl.reference,bg:Il.reference,boxShadow:Dl.reference,borderRadius:"md",minH:Ll.reference,minW:Bl.reference,fontSize:$l.reference,px:Vl.reference,_focusVisible:{[Dl.variable]:"shadows.outline"}},label:{lineHeight:1.2,overflow:"visible"},closeButton:{fontSize:"lg",w:"5",h:"5",transitionProperty:"common",transitionDuration:"normal",borderRadius:"full",marginStart:"1.5",marginEnd:"-1",opacity:.5,_disabled:{opacity:.4},_focusVisible:{boxShadow:"outline",bg:"rgba(0, 0, 0, 0.14)"},_hover:{opacity:.8},_active:{opacity:1}}}),Hl={sm:jl({container:{[Ll.variable]:"sizes.5",[Bl.variable]:"sizes.5",[$l.variable]:"fontSizes.xs",[Vl.variable]:"space.2"},closeButton:{marginEnd:"-2px",marginStart:"0.35rem"}}),md:jl({container:{[Ll.variable]:"sizes.6",[Bl.variable]:"sizes.6",[$l.variable]:"fontSizes.sm",[Vl.variable]:"space.2"}}),lg:jl({container:{[Ll.variable]:"sizes.8",[Bl.variable]:"sizes.8",[$l.variable]:"fontSizes.md",[Vl.variable]:"space.3"}})},Ul={subtle:jl((e=>{var t;return{container:null==(t=Ol.variants)?void 0:t.subtle(e)}})),solid:jl((e=>{var t;return{container:null==(t=Ol.variants)?void 0:t.solid(e)}})),outline:jl((e=>{var t;return{container:null==(t=Ol.variants)?void 0:t.outline(e)}}))},ql=Rl({variants:Ul,baseStyle:Wl,sizes:Hl,defaultProps:{size:"md",variant:"subtle",colorScheme:"gray"}}),{definePartsStyle:Gl,defineMultiStyleConfig:Yl}=Ue(as.keys),Xl=de("input-height"),Ql=de("input-font-size"),Kl=de("input-padding"),Zl=de("input-border-radius"),Jl=Gl({addon:{height:Xl.reference,fontSize:Ql.reference,px:Kl.reference,borderRadius:Zl.reference},field:{width:"100%",height:Xl.reference,fontSize:Ql.reference,px:Kl.reference,borderRadius:Zl.reference,minWidth:0,outline:0,position:"relative",appearance:"none",transitionProperty:"common",transitionDuration:"normal",_disabled:{opacity:.4,cursor:"not-allowed"}}}),ec={lg:{[Ql.variable]:"fontSizes.lg",[Kl.variable]:"space.4",[Zl.variable]:"radii.md",[Xl.variable]:"sizes.12"},md:{[Ql.variable]:"fontSizes.md",[Kl.variable]:"space.4",[Zl.variable]:"radii.md",[Xl.variable]:"sizes.10"},sm:{[Ql.variable]:"fontSizes.sm",[Kl.variable]:"space.3",[Zl.variable]:"radii.sm",[Xl.variable]:"sizes.8"},xs:{[Ql.variable]:"fontSizes.xs",[Kl.variable]:"space.2",[Zl.variable]:"radii.sm",[Xl.variable]:"sizes.6"}},tc={lg:Gl({field:ec.lg,group:ec.lg}),md:Gl({field:ec.md,group:ec.md}),sm:Gl({field:ec.sm,group:ec.sm}),xs:Gl({field:ec.xs,group:ec.xs})};function nc(e){const{focusBorderColor:t,errorBorderColor:n}=e;return{focusBorderColor:t||Ws("blue.500","blue.300")(e),errorBorderColor:n||Ws("red.500","red.300")(e)}}var rc,oc,ac,ic,sc,lc,cc,uc,dc,fc,pc,hc=Gl((e=>{const{theme:t}=e,{focusBorderColor:n,errorBorderColor:r}=nc(e);return{field:{border:"1px solid",borderColor:"inherit",bg:"inherit",_hover:{borderColor:Ws("gray.300","whiteAlpha.400")(e)},_readOnly:{boxShadow:"none !important",userSelect:"all"},_invalid:{borderColor:fl(t,r),boxShadow:`0 0 0 1px ${fl(t,r)}`},_focusVisible:{zIndex:1,borderColor:fl(t,n),boxShadow:`0 0 0 1px ${fl(t,n)}`}},addon:{border:"1px solid",borderColor:Ws("inherit","whiteAlpha.50")(e),bg:Ws("gray.100","whiteAlpha.300")(e)}}})),mc=Gl((e=>{const{theme:t}=e,{focusBorderColor:n,errorBorderColor:r}=nc(e);return{field:{border:"2px solid",borderColor:"transparent",bg:Ws("gray.100","whiteAlpha.50")(e),_hover:{bg:Ws("gray.200","whiteAlpha.100")(e)},_readOnly:{boxShadow:"none !important",userSelect:"all"},_invalid:{borderColor:fl(t,r)},_focusVisible:{bg:"transparent",borderColor:fl(t,n)}},addon:{border:"2px solid",borderColor:"transparent",bg:Ws("gray.100","whiteAlpha.50")(e)}}})),gc=Gl((e=>{const{theme:t}=e,{focusBorderColor:n,errorBorderColor:r}=nc(e);return{field:{borderBottom:"1px solid",borderColor:"inherit",borderRadius:"0",px:"0",bg:"transparent",_readOnly:{boxShadow:"none !important",userSelect:"all"},_invalid:{borderColor:fl(t,r),boxShadow:`0px 1px 0px 0px ${fl(t,r)}`},_focusVisible:{borderColor:fl(t,n),boxShadow:`0px 1px 0px 0px ${fl(t,n)}`}},addon:{borderBottom:"2px solid",borderColor:"inherit",borderRadius:"0",px:"0",bg:"transparent"}}})),vc=Yl({baseStyle:Jl,sizes:tc,variants:{outline:hc,filled:mc,flushed:gc,unstyled:Gl({field:{bg:"transparent",px:"0",height:"auto"},addon:{bg:"transparent",px:"0",height:"auto"}})},defaultProps:{size:"md",variant:"outline"}}),yc={...null==(rc=vc.baseStyle)?void 0:rc.field,paddingY:"2",minHeight:"20",lineHeight:"short",verticalAlign:"top"},bc={outline:e=>{var t,n;return null!=(n=null==(t=vc.variants)?void 0:t.outline(e).field)?n:{}},flushed:e=>{var t,n;return null!=(n=null==(t=vc.variants)?void 0:t.flushed(e).field)?n:{}},filled:e=>{var t,n;return null!=(n=null==(t=vc.variants)?void 0:t.filled(e).field)?n:{}},unstyled:null!=(ac=null==(oc=vc.variants)?void 0:oc.unstyled.field)?ac:{}},xc={baseStyle:yc,sizes:{xs:null!=(sc=null==(ic=vc.sizes)?void 0:ic.xs.field)?sc:{},sm:null!=(cc=null==(lc=vc.sizes)?void 0:lc.sm.field)?cc:{},md:null!=(dc=null==(uc=vc.sizes)?void 0:uc.md.field)?dc:{},lg:null!=(pc=null==(fc=vc.sizes)?void 0:fc.lg.field)?pc:{}},variants:bc,defaultProps:{size:"md",variant:"outline"}},wc=Ss("tooltip-bg"),kc=Ss("tooltip-fg"),Sc=Ss("popper-arrow-bg"),Ec={baseStyle:{bg:wc.reference,color:kc.reference,[wc.variable]:"colors.gray.700",[kc.variable]:"colors.whiteAlpha.900",_dark:{[wc.variable]:"colors.gray.300",[kc.variable]:"colors.gray.900"},[Sc.variable]:wc.reference,px:"2",py:"0.5",borderRadius:"sm",fontWeight:"medium",fontSize:"sm",boxShadow:"md",maxW:"xs",zIndex:"tooltip"}},{defineMultiStyleConfig:Cc,definePartsStyle:_c}=Ue(ds.keys),Pc=e=>{const{colorScheme:t,theme:n,isIndeterminate:r,hasStripe:o}=e,a=Ws(hl(),hl("1rem","rgba(0,0,0,0.1)"))(e),i=Ws(`${t}.500`,`${t}.200`)(e),s=`linear-gradient(\n    to right,\n    transparent 0%,\n    ${fl(n,i)} 50%,\n    transparent 100%\n  )`;return{...!r&&o&&a,...r?{bgImage:s}:{bgColor:i}}},Ac={lineHeight:"1",fontSize:"0.25em",fontWeight:"bold",color:"white"},Tc=e=>({bg:Ws("gray.100","whiteAlpha.300")(e)}),zc=e=>({transitionProperty:"common",transitionDuration:"slow",...Pc(e)}),Mc=_c((e=>({label:Ac,filledTrack:zc(e),track:Tc(e)}))),Fc=Cc({sizes:{xs:_c({track:{h:"1"}}),sm:_c({track:{h:"2"}}),md:_c({track:{h:"3"}}),lg:_c({track:{h:"4"}})},baseStyle:Mc,defaultProps:{size:"md",colorScheme:"blue"}}),Oc=e=>"function"==typeof e;function Rc(e,...t){return Oc(e)?e(...t):e}var jc,Ic,Nc,Dc,Lc,Bc,$c,Vc,Wc,{definePartsStyle:Hc,defineMultiStyleConfig:Uc}=Ue(es.keys),qc=de("checkbox-size"),Gc=e=>{const{colorScheme:t}=e;return{w:qc.reference,h:qc.reference,transitionProperty:"box-shadow",transitionDuration:"normal",border:"2px solid",borderRadius:"sm",borderColor:"inherit",color:"white",_checked:{bg:Ws(`${t}.500`,`${t}.200`)(e),borderColor:Ws(`${t}.500`,`${t}.200`)(e),color:Ws("white","gray.900")(e),_hover:{bg:Ws(`${t}.600`,`${t}.300`)(e),borderColor:Ws(`${t}.600`,`${t}.300`)(e)},_disabled:{borderColor:Ws("gray.200","transparent")(e),bg:Ws("gray.200","whiteAlpha.300")(e),color:Ws("gray.500","whiteAlpha.500")(e)}},_indeterminate:{bg:Ws(`${t}.500`,`${t}.200`)(e),borderColor:Ws(`${t}.500`,`${t}.200`)(e),color:Ws("white","gray.900")(e)},_disabled:{bg:Ws("gray.100","whiteAlpha.100")(e),borderColor:Ws("gray.100","transparent")(e)},_focusVisible:{boxShadow:"outline"},_invalid:{borderColor:Ws("red.500","red.300")(e)}}},Yc={_disabled:{cursor:"not-allowed"}},Xc={userSelect:"none",_disabled:{opacity:.4}},Qc={transitionProperty:"transform",transitionDuration:"normal"},Kc=Uc({baseStyle:Hc((e=>({icon:Qc,container:Yc,control:Rc(Gc,e),label:Xc}))),sizes:{sm:Hc({control:{[qc.variable]:"sizes.3"},label:{fontSize:"sm"},icon:{fontSize:"3xs"}}),md:Hc({control:{[qc.variable]:"sizes.4"},label:{fontSize:"md"},icon:{fontSize:"2xs"}}),lg:Hc({control:{[qc.variable]:"sizes.5"},label:{fontSize:"lg"},icon:{fontSize:"2xs"}})},defaultProps:{size:"md",colorScheme:"blue"}}),{defineMultiStyleConfig:Zc,definePartsStyle:Jc}=Ue(fs.keys),eu=e=>{var t;const n=null==(t=Rc(Kc.baseStyle,e))?void 0:t.control;return{...n,borderRadius:"full",_checked:{...null==n?void 0:n._checked,_before:{content:'""',display:"inline-block",pos:"relative",w:"50%",h:"50%",borderRadius:"50%",bg:"currentColor"}}}},tu=Jc((e=>{var t,n,r,o;return{label:null==(n=(t=Kc).baseStyle)?void 0:n.call(t,e).label,container:null==(o=(r=Kc).baseStyle)?void 0:o.call(r,e).container,control:eu(e)}})),nu=Zc({baseStyle:tu,sizes:{md:Jc({control:{w:"4",h:"4"},label:{fontSize:"md"}}),lg:Jc({control:{w:"5",h:"5"},label:{fontSize:"lg"}}),sm:Jc({control:{width:"3",height:"3"},label:{fontSize:"sm"}})},defaultProps:{size:"md",colorScheme:"blue"}}),{defineMultiStyleConfig:ru,definePartsStyle:ou}=Ue(ps.keys),au=de("select-bg"),iu={paddingInlineEnd:"8"},su=ru({baseStyle:ou({field:{...null==(jc=vc.baseStyle)?void 0:jc.field,appearance:"none",paddingBottom:"1px",lineHeight:"normal",bg:au.reference,[au.variable]:"colors.white",_dark:{[au.variable]:"colors.gray.700"},"> option, > optgroup":{bg:au.reference}},icon:{width:"6",height:"100%",insetEnd:"2",position:"relative",color:"currentColor",fontSize:"xl",_disabled:{opacity:.5}}}),sizes:{lg:{...null==(Ic=vc.sizes)?void 0:Ic.lg,field:{...null==(Nc=vc.sizes)?void 0:Nc.lg.field,...iu}},md:{...null==(Dc=vc.sizes)?void 0:Dc.md,field:{...null==(Lc=vc.sizes)?void 0:Lc.md.field,...iu}},sm:{...null==(Bc=vc.sizes)?void 0:Bc.sm,field:{...null==($c=vc.sizes)?void 0:$c.sm.field,...iu}},xs:{...null==(Vc=vc.sizes)?void 0:Vc.xs,field:{...null==(Wc=vc.sizes)?void 0:Wc.xs.field,...iu},icon:{insetEnd:"1"}}},variants:vc.variants,defaultProps:vc.defaultProps}),lu=de("skeleton-start-color"),cu=de("skeleton-end-color"),uu={baseStyle:{[lu.variable]:"colors.gray.100",[cu.variable]:"colors.gray.400",_dark:{[lu.variable]:"colors.gray.800",[cu.variable]:"colors.gray.600"},background:lu.reference,borderColor:cu.reference,opacity:.7,borderRadius:"sm"}},du=de("skip-link-bg"),fu={baseStyle:{borderRadius:"md",fontWeight:"semibold",_focusVisible:{boxShadow:"outline",padding:"4",position:"fixed",top:"6",insetStart:"6",[du.variable]:"colors.white",_dark:{[du.variable]:"colors.gray.700"},bg:du.reference}}},{defineMultiStyleConfig:pu,definePartsStyle:hu}=Ue(hs.keys),mu=de("slider-thumb-size"),gu=de("slider-track-size"),vu=de("slider-bg"),yu=e=>{const{orientation:t}=e;return{display:"inline-block",position:"relative",cursor:"pointer",_disabled:{opacity:.6,cursor:"default",pointerEvents:"none"},...Hs({orientation:t,vertical:{h:"100%"},horizontal:{w:"100%"}})}},bu=e=>({...Hs({orientation:e.orientation,horizontal:{h:gu.reference},vertical:{w:gu.reference}}),overflow:"hidden",borderRadius:"sm",[vu.variable]:"colors.gray.200",_dark:{[vu.variable]:"colors.whiteAlpha.200"},_disabled:{[vu.variable]:"colors.gray.300",_dark:{[vu.variable]:"colors.whiteAlpha.300"}},bg:vu.reference}),xu=e=>{const{orientation:t}=e;return{...Hs({orientation:t,vertical:{left:"50%",transform:"translateX(-50%)",_active:{transform:"translateX(-50%) scale(1.15)"}},horizontal:{top:"50%",transform:"translateY(-50%)",_active:{transform:"translateY(-50%) scale(1.15)"}}}),w:mu.reference,h:mu.reference,display:"flex",alignItems:"center",justifyContent:"center",position:"absolute",outline:0,zIndex:1,borderRadius:"full",bg:"white",boxShadow:"base",border:"1px solid",borderColor:"transparent",transitionProperty:"transform",transitionDuration:"normal",_focusVisible:{boxShadow:"outline"},_disabled:{bg:"gray.300"}}},wu=e=>{const{colorScheme:t}=e;return{width:"inherit",height:"inherit",[vu.variable]:`colors.${t}.500`,_dark:{[vu.variable]:`colors.${t}.200`},bg:vu.reference}},ku=pu({baseStyle:hu((e=>({container:yu(e),track:bu(e),thumb:xu(e),filledTrack:wu(e)}))),sizes:{lg:hu({container:{[mu.variable]:"sizes.4",[gu.variable]:"sizes.1"}}),md:hu({container:{[mu.variable]:"sizes.3.5",[gu.variable]:"sizes.1"}}),sm:hu({container:{[mu.variable]:"sizes.2.5",[gu.variable]:"sizes.0.5"}})},defaultProps:{size:"md",colorScheme:"blue"}}),Su=Ss("spinner-size"),Eu={baseStyle:{width:[Su.reference],height:[Su.reference]},sizes:{xs:{[Su.variable]:"sizes.3"},sm:{[Su.variable]:"sizes.4"},md:{[Su.variable]:"sizes.6"},lg:{[Su.variable]:"sizes.8"},xl:{[Su.variable]:"sizes.12"}},defaultProps:{size:"md"}},{defineMultiStyleConfig:Cu,definePartsStyle:_u}=Ue(ms.keys),Pu=Cu({baseStyle:_u({container:{},label:{fontWeight:"medium"},helpText:{opacity:.8,marginBottom:"2"},number:{verticalAlign:"baseline",fontWeight:"semibold"},icon:{marginEnd:1,w:"3.5",h:"3.5",verticalAlign:"middle"}}),sizes:{md:_u({label:{fontSize:"sm"},helpText:{fontSize:"sm"},number:{fontSize:"2xl"}})},defaultProps:{size:"md"}}),Au=de("kbd-bg"),Tu={baseStyle:{[Au.variable]:"colors.gray.100",_dark:{[Au.variable]:"colors.whiteAlpha.100"},bg:Au.reference,borderRadius:"md",borderWidth:"1px",borderBottomWidth:"3px",fontSize:"0.8em",fontWeight:"bold",lineHeight:"normal",px:"0.4em",whiteSpace:"nowrap"}},{defineMultiStyleConfig:zu,definePartsStyle:Mu}=Ue(is.keys),Fu=zu({baseStyle:Mu({icon:{marginEnd:"2",display:"inline",verticalAlign:"text-bottom"}})}),{defineMultiStyleConfig:Ou,definePartsStyle:Ru}=Ue(ss.keys),ju=de("menu-bg"),Iu=de("menu-shadow"),Nu=Ou({baseStyle:Ru({button:{transitionProperty:"common",transitionDuration:"normal"},list:{[ju.variable]:"#fff",[Iu.variable]:"shadows.sm",_dark:{[ju.variable]:"colors.gray.700",[Iu.variable]:"shadows.dark-lg"},color:"inherit",minW:"3xs",py:"2",zIndex:1,borderRadius:"md",borderWidth:"1px",bg:ju.reference,boxShadow:Iu.reference},item:{py:"1.5",px:"3",transitionProperty:"background",transitionDuration:"ultra-fast",transitionTimingFunction:"ease-in",_focus:{[ju.variable]:"colors.gray.100",_dark:{[ju.variable]:"colors.whiteAlpha.100"}},_active:{[ju.variable]:"colors.gray.200",_dark:{[ju.variable]:"colors.whiteAlpha.200"}},_expanded:{[ju.variable]:"colors.gray.100",_dark:{[ju.variable]:"colors.whiteAlpha.100"}},_disabled:{opacity:.4,cursor:"not-allowed"},bg:ju.reference},groupTitle:{mx:4,my:2,fontWeight:"semibold",fontSize:"sm"},icon:{display:"inline-flex",alignItems:"center",justifyContent:"center",flexShrink:0},command:{opacity:.6},divider:{border:0,borderBottom:"1px solid",borderColor:"inherit",my:"2",opacity:.6}})}),{defineMultiStyleConfig:Du,definePartsStyle:Lu}=Ue(ls.keys),Bu=de("modal-bg"),$u=de("modal-shadow"),Vu={bg:"blackAlpha.600",zIndex:"modal"},Wu=e=>{const{isCentered:t,scrollBehavior:n}=e;return{display:"flex",zIndex:"modal",justifyContent:"center",alignItems:t?"center":"flex-start",overflow:"inside"===n?"hidden":"auto",overscrollBehaviorY:"none"}},Hu=e=>{const{isCentered:t,scrollBehavior:n}=e;return{borderRadius:"md",color:"inherit",my:t?"auto":"16",mx:t?"auto":void 0,zIndex:"modal",maxH:"inside"===n?"calc(100% - 7.5rem)":void 0,[Bu.variable]:"colors.white",[$u.variable]:"shadows.lg",_dark:{[Bu.variable]:"colors.gray.700",[$u.variable]:"shadows.dark-lg"},bg:Bu.reference,boxShadow:$u.reference}},Uu={px:"6",py:"4",fontSize:"xl",fontWeight:"semibold"},qu={position:"absolute",top:"2",insetEnd:"3"},Gu=e=>{const{scrollBehavior:t}=e;return{px:"6",py:"2",flex:"1",overflow:"inside"===t?"auto":void 0}},Yu={px:"6",py:"4"};function Xu(e){return Lu("full"===e?{dialog:{maxW:"100vw",minH:"$100vh",my:"0",borderRadius:"0"}}:{dialog:{maxW:e}})}var Qu=Du({baseStyle:Lu((e=>({overlay:Vu,dialogContainer:Rc(Wu,e),dialog:Rc(Hu,e),header:Uu,closeButton:qu,body:Rc(Gu,e),footer:Yu}))),sizes:{xs:Xu("xs"),sm:Xu("sm"),md:Xu("md"),lg:Xu("lg"),xl:Xu("xl"),"2xl":Xu("2xl"),"3xl":Xu("3xl"),"4xl":Xu("4xl"),"5xl":Xu("5xl"),"6xl":Xu("6xl"),full:Xu("full")},defaultProps:{size:"md"}}),{defineMultiStyleConfig:Ku,definePartsStyle:Zu}=Ue(cs.keys),Ju=Ss("number-input-stepper-width"),ed=Ss("number-input-input-padding"),td=Ms(Ju).add("0.5rem").toString(),nd=Ss("number-input-bg"),rd=Ss("number-input-color"),od=Ss("number-input-border-color"),ad={[Ju.variable]:"sizes.6",[ed.variable]:td},id=e=>{var t,n;return null!=(n=null==(t=Rc(vc.baseStyle,e))?void 0:t.field)?n:{}},sd={width:Ju.reference},ld={borderStart:"1px solid",borderStartColor:od.reference,color:rd.reference,bg:nd.reference,[rd.variable]:"colors.chakra-body-text",[od.variable]:"colors.chakra-border-color",_dark:{[rd.variable]:"colors.whiteAlpha.800",[od.variable]:"colors.whiteAlpha.300"},_active:{[nd.variable]:"colors.gray.200",_dark:{[nd.variable]:"colors.whiteAlpha.300"}},_disabled:{opacity:.4,cursor:"not-allowed"}},cd=Zu((e=>{var t;return{root:ad,field:null!=(t=Rc(id,e))?t:{},stepperGroup:sd,stepper:ld}}));function ud(e){var t,n,r;const o=null==(t=vc.sizes)?void 0:t[e],a={lg:"md",md:"md",sm:"sm",xs:"sm"},i=null!=(r=null==(n=o.field)?void 0:n.fontSize)?r:"md",s=Ni.fontSizes[i];return Zu({field:{...o.field,paddingInlineEnd:ed.reference,verticalAlign:"top"},stepper:{fontSize:Ms(s).multiply(.75).toString(),_first:{borderTopEndRadius:a[e]},_last:{borderBottomEndRadius:a[e],mt:"-1px",borderTopWidth:1}}})}var dd,fd,pd,hd=Ku({baseStyle:cd,sizes:{xs:ud("xs"),sm:ud("sm"),md:ud("md"),lg:ud("lg")},variants:vc.variants,defaultProps:vc.defaultProps}),md={...null==(dd=vc.baseStyle)?void 0:dd.field,textAlign:"center"},gd={outline:e=>{var t,n,r;return null!=(r=null==(n=Rc(null==(t=vc.variants)?void 0:t.outline,e))?void 0:n.field)?r:{}},flushed:e=>{var t,n,r;return null!=(r=null==(n=Rc(null==(t=vc.variants)?void 0:t.flushed,e))?void 0:n.field)?r:{}},filled:e=>{var t,n,r;return null!=(r=null==(n=Rc(null==(t=vc.variants)?void 0:t.filled,e))?void 0:n.field)?r:{}},unstyled:null!=(pd=null==(fd=vc.variants)?void 0:fd.unstyled.field)?pd:{}},vd={baseStyle:md,sizes:{lg:{fontSize:"lg",w:12,h:12,borderRadius:"md"},md:{fontSize:"md",w:10,h:10,borderRadius:"md"},sm:{fontSize:"sm",w:8,h:8,borderRadius:"sm"},xs:{fontSize:"xs",w:6,h:6,borderRadius:"sm"}},variants:gd,defaultProps:vc.defaultProps},{defineMultiStyleConfig:yd,definePartsStyle:bd}=Ue(us.keys),xd=Ss("popper-bg"),wd=Ss("popper-arrow-bg"),kd=Ss("popper-arrow-shadow-color"),Sd=yd({baseStyle:bd({popper:{zIndex:10},content:{[xd.variable]:"colors.white",bg:xd.reference,[wd.variable]:xd.reference,[kd.variable]:"colors.gray.200",_dark:{[xd.variable]:"colors.gray.700",[kd.variable]:"colors.whiteAlpha.300"},width:"xs",border:"1px solid",borderColor:"inherit",borderRadius:"md",boxShadow:"sm",zIndex:"inherit",_focusVisible:{outline:0,boxShadow:"outline"}},header:{px:3,py:2,borderBottomWidth:"1px"},body:{px:3,py:2},footer:{px:3,py:2,borderTopWidth:"1px"},closeButton:{position:"absolute",borderRadius:"md",top:1,insetEnd:2,padding:2}})}),{definePartsStyle:Ed,defineMultiStyleConfig:Cd}=Ue(ts.keys),_d=de("drawer-bg"),Pd=de("drawer-box-shadow");function Ad(e){return Ed("full"===e?{dialog:{maxW:"100vw",h:"100vh"}}:{dialog:{maxW:e}})}var Td={bg:"blackAlpha.600",zIndex:"modal"},zd={display:"flex",zIndex:"modal",justifyContent:"center"},Md=e=>{const{isFullHeight:t}=e;return{...t&&{height:"100vh"},zIndex:"modal",maxH:"100vh",color:"inherit",[_d.variable]:"colors.white",[Pd.variable]:"shadows.lg",_dark:{[_d.variable]:"colors.gray.700",[Pd.variable]:"shadows.dark-lg"},bg:_d.reference,boxShadow:Pd.reference}},Fd={px:"6",py:"4",fontSize:"xl",fontWeight:"semibold"},Od={position:"absolute",top:"2",insetEnd:"3"},Rd={px:"6",py:"2",flex:"1",overflow:"auto"},jd={px:"6",py:"4"},Id=Cd({baseStyle:Ed((e=>({overlay:Td,dialogContainer:zd,dialog:Rc(Md,e),header:Fd,closeButton:Od,body:Rd,footer:jd}))),sizes:{xs:Ad("xs"),sm:Ad("md"),md:Ad("lg"),lg:Ad("2xl"),xl:Ad("4xl"),full:Ad("full")},defaultProps:{size:"xs"}}),{definePartsStyle:Nd,defineMultiStyleConfig:Dd}=Ue(ns.keys),Ld=Dd({baseStyle:Nd({preview:{borderRadius:"md",py:"1",transitionProperty:"common",transitionDuration:"normal"},input:{borderRadius:"md",py:"1",transitionProperty:"common",transitionDuration:"normal",width:"full",_focusVisible:{boxShadow:"outline"},_placeholder:{opacity:.6}},textarea:{borderRadius:"md",py:"1",transitionProperty:"common",transitionDuration:"normal",width:"full",_focusVisible:{boxShadow:"outline"},_placeholder:{opacity:.6}}})}),{definePartsStyle:Bd,defineMultiStyleConfig:$d}=Ue(rs.keys),Vd=de("form-control-color"),Wd=$d({baseStyle:Bd({container:{width:"100%",position:"relative"},requiredIndicator:{marginStart:"1",[Vd.variable]:"colors.red.500",_dark:{[Vd.variable]:"colors.red.300"},color:Vd.reference},helperText:{mt:"2",[Vd.variable]:"colors.gray.600",_dark:{[Vd.variable]:"colors.whiteAlpha.600"},color:Vd.reference,lineHeight:"normal",fontSize:"sm"}})}),{definePartsStyle:Hd,defineMultiStyleConfig:Ud}=Ue(os.keys),qd=de("form-error-color"),Gd=Ud({baseStyle:Hd({text:{[qd.variable]:"colors.red.500",_dark:{[qd.variable]:"colors.red.300"},color:qd.reference,mt:"2",fontSize:"sm",lineHeight:"normal"},icon:{marginEnd:"0.5em",[qd.variable]:"colors.red.500",_dark:{[qd.variable]:"colors.red.300"},color:qd.reference}})}),{defineMultiStyleConfig:Yd,definePartsStyle:Xd}=Ue(Ji.keys),Qd=de("breadcrumb-link-decor"),Kd=Yd({baseStyle:Xd({link:{transitionProperty:"common",transitionDuration:"fast",transitionTimingFunction:"ease-out",outline:"none",color:"inherit",textDecoration:Qd.reference,[Qd.variable]:"none","&:not([aria-current=page])":{cursor:"pointer",_hover:{[Qd.variable]:"underline"},_focusVisible:{boxShadow:"outline"}}}})}),Zd=e=>{const{colorScheme:t,theme:n}=e;if("gray"===t)return{color:Ws("gray.800","whiteAlpha.900")(e),_hover:{bg:Ws("gray.100","whiteAlpha.200")(e)},_active:{bg:Ws("gray.200","whiteAlpha.300")(e)}};const r=pl(`${t}.200`,.12)(n),o=pl(`${t}.200`,.24)(n);return{color:Ws(`${t}.600`,`${t}.200`)(e),bg:"transparent",_hover:{bg:Ws(`${t}.50`,r)(e)},_active:{bg:Ws(`${t}.100`,o)(e)}}},Jd={yellow:{bg:"yellow.400",color:"black",hoverBg:"yellow.500",activeBg:"yellow.600"},cyan:{bg:"cyan.400",color:"black",hoverBg:"cyan.500",activeBg:"cyan.600"}},ef={baseStyle:{lineHeight:"1.2",borderRadius:"md",fontWeight:"semibold",transitionProperty:"common",transitionDuration:"normal",_focusVisible:{boxShadow:"outline"},_disabled:{opacity:.4,cursor:"not-allowed",boxShadow:"none"},_hover:{_disabled:{bg:"initial"}}},variants:{ghost:Zd,outline:e=>{const{colorScheme:t}=e,n=Ws("gray.200","whiteAlpha.300")(e);return{border:"1px solid",borderColor:"gray"===t?n:"currentColor",".chakra-button__group[data-attached][data-orientation=horizontal] > &:not(:last-of-type)":{marginEnd:"-1px"},".chakra-button__group[data-attached][data-orientation=vertical] > &:not(:last-of-type)":{marginBottom:"-1px"},...Rc(Zd,e)}},solid:e=>{var t;const{colorScheme:n}=e;if("gray"===n){const t=Ws("gray.100","whiteAlpha.200")(e);return{bg:t,color:Ws("gray.800","whiteAlpha.900")(e),_hover:{bg:Ws("gray.200","whiteAlpha.300")(e),_disabled:{bg:t}},_active:{bg:Ws("gray.300","whiteAlpha.400")(e)}}}const{bg:r=`${n}.500`,color:o="white",hoverBg:a=`${n}.600`,activeBg:i=`${n}.700`}=null!=(t=Jd[n])?t:{},s=Ws(r,`${n}.200`)(e);return{bg:s,color:Ws(o,"gray.800")(e),_hover:{bg:Ws(a,`${n}.300`)(e),_disabled:{bg:s}},_active:{bg:Ws(i,`${n}.400`)(e)}}},link:e=>{const{colorScheme:t}=e;return{padding:0,height:"auto",lineHeight:"normal",verticalAlign:"baseline",color:Ws(`${t}.500`,`${t}.200`)(e),_hover:{textDecoration:"underline",_disabled:{textDecoration:"none"}},_active:{color:Ws(`${t}.700`,`${t}.500`)(e)}}},unstyled:{bg:"none",color:"inherit",display:"inline",lineHeight:"inherit",m:"0",p:"0"}},sizes:{lg:{h:"12",minW:"12",fontSize:"lg",px:"6"},md:{h:"10",minW:"10",fontSize:"md",px:"4"},sm:{h:"8",minW:"8",fontSize:"sm",px:"3"},xs:{h:"6",minW:"6",fontSize:"xs",px:"2"}},defaultProps:{variant:"solid",size:"md",colorScheme:"gray"}},{definePartsStyle:tf,defineMultiStyleConfig:nf}=Ue(xs.keys),rf=de("card-bg"),of=de("card-padding"),af=de("card-shadow"),sf=de("card-radius"),lf=de("card-border-width","0"),cf=de("card-border-color"),uf=tf({container:{[rf.variable]:"colors.chakra-body-bg",backgroundColor:rf.reference,boxShadow:af.reference,borderRadius:sf.reference,color:"chakra-body-text",borderWidth:lf.reference,borderColor:cf.reference},body:{padding:of.reference,flex:"1 1 0%"},header:{padding:of.reference},footer:{padding:of.reference}}),df={sm:tf({container:{[sf.variable]:"radii.base",[of.variable]:"space.3"}}),md:tf({container:{[sf.variable]:"radii.md",[of.variable]:"space.5"}}),lg:tf({container:{[sf.variable]:"radii.xl",[of.variable]:"space.7"}})},ff=nf({baseStyle:uf,variants:{elevated:tf({container:{[af.variable]:"shadows.base",_dark:{[rf.variable]:"colors.gray.700"}}}),outline:tf({container:{[lf.variable]:"1px",[cf.variable]:"colors.chakra-border-color"}}),filled:tf({container:{[rf.variable]:"colors.chakra-subtle-bg"}}),unstyled:{body:{[of.variable]:0},header:{[of.variable]:0},footer:{[of.variable]:0}}},sizes:df,defaultProps:{variant:"elevated",size:"md"}}),pf=Ss("close-button-size"),hf=Ss("close-button-bg"),mf={baseStyle:{w:[pf.reference],h:[pf.reference],borderRadius:"md",transitionProperty:"common",transitionDuration:"normal",_disabled:{opacity:.4,cursor:"not-allowed",boxShadow:"none"},_hover:{[hf.variable]:"colors.blackAlpha.100",_dark:{[hf.variable]:"colors.whiteAlpha.100"}},_active:{[hf.variable]:"colors.blackAlpha.200",_dark:{[hf.variable]:"colors.whiteAlpha.200"}},_focusVisible:{boxShadow:"outline"},bg:hf.reference},sizes:{lg:{[pf.variable]:"sizes.10",fontSize:"md"},md:{[pf.variable]:"sizes.8",fontSize:"xs"},sm:{[pf.variable]:"sizes.6",fontSize:"2xs"}},defaultProps:{size:"md"}},{variants:gf,defaultProps:vf}=Ol,yf={baseStyle:{fontFamily:"mono",fontSize:"sm",px:"0.2em",borderRadius:"sm",bg:Fl.bg.reference,color:Fl.color.reference,boxShadow:Fl.shadow.reference},variants:gf,defaultProps:vf},{definePartsStyle:bf,defineMultiStyleConfig:xf}=Ue(Qi.keys),wf=xf({baseStyle:bf({container:{borderTopWidth:"1px",borderColor:"inherit",_last:{borderBottomWidth:"1px"}},button:{transitionProperty:"common",transitionDuration:"normal",fontSize:"md",_focusVisible:{boxShadow:"outline"},_hover:{bg:"blackAlpha.50"},_disabled:{opacity:.4,cursor:"not-allowed"},px:"4",py:"2"},panel:{pt:"2",px:"4",pb:"5"},icon:{fontSize:"1.25em"}})}),{definePartsStyle:kf,defineMultiStyleConfig:Sf}=Ue(Ki.keys),Ef=de("alert-fg"),Cf=de("alert-bg");function _f(e){const{theme:t,colorScheme:n}=e;return{light:`colors.${n}.100`,dark:pl(`${n}.200`,.16)(t)}}var Pf=Sf({baseStyle:kf({container:{bg:Cf.reference,px:"4",py:"3"},title:{fontWeight:"bold",lineHeight:"6",marginEnd:"2"},description:{lineHeight:"6"},icon:{color:Ef.reference,flexShrink:0,marginEnd:"3",w:"5",h:"6"},spinner:{color:Ef.reference,flexShrink:0,marginEnd:"3",w:"5",h:"5"}}),variants:{subtle:kf((e=>{const{colorScheme:t}=e,n=_f(e);return{container:{[Ef.variable]:`colors.${t}.600`,[Cf.variable]:n.light,_dark:{[Ef.variable]:`colors.${t}.200`,[Cf.variable]:n.dark}}}})),"left-accent":kf((e=>{const{colorScheme:t}=e,n=_f(e);return{container:{[Ef.variable]:`colors.${t}.600`,[Cf.variable]:n.light,_dark:{[Ef.variable]:`colors.${t}.200`,[Cf.variable]:n.dark},paddingStart:"3",borderStartWidth:"4px",borderStartColor:Ef.reference}}})),"top-accent":kf((e=>{const{colorScheme:t}=e,n=_f(e);return{container:{[Ef.variable]:`colors.${t}.600`,[Cf.variable]:n.light,_dark:{[Ef.variable]:`colors.${t}.200`,[Cf.variable]:n.dark},pt:"2",borderTopWidth:"4px",borderTopColor:Ef.reference}}})),solid:kf((e=>{const{colorScheme:t}=e;return{container:{[Ef.variable]:"colors.white",[Cf.variable]:`colors.${t}.600`,_dark:{[Ef.variable]:"colors.gray.900",[Cf.variable]:`colors.${t}.200`},color:Ef.reference}}}))},defaultProps:{variant:"subtle",colorScheme:"blue"}}),{definePartsStyle:Af,defineMultiStyleConfig:Tf}=Ue(Zi.keys),zf=de("avatar-border-color"),Mf=de("avatar-bg"),Ff=de("avatar-font-size"),Of=de("avatar-size"),Rf={borderRadius:"full",border:"0.2em solid",borderColor:zf.reference,[zf.variable]:"white",_dark:{[zf.variable]:"colors.gray.800"}},jf={bg:Mf.reference,fontSize:Ff.reference,width:Of.reference,height:Of.reference,lineHeight:"1",[Mf.variable]:"colors.gray.200",_dark:{[Mf.variable]:"colors.whiteAlpha.400"}},If=e=>{const{name:t,theme:n}=e,r=t?function(e){const t=ml();return!e||dl(e)?t:e.string&&e.colors?function(e,t){let n=0;if(0===e.length)return t[0];for(let t=0;t<e.length;t+=1)n=e.charCodeAt(t)+((n<<5)-n),n&=n;return n=(n%t.length+t.length)%t.length,t[n]}(e.string,e.colors):e.string&&!e.colors?function(e){let t=0;if(0===e.length)return t.toString();for(let n=0;n<e.length;n+=1)t=e.charCodeAt(n)+((t<<5)-t),t&=t;let n="#";for(let e=0;e<3;e+=1)n+=`00${(t>>8*e&255).toString(16)}`.substr(-2);return n}(e.string):e.colors&&!e.string?function(e){return e[Math.floor(Math.random()*e.length)]}(e.colors):t}({string:t}):"colors.gray.400",o=(e=>t=>"dark"===(e=>t=>{const n=(e=>{const[t,n,r]=Js(e);return(299*t+587*n+114*r)/1e3})(fl(t,e));return n<128?"dark":"light"})(e)(t))(r)(n);let a="white";return o||(a="gray.800"),{bg:Mf.reference,fontSize:Ff.reference,color:a,borderColor:zf.reference,verticalAlign:"top",width:Of.reference,height:Of.reference,"&:not([data-loaded])":{[Mf.variable]:r},[zf.variable]:"colors.white",_dark:{[zf.variable]:"colors.gray.800"}}},Nf={fontSize:Ff.reference,lineHeight:"1"};function Df(e){const t="100%"!==e?Li[e]:void 0;return Af({container:{[Of.variable]:null!=t?t:e,[Ff.variable]:`calc(${null!=t?t:e} / 2.5)`},excessLabel:{[Of.variable]:null!=t?t:e,[Ff.variable]:`calc(${null!=t?t:e} / 2.5)`}})}var Lf={Accordion:wf,Alert:Pf,Avatar:Tf({baseStyle:Af((e=>({badge:Rc(Rf,e),excessLabel:Rc(jf,e),container:Rc(If,e),label:Nf}))),sizes:{"2xs":Df(4),xs:Df(6),sm:Df(8),md:Df(12),lg:Df(16),xl:Df(24),"2xl":Df(32),full:Df("100%")},defaultProps:{size:"md"}}),Badge:Ol,Breadcrumb:Kd,Button:ef,Checkbox:Kc,CloseButton:mf,Code:yf,Container:{baseStyle:{w:"100%",mx:"auto",maxW:"prose",px:"4"}},Divider:{baseStyle:{opacity:.6,borderColor:"inherit"},variants:{solid:{borderStyle:"solid"},dashed:{borderStyle:"dashed"}},defaultProps:{variant:"solid"}},Drawer:Id,Editable:Ld,Form:Wd,FormError:Gd,FormLabel:{baseStyle:{fontSize:"md",marginEnd:"3",mb:"2",fontWeight:"medium",transitionProperty:"common",transitionDuration:"normal",opacity:1,_disabled:{opacity:.4}}},Heading:{baseStyle:{fontFamily:"heading",fontWeight:"bold"},sizes:{"4xl":{fontSize:["6xl",null,"7xl"],lineHeight:1},"3xl":{fontSize:["5xl",null,"6xl"],lineHeight:1},"2xl":{fontSize:["4xl",null,"5xl"],lineHeight:[1.2,null,1]},xl:{fontSize:["3xl",null,"4xl"],lineHeight:[1.33,null,1.2]},lg:{fontSize:["2xl",null,"3xl"],lineHeight:[1.33,null,1.2]},md:{fontSize:"xl",lineHeight:1.2},sm:{fontSize:"md",lineHeight:1.2},xs:{fontSize:"sm",lineHeight:1.2}},defaultProps:{size:"xl"}},Input:vc,Kbd:Tu,Link:{baseStyle:{transitionProperty:"common",transitionDuration:"fast",transitionTimingFunction:"ease-out",cursor:"pointer",textDecoration:"none",outline:"none",color:"inherit",_hover:{textDecoration:"underline"},_focusVisible:{boxShadow:"outline"}}},List:Fu,Menu:Nu,Modal:Qu,NumberInput:hd,PinInput:vd,Popover:Sd,Progress:Fc,Radio:nu,Select:su,Skeleton:uu,SkipLink:fu,Slider:ku,Spinner:Eu,Stat:Pu,Switch:Vs,Table:Xs,Tabs:Ml,Tag:ql,Textarea:xc,Tooltip:Ec,Card:ff,Stepper:Yi},Bf={colors:{"chakra-body-text":{_light:"gray.800",_dark:"whiteAlpha.900"},"chakra-body-bg":{_light:"white",_dark:"gray.800"},"chakra-border-color":{_light:"gray.200",_dark:"whiteAlpha.300"},"chakra-inverse-text":{_light:"white",_dark:"gray.800"},"chakra-subtle-bg":{_light:"gray.100",_dark:"gray.700"},"chakra-subtle-text":{_light:"gray.600",_dark:"gray.400"},"chakra-placeholder-color":{_light:"gray.500",_dark:"whiteAlpha.400"}}},$f={global:{body:{fontFamily:"body",color:"chakra-body-text",bg:"chakra-body-bg",transitionProperty:"background-color",transitionDuration:"normal",lineHeight:"base"},"*::placeholder":{color:"chakra-placeholder-color"},"*, *::before, &::after":{borderColor:"chakra-border-color"}}},Vf={useSystemColorMode:!1,initialColorMode:"light",cssVarPrefix:"chakra"},Wf={semanticTokens:Bf,direction:"ltr",...Bi,components:Lf,styles:$f,config:Vf},Hf={semanticTokens:Bf,direction:"ltr",components:{},...Bi,styles:$f,config:Vf};function Uf(e){return"function"==typeof e}var qf=e=>function(...t){let n=[...t],r=t[t.length-1];var o;return i(o=r)&&Ii.every((e=>Object.prototype.hasOwnProperty.call(o,e)))&&n.length>1?n=n.slice(0,n.length-1):r=e,function(...e){return t=>e.reduce(((e,t)=>t(e)),t)}(...n.map((e=>t=>Uf(e)?e(t):function(...e){return p({},...e,Yf)}(t,e))))(r)},Gf=qf(Wf);function Yf(e,t,n,r){if((Uf(e)||Uf(t))&&Object.prototype.hasOwnProperty.call(r,n))return(...n)=>{const r=Uf(e)?e(...n):e,o=Uf(t)?t(...n):t;return p({},r,o,Yf)}}qf(Hf);var Xf="hsl(229, 31%, 21%)",Qf="hsl(231, 69%, 60%)";const Kf=Gf({fonts:{heading:"'Rubik', sans-serif",body:"'Rubik', sans-serif"},fontSizes:{lg:"18px",xl:"18px"},styles:{global:{p:{color:"hsl(229, 8%, 60%)"},button:{color:Xf},h1:{color:Xf},h2:{color:Xf},h3:{color:Xf}}}});var Zf,Jf;function ep(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var tp=pi.div(Zf||(Zf=ep(['\n  max-width: 800px;\n  width: 40vw;\n  height: auto;\n\n  @media (max-width: 768px) {\n    width: 90vw;\n    margin-right: auto;\n    margin-left: auto;\n  }\n  svg {\n    width: 100%;\n    height: 100%;\n    overflow: "visible";\n  }\n']))),np=pi.div(Jf||(Jf=ep(["\n  background-color: ",";\n  height: 45vh;\n  border-top-left-radius: 250px;\n  border-bottom-left-radius: 250px;\n  margin-top: -40vh;\n  z-index: -1;\n  width: 40vw;\n  @media (max-width: 768px) {\n    width: 60vw;\n    max-height: 150px;\n    min-height: 150px;\n    margin-top: -120px;\n    height: 45vh;\n  }\n"])),Qf);const rp=function(){return e.createElement(nr,{"data-testid":"hero"},e.createElement(nr,{direction:{base:"column",md:"row"},maxW:"1440px",ml:"auto",mr:"auto",mt:150},e.createElement(Fi,{above:"md"},e.createElement(tp,null,e.createElement(_i,null))),e.createElement(Fi,{above:"md"},e.createElement(Gn,{justify:"end"},e.createElement(np,null))),e.createElement(Gn,{pl:4,pr:4,flex:1,align:"center",justify:"center"},e.createElement(nr,{spacing:6,w:"full",maxW:"lg"},e.createElement(Oi,{as:"h1",fontWeight:500,fontSize:{base:"30px",md:"50px"},align:{base:"center",md:"left"},lineHeight:{base:"35px",md:"45px"}},"A Simple Bookmark ",e.createElement("br",null)," Manager"),e.createElement(Oi,{as:"p",fontSize:"lg",align:{base:"center",md:"left"}},"A clean and simple interface to organize your favourite websites. Open a new browser tab and see your sites load instntly. Try it for free."),e.createElement(nr,{direction:{base:"row",md:"row"},spacing:4,ml:{base:"auto",md:"0"},mr:{base:"auto",md:"0"}},e.createElement(Ri,{text:"Get it on Chrome"}),e.createElement(ji,{text:"Get it on Firefox"})))),e.createElement(Fi,{below:"md"},e.createElement(tp,null,e.createElement(_i,null)))),e.createElement(Fi,{below:"md"},e.createElement(Gn,{justify:"end"},e.createElement(np,null))))};var op,ap;function ip(){return ip=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ip.apply(this,arguments)}const sp=function(t){return e.createElement("svg",ip({xmlns:"http://www.w3.org/2000/svg",xmlnsXlink:"http://www.w3.org/1999/xlink",viewBox:"0 0 650 450"},t),op||(op=e.createElement("defs",null,e.createElement("rect",{id:"illustration-features-tab-1_svg__a",width:536,height:346,rx:8}))),ap||(ap=e.createElement("g",{fill:"none"},e.createElement("mask",{id:"illustration-features-tab-1_svg__b",fill:"#fff"},e.createElement("use",{xlinkHref:"#illustration-features-tab-1_svg__a"})),e.createElement("use",{xlinkHref:"#illustration-features-tab-1_svg__a",fill:"#E8EAF6"}),e.createElement("g",{mask:"url(#illustration-features-tab-1_svg__b)"},e.createElement("path",{fill:"#242A45",d:"M-3.53.197h547v59h-547z"}),e.createElement("g",{fill:"#FFF",transform:"translate(22.47 14.197)"},e.createElement("circle",{cx:16,cy:16,r:16,opacity:.245}),e.createElement("circle",{cx:477,cy:16,r:16,opacity:.104}),e.createElement("g",{transform:"translate(47 6)"},e.createElement("rect",{width:120,height:6,opacity:.75,rx:3}),e.createElement("rect",{width:64,height:6,y:14,opacity:.25,rx:3})))),e.createElement("g",{mask:"url(#illustration-features-tab-1_svg__b)"},e.createElement("g",{transform:"translate(57 93)"},e.createElement("rect",{width:261,height:316,fill:"#FFF",rx:8}),e.createElement("rect",{width:128,height:316,x:295,fill:"#FFF",rx:8}),e.createElement("rect",{width:120,height:6,x:78.47,y:38.197,fill:"#242A45",opacity:.5,rx:3}))),e.createElement("g",{transform:"translate(88.47 115.197)"},e.createElement("circle",{cx:16,cy:26,r:16,fill:"#F98E5D"}),e.createElement("rect",{width:88,height:6,x:284,fill:"#242A45",opacity:.25,rx:3}),e.createElement("rect",{width:88,height:6,x:284,y:20,fill:"#242A45",opacity:.25,rx:3}),e.createElement("rect",{width:88,height:6,x:284,y:40,fill:"#242A45",opacity:.25,rx:3}),e.createElement("rect",{width:88,height:6,x:284,y:60,fill:"#242A45",opacity:.25,rx:3}),e.createElement("rect",{width:88,height:6,x:284,y:94,fill:"#242A45",opacity:.25,rx:3}),e.createElement("rect",{width:88,height:6,x:284,y:114,fill:"#242A45",opacity:.25,rx:3}),e.createElement("rect",{width:88,height:6,x:284,y:134,fill:"#242A45",opacity:.25,rx:3}),e.createElement("rect",{width:64,height:6,x:47,y:30,fill:"#242A45",opacity:.25,rx:3})),e.createElement("g",{transform:"translate(88.47 181.197)"},e.createElement("circle",{cx:16,cy:16,r:16,fill:"#6AC6D6"}),e.createElement("rect",{width:120,height:6,x:47,y:6,fill:"#242A45",opacity:.5,rx:3}),e.createElement("rect",{width:64,height:6,x:47,y:20,fill:"#242A45",opacity:.25,rx:3})),e.createElement("g",{transform:"translate(88.47 237.197)"},e.createElement("circle",{cx:16,cy:16,r:16,fill:"#A47ED4"}),e.createElement("rect",{width:120,height:6,x:47,y:6,fill:"#242A45",opacity:.5,rx:3}),e.createElement("rect",{width:64,height:6,x:47,y:20,fill:"#242A45",opacity:.25,rx:3})),e.createElement("g",{transform:"translate(88.47 293.197)"},e.createElement("circle",{cx:16,cy:16,r:16,fill:"#EC7878"}),e.createElement("rect",{width:120,height:6,x:47,y:6,fill:"#242A45",opacity:.5,rx:3}),e.createElement("rect",{width:64,height:6,x:47,y:20,fill:"#242A45",opacity:.25,rx:3})))))};var lp,cp;function up(){return up=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},up.apply(this,arguments)}const dp=function(t){return e.createElement("svg",up({xmlns:"http://www.w3.org/2000/svg",xmlnsXlink:"http://www.w3.org/1999/xlink",viewBox:"0 0 650 450"},t),lp||(lp=e.createElement("defs",null,e.createElement("filter",{id:"illustration-features-tab-2_svg__c",width:"117.5%",height:"113.7%",x:"-8.8%",y:"-4.9%",filterUnits:"objectBoundingBox"},e.createElement("feOffset",{dy:5,in:"SourceAlpha",result:"shadowOffsetOuter1"}),e.createElement("feGaussianBlur",{in:"shadowOffsetOuter1",result:"shadowBlurOuter1",stdDeviation:5}),e.createElement("feColorMatrix",{in:"shadowBlurOuter1",values:"0 0 0 0 0.285332669 0 0 0 0 0.363695184 0 0 0 0 0.811480978 0 0 0 0.0830692745 0"})),e.createElement("filter",{id:"illustration-features-tab-2_svg__e",width:"139.5%",height:"131%",x:"-19.8%",y:"-13.5%",filterUnits:"objectBoundingBox"},e.createElement("feOffset",{dy:5,in:"SourceAlpha",result:"shadowOffsetOuter1"}),e.createElement("feGaussianBlur",{in:"shadowOffsetOuter1",result:"shadowBlurOuter1",stdDeviation:5}),e.createElement("feColorMatrix",{in:"shadowBlurOuter1",result:"shadowMatrixOuter1",values:"0 0 0 0 0.285332669 0 0 0 0 0.363695184 0 0 0 0 0.811480978 0 0 0 0.0830692745 0"}),e.createElement("feMerge",null,e.createElement("feMergeNode",{in:"shadowMatrixOuter1"}),e.createElement("feMergeNode",{in:"SourceGraphic"}))),e.createElement("filter",{id:"illustration-features-tab-2_svg__f",width:"117.5%",height:"113.7%",x:"-8.8%",y:"-4.9%",filterUnits:"objectBoundingBox"},e.createElement("feOffset",{dy:5,in:"SourceAlpha",result:"shadowOffsetOuter1"}),e.createElement("feGaussianBlur",{in:"shadowOffsetOuter1",result:"shadowBlurOuter1",stdDeviation:5}),e.createElement("feColorMatrix",{in:"shadowBlurOuter1",values:"0 0 0 0 0.285332669 0 0 0 0 0.363695184 0 0 0 0 0.811480978 0 0 0 0.0830692745 0"})),e.createElement("rect",{id:"illustration-features-tab-2_svg__a",width:350,height:346,rx:8}),e.createElement("rect",{id:"illustration-features-tab-2_svg__d",width:200,height:255,rx:8}),e.createElement("rect",{id:"illustration-features-tab-2_svg__g",width:200,height:255,rx:8}))),cp||(cp=e.createElement("g",{fill:"none"},e.createElement("mask",{id:"illustration-features-tab-2_svg__b",fill:"#fff"},e.createElement("use",{xlinkHref:"#illustration-features-tab-2_svg__a"})),e.createElement("use",{xlinkHref:"#illustration-features-tab-2_svg__a",fill:"#E8EAF6"}),e.createElement("g",{mask:"url(#illustration-features-tab-2_svg__b)"},e.createElement("path",{fill:"#242A45",d:"M-3.53.197h547v59h-547z"}),e.createElement("g",{fill:"#FFF",transform:"translate(22.47 14.197)"},e.createElement("circle",{cx:16,cy:16,r:16,opacity:.245}),e.createElement("g",{transform:"translate(47 6)"},e.createElement("rect",{width:120,height:6,opacity:.75,rx:3}),e.createElement("rect",{width:64,height:6,y:14,opacity:.25,rx:3})))),e.createElement("g",{transform:"translate(27 138)"},e.createElement("use",{xlinkHref:"#illustration-features-tab-2_svg__d",fill:"#000",filter:"url(#illustration-features-tab-2_svg__c)"}),e.createElement("use",{xlinkHref:"#illustration-features-tab-2_svg__d",fill:"#FFF"}),e.createElement("g",{transform:"translate(23 29)"},e.createElement("rect",{width:101.317,height:6,x:45.683,y:6,fill:"#242A45",opacity:.5,rx:3}),e.createElement("circle",{cx:16,cy:16,r:16,fill:"#5267DF"}),e.createElement("rect",{width:54.036,height:6,x:45.683,y:20,fill:"#242A45",opacity:.25,rx:3}),e.createElement("g",{transform:"translate(0 56)"},e.createElement("circle",{cx:16,cy:16,r:16,fill:"#5267DF"}),e.createElement("rect",{width:101.317,height:6,x:45.683,y:6,fill:"#242A45",opacity:.5,rx:3}),e.createElement("rect",{width:54.036,height:6,x:45.683,y:20,fill:"#242A45",opacity:.25,rx:3})),e.createElement("g",{transform:"translate(0 112)"},e.createElement("circle",{cx:16,cy:16,r:16,fill:"#5267DF"}),e.createElement("rect",{width:101.317,height:6,x:45.683,y:6,fill:"#242A45",opacity:.5,rx:3}),e.createElement("rect",{width:54.036,height:6,x:45.683,y:20,fill:"#242A45",opacity:.25,rx:3})),e.createElement("g",{transform:"translate(0 168)"},e.createElement("circle",{cx:16,cy:16,r:16,fill:"#5267DF"}),e.createElement("rect",{width:101.317,height:6,x:45.683,y:6,fill:"#242A45",opacity:.5,rx:3}),e.createElement("rect",{width:54.036,height:6,x:45.683,y:20,fill:"#242A45",opacity:.25,rx:3})))),e.createElement("g",{filter:"url(#illustration-features-tab-2_svg__e)",transform:"translate(251 138)"},e.createElement("use",{xlinkHref:"#illustration-features-tab-2_svg__g",fill:"#000",filter:"url(#illustration-features-tab-2_svg__f)"}),e.createElement("use",{xlinkHref:"#illustration-features-tab-2_svg__g",fill:"#FFF"}),e.createElement("g",{transform:"translate(23 29)"},e.createElement("rect",{width:101.317,height:6,x:45.683,y:6,fill:"#242A45",opacity:.5,rx:3}),e.createElement("circle",{cx:16,cy:16,r:16,fill:"#5267DF"}),e.createElement("rect",{width:54.036,height:6,x:45.683,y:20,fill:"#242A45",opacity:.25,rx:3}),e.createElement("g",{transform:"translate(0 56)"},e.createElement("circle",{cx:16,cy:16,r:16,fill:"#FA5959"}),e.createElement("rect",{width:101.317,height:6,x:45.683,y:6,fill:"#242A45",opacity:.5,rx:3}),e.createElement("rect",{width:54.036,height:6,x:45.683,y:20,fill:"#242A45",opacity:.25,rx:3})),e.createElement("g",{transform:"translate(0 112)"},e.createElement("circle",{cx:16,cy:16,r:16,fill:"#5267DF"}),e.createElement("rect",{width:101.317,height:6,x:45.683,y:6,fill:"#242A45",opacity:.5,rx:3}),e.createElement("rect",{width:54.036,height:6,x:45.683,y:20,fill:"#242A45",opacity:.25,rx:3})),e.createElement("g",{transform:"translate(0 168)"},e.createElement("circle",{cx:16,cy:16,r:16,fill:"#5267DF"}),e.createElement("rect",{width:101.317,height:6,x:45.683,y:6,fill:"#242A45",opacity:.5,rx:3}),e.createElement("rect",{width:54.036,height:6,x:45.683,y:20,fill:"#242A45",opacity:.25,rx:3})))),e.createElement("rect",{width:237,height:34,x:27,y:85,fill:"#FFF",rx:8}),e.createElement("g",{stroke:"#5267DF",strokeWidth:20,transform:"translate(305 102)"},e.createElement("circle",{cx:67,cy:67,r:67,fill:"#495DCF",fillOpacity:.2}),e.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"m114 115 49 49"})))))};var fp,pp;function hp(){return hp=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},hp.apply(this,arguments)}const mp=function(t){return e.createElement("svg",hp({xmlns:"http://www.w3.org/2000/svg",xmlnsXlink:"http://www.w3.org/1999/xlink",viewBox:"0 0 650 450"},t),fp||(fp=e.createElement("defs",null,e.createElement("path",{id:"illustration-features-tab-3_svg__c",d:"M0 .048h349.781V296H0z"}),e.createElement("path",{id:"illustration-features-tab-3_svg__e",d:"M0 .048h157.825v219.844H0z"}),e.createElement("rect",{id:"illustration-features-tab-3_svg__a",width:350,height:346,rx:8}))),pp||(pp=e.createElement("g",{fill:"none"},e.createElement("mask",{id:"illustration-features-tab-3_svg__b",fill:"#fff"},e.createElement("use",{xlinkHref:"#illustration-features-tab-3_svg__a"})),e.createElement("use",{xlinkHref:"#illustration-features-tab-3_svg__a",fill:"#E8EAF6"}),e.createElement("g",{mask:"url(#illustration-features-tab-3_svg__b)"},e.createElement("path",{fill:"#242A45",d:"M-3.53.197h547v59h-547z"}),e.createElement("g",{fill:"#FFF",transform:"translate(22.47 14.197)"},e.createElement("circle",{cx:16,cy:16,r:16,opacity:.245}),e.createElement("g",{transform:"translate(47 6)"},e.createElement("rect",{width:120,height:6,opacity:.75,rx:3}),e.createElement("rect",{width:64,height:6,y:14,opacity:.25,rx:3})))),e.createElement("rect",{width:237,height:34,x:27,y:85,fill:"#FFF",rx:8}),e.createElement("rect",{width:237,height:34,x:27,y:133,fill:"#FFF",rx:8}),e.createElement("rect",{width:237,height:34,x:27,y:181,fill:"#FFF",rx:8}),e.createElement("rect",{width:237,height:34,x:27,y:229,fill:"#FFF",rx:8}),e.createElement("rect",{width:237,height:34,x:27,y:277,fill:"#FFF",rx:8}),e.createElement("g",{transform:"matrix(-1 0 0 1 440 83)"},e.createElement("mask",{id:"illustration-features-tab-3_svg__d",fill:"#fff"},e.createElement("use",{xlinkHref:"#illustration-features-tab-3_svg__c"})),e.createElement("path",{fill:"#3A499E",d:"M348.707 250.34c-.67 2.018-1.715 3.998-3.174 5.935-25.202 33.474-119.376 44.632-212.224 37.814-48.476-3.562-82.67-24.526-104.281-43.75a175.95 175.95 0 0 1-13.36-13.222c-4.669-5.145-8.313-10.86-10.91-16.895-7.647-17.778-6.174-38.316 5.123-55.161 9.577-14.276 22.722-24.824 29.513-36.543C52.326 106.2-16.043 49.782 28.448 14.138 44.152 1.554 77.608-1.35 114.11.602c44.428 2.378 93.365 11.955 120.284 20.045 55.712 16.737 90.58 40.98 98.539 68.256 7.958 27.276-13.311 39.618-31.88 65.654-17.495 24.526 58.553 62.997 47.654 95.783",mask:"url(#illustration-features-tab-3_svg__d)"}),e.createElement("path",{fill:"#306299",d:"M254.549 90.872 237.564 88 235 103.799 256 110z"}),e.createElement("path",{fill:"#FA9E89",d:"M237 89.118S223.824 88.77 210 83l6.496 12.254L235.249 101z"}),e.createElement("g",{transform:"translate(2 2)"},e.createElement("mask",{id:"illustration-features-tab-3_svg__f",fill:"#fff"},e.createElement("use",{xlinkHref:"#illustration-features-tab-3_svg__e"})),e.createElement("path",{fill:"#FFF",d:"M157.066 52.186C148.954 92.345 11.06 153.876 4.43 219.892c-7.118-17.752-5.747-38.258 4.77-55.078 8.914-14.255 21.15-24.787 27.471-36.489 12.039-22.282-51.605-78.618-10.19-114.208C41.1 1.552 72.242-1.348 106.221.602c10.344 2.364 58.164 15.331 50.845 51.584",mask:"url(#illustration-features-tab-3_svg__f)",opacity:.152})),e.createElement("path",{fill:"#000",d:"M351.82 243c.985 7.866-2.34 13.336-3.64 15.227-22.429 32.672-144.494 43.563-227.13 36.908-43.146-3.476-78.505-25.715-100.05-50.22z",opacity:.149}),e.createElement("path",{fill:"#000",d:"M73.627 246.812s-10.077.61-9.922 3.66c.155 3.05 6.511 9.758 6.511 9.758l-9.509-3.405L32 255.732l3.1 2.669s23.127 1.067 24.16 1.88c1.034.813 14.264 10.776 16.537 11.182 2.274.407 146.688.225 146.688.225s14.858.589 17.339-3.986c2.48-4.574 11.472-4.27 13.953-.305 2.48 3.965 2.136 18.603 2.136 18.603s6.793-1.773 7.166-1.931C286.644 274.106 313 243 313 243z",opacity:.128}),e.createElement("path",{fill:"#162F44",d:"m43 207.695 14.45 49.163s2.056 2.444 3.55.18L51.286 207zM23.134 206 16 239.138 19.397 243 29 206.954z"}),e.createElement("path",{fill:"#F4F2F9",d:"m235.493 217.082 6.025 34.2.999 5.669-2.192.322-.156.024-4.788.703s-15.971-39.344-17.33-48.787C216.69 199.77 243.196 162 243.196 162l28.768 2.448c.761 8.219-10.744 23.711-21.027 35.77-8.101 9.499-15.444 16.864-15.444 16.864"}),e.createElement("path",{fill:"#E0DFEA",d:"m235.88 215.535 6.877 39.767-2.146.321-.073.377-.08-.352c-.875-3.83-11.14-37.737-11.452-44.648-.333-7.326 14.027-30 14.027-30L251 198.714c-7.93 9.474-15.12 16.82-15.12 16.82"}),e.createElement("path",{fill:"#6397D9",d:"m274 166-28.667-2.387L244 115.886S251 91 258.667 91c4.553 0 8.986 1.804 11.7 6.195 1.853 3.003 2.903 7.22 2.633 12.896-.61 12.777.73 48.907.967 55.022.02.577.033.887.033.887"}),e.createElement("path",{fill:"#8BBFF7",d:"m266.115 162.276.538-56.818L260 91.938l7.763-.938 2.729 3.21c1.79 3.003 2.803 7.22 2.542 12.894-.589 12.774.737 49.782.966 55.896z"}),e.createElement("path",{fill:"#306299",d:"m266 107-21.017 40-.546-17.991-.437-14.598L261.524 107z"}),e.createElement("path",{fill:"#FFF",d:"M212.329 270H83.67c-4.789 0-8.671-3.908-8.671-8.73V40.73c0-4.822 3.882-8.73 8.671-8.73h128.66c4.789 0 8.671 3.908 8.671 8.73v220.54c0 4.822-3.882 8.73-8.671 8.73"}),e.createElement("path",{fill:"#E4DCF1",d:"M213 63.29v88.42c0 1.818-1.456 3.29-3.253 3.29H86.253c-1.797 0-3.253-1.472-3.253-3.29V63.29c0-1.818 1.456-3.29 3.253-3.29h123.494c1.797 0 3.253 1.472 3.253 3.29"}),e.createElement("path",{fill:"#8E2B43",d:"m148.853 84-1.552 1.183L144 99.554l.071 2.367 5.227.079a1.97 1.97 0 0 0 1.03-.25c1.495-.878 2.133-3.325 1.308-5.493-.444-1.166-1.581-3.23-1.713-4.142-.314-2.184-1.07-8.115-1.07-8.115"}),e.createElement("path",{fill:"#4EC9B4",d:"m176 158-54.224-.208-1.795-.006s-6.487-30.649 4.016-42.461c2.558-2.874 5.883-4.993 9.506-6.37 11.273-4.297 25.453-1.455 28.493 7.966C166.012 129.372 176 158 176 158"}),e.createElement("path",{fill:"#FA9E89",d:"M133.84 109.489s2.215 6.026 7.103 7.294c4.888 1.269 10.489-3.224 10.03-8.457 0 0-4.684-.687-5.447-2.96-.928-2.76-.306-2.854-.306-2.854s1.833-3.49 2.444-6.026c.611-2.537-.305-12.37-4.582-13.32-2.705-.602-7.027.317-10.082 4.757 0 0 1.528 8.563 3.666 12.686 2.139 4.123 3.208 6.026-2.826 8.88"}),e.createElement("path",{fill:"#F4F2F9",d:"M209.833 33.013 77 219.239v42.244c0 4.704 3.7 8.517 8.263 8.517h120.164c5.287 0 9.573-4.418 9.573-9.869V36.827c0-2.929-2.33-3.956-5.167-3.814",opacity:.184}),e.createElement("path",{fill:"#4EC9B4",d:"M170 139.442 176.982 109 188 110.816 177.316 155z"}),e.createElement("path",{fill:"#FA9E89",d:"m179.2 108.137.6-3.106s-1.8-1.184-1.5-2.959c.3-1.775-.3-5.917-.3-5.917s.957-.647 1.575.518c.44.829 1.125 2.737 1.125 2.737s2.296-6.166 2.826-7.79c.225-.691.452-1.767.975-1.603.275.086.175.715.128 1.33-.14 1.844-.928 4.784-.928 4.784l.4.234 1.663-5.276c.073-.256.193-.644.462-.665.238-.02.475.11.475.702 0 1.184-1.275 6.077-1.275 6.077l.319.219 1.935-4.278c.133-.323.613-.295.695.044.065.268.046.65-.173 1.192-.6 1.48-1.2 3.846-1.2 3.846l.15.173 1.05-2.17c.188-.347.649-.57.783-.2.188.518-1.458 4.97-1.458 5.267 0 .296-1.126 4.326-2.326 4.622-1.2.296-1.275 3.082-1.275 3.082z"}),e.createElement("path",{fill:"#FFDEDD",d:"M109.649 181H87.35c-1.298 0-2.351-1.072-2.351-2.394v-3.212c0-1.322 1.053-2.394 2.351-2.394h22.298c1.298 0 2.351 1.072 2.351 2.394v3.212c0 1.322-1.053 2.394-2.351 2.394m32 0H119.35c-1.298 0-2.351-1.072-2.351-2.394v-3.212c0-1.322 1.053-2.394 2.351-2.394h22.298c1.298 0 2.351 1.072 2.351 2.394v3.212c0 1.322-1.053 2.394-2.351 2.394m34 0H153.35c-1.298 0-2.351-1.072-2.351-2.394v-3.212c0-1.322 1.053-2.394 2.351-2.394h22.297c1.299 0 2.352 1.072 2.352 2.394v3.212c0 1.322-1.053 2.394-2.352 2.394m32 0H185.35c-1.298 0-2.351-1.072-2.351-2.394v-3.212c0-1.322 1.053-2.394 2.351-2.394h22.298c1.298 0 2.351 1.072 2.351 2.394v3.212c0 1.322-1.053 2.394-2.351 2.394"}),e.createElement("path",{fill:"#F4F2F9",d:"M205.453 200H87.547C86.14 200 85 198.92 85 197.59v-3.18c0-1.33 1.14-2.41 2.547-2.41h117.906c1.407 0 2.547 1.08 2.547 2.41v3.18c0 1.33-1.14 2.41-2.547 2.41M87.547 216C86.14 216 85 214.92 85 213.59v-3.18c0-1.33 1.14-2.41 2.547-2.41h117.906c1.407 0 2.547 1.08 2.547 2.41v3.18c0 1.33-1.14 2.41-2.547 2.41zm117.906 16H87.547C86.14 232 85 230.92 85 229.59v-3.18c0-1.33 1.14-2.41 2.547-2.41h117.906c1.407 0 2.547 1.08 2.547 2.41v3.18c0 1.33-1.14 2.41-2.547 2.41m0 13H87.547C86.14 245 85 243.92 85 242.59v-3.18c0-1.33 1.14-2.41 2.547-2.41h117.906c1.407 0 2.547 1.08 2.547 2.41v3.18c0 1.33-1.14 2.41-2.547 2.41"}),e.createElement("path",{fill:"#FC516B",d:"M130.778 80.321s6.3-8.848 18.19-3.725c11.888 5.122-1.017 13.504-1.017 13.504s-.254-3.26-2.134-4.191l.153 2.897-6.656 1.165-1.067-2.794-.686 3.182-3.353 1.241s2.743 9.624 4.344 11.021c0 0 .686 2.25.457 2.716-.228.466-10.364 3.027-11.66.699-1.296-2.328 1.372-5.588 2.21-7.761.838-2.173-1.524-13.711 1.22-17.954"}),e.createElement("path",{fill:"#E4DCF1",d:"M101.648 56H84.352C83.053 56 82 54.657 82 53s1.053-3 2.352-3h17.296c1.299 0 2.352 1.343 2.352 3s-1.053 3-2.352 3"}),e.createElement("path",{fill:"#44AD99",d:"M128 128s2.664 19.286 5.71 27h16.06s2.648-8.138-10.047-10.8C130.893 142.349 128 128 128 128m31.611-5s3.26 10 2.648 13c-.61 3-3.259 5.2-3.259 7.2s1.63 9.6 1.63 9.6l9.37.2s-1.556-.266-5.093-3.05c-5.398-4.25-.764-13.625-1.91-18.95-.6-2.794-3.386-8-3.386-8M170 138.772s.213 8.383 1.915 7.093c1.702-1.29.638-13.757 2.127-18.056 1.49-4.3 5.958-18.057 5.958-18.057l-3.83-.752z"}),e.createElement("path",{fill:"#FA9E89",d:"M195.377 100.475s1.576.692 3.5 3.046c.636.78 4.03 2.021 4.833 2.988 11.645 14.02 27.196 24.841 37.163 20.533C253.603 121.54 256 116.424 256 116.424l-8.414-11.362s-9.663 14.759-17.434 10.739c-7.772-4.02-23.092-14.557-23.092-14.557l-.406-6.464s-.895-.24-1.324.995c-.43 1.236-.45 2.304-.45 2.304l-6.049-7.024s-1.162-.36-.808.769c.354 1.13 2.491 4.368 2.491 4.368s.22.616-.243.335c-.54-.327-4.766-5.092-4.766-5.092s-.973-.064-.576.866c.307.717 2.865 4.09 3.73 5.354.258.376-.282.235-.282.235l-3.496-2.97c-.473-.319-.963-.213-.87.368.075.46 1.027 1.519 1.593 1.939 1.414 1.046 2.4 2.952 2.4 2.952l-3.044-1.1s-.595.528.417 1.396M267 63.49l-3.85 28.32L250.504 94s.64-.668 1.372-1.56c.748-.907 1.59-2.05 1.963-2.966.85-2.104.856-4.066.856-4.066s-5.608.633-6.477-2.595c-.872-3.232 1.143-18.284 1.143-18.284S251.864 55.07 267 63.49"}),e.createElement("path",{fill:"#261F27",d:"M256.387 63.812s-6.236 4.71-12.219.698c0 0 3.792-.35 4.972-2.268 0 0-2.36.61-5.14-3.314 0 0 4.887.698 6.572-.785 1.686-1.483 10.28-3.838 15.42-.262 5.141 3.576 5.057 6.193 5.057 6.193s3.033 1.133 2.95 2.878c-.085 1.744-7.5 16.048-7.5 16.048l-1.601-6.367s1.264.378 2.022-2.587c.758-2.966-2.528-1.687-2.865-1.076-.337.61-2.528-4.187-2.528-4.187l.337-2.79s1.096-3.577-5.477-2.18"}),e.createElement("path",{fill:"#FFF",d:"M268.214 196.384c-3.591 14.487 3.05 72.409 3.05 72.409L264.766 270c-26.16-60.015-20.176-109-20.176-109l29.41 2.414s-.075-1.224-.106-.934c-.338 3.008-2.408 20.689-5.68 33.904"}),e.createElement("path",{fill:"#6397D9",d:"m235.73 254.076-7.553 5.859s-2.975-.359-3.548 1.016c-.572 1.375-.629 2.93-.629 2.93l7.896.119L245 258.799 242.94 253zm29.82 17.264s-2.672 4.322-5.365 7.852c-.905 1.186-3.117 1.701-3.978 4.595-.74 2.49.74 4.213.74 4.213s4.965-.894 8.419-3.957c3.453-3.064 8.634-8.937 8.634-8.937L272.582 270z"}),e.createElement("path",{fill:"#224A7D",d:"M66 199c0 3.866-12.984 7-29 7s-29-3.134-29-7 12.984-7 29-7 29 3.134 29 7"}),e.createElement("path",{fill:"#6397D9",d:"M66 198c0 3.866-12.984 7-29 7s-29-3.134-29-7 12.984-7 29-7 29 3.134 29 7"}),e.createElement("path",{fill:"#162F44",d:"M45 194c0 1.657-5.373 3-12 3s-12-1.343-12-3 5.373-3 12-3 12 1.343 12 3m-37 3v3.986s.07 2.464 5 4.014l-1.179-4.318S8.358 199.187 8 197"}),e.createElement("path",{fill:"#8CC5F2",d:"M65.994 197v4.085s.39 2.043-4.994 3.915l1.652-4.766s2.86-1.277 3.342-3.234"}),e.createElement("path",{fill:"#FC516B",d:"m47 184.038-1.968 7.69c-.488 1.914-2.423 3.272-4.653 3.272h-4.233c-1.585 0-3.025-.685-3.9-1.772a4.02 4.02 0 0 1-.692-1.278l-1.706-5.313L29 184z"}),e.createElement("path",{fill:"#9B293F",d:"M47 183c0 .552-4.03 1-9 1s-9-.448-9-1 4.03-1 9-1 9 .448 9 1"}),e.createElement("path",{fill:"#F995A9",d:"M34.594 193.657c.354.137.688.253 1 .343l-2.11-.324a4.41 4.41 0 0 1-.657-1.35l-1.616-5.608c-.081-.27-.211-.7-.211-.718 0 0 4.215 1.242 8 .818-1.231.164-4.31.412-6.168.32a.724.724 0 0 0-.764.815c.234 1.657.905 5.074 2.526 5.704"}),e.createElement("path",{fill:"#51A595",d:"m39 180.901-.679 3.087-.494.012s-.028-3.099-3.674-5c-3.65-1.9-3.127-9-3.127-9l.003.009c.088.183 1.488 3.1 2.549 3.29 1.094.202 1.773 1.95 1.773 1.95s.522.75 1.147.6c.626-.15 1.251 1.5 1.251 1.5l.207 1.752z"}),e.createElement("path",{fill:"#4EC9B4",d:"M34.007 186.987s-.7-23.436 11.6-29.987c0 0 3.501 1.352-.6 6.967-4.1 5.615-.799 9.67-2.6 11.127-1.8 1.455-4.4 2.391-4 4.263.4 1.872-.1 3.744-.9 3.952-.8.207-2.6 1.312-2.88 3.691z"}),e.createElement("path",{fill:"#41877A",d:"m34 182.8-.04 1.188-.538.012s-.03-3.099-3.994-5c-3.968-1.9-3.4-9-3.4-9l.004.009.336 1.068c0 6.45 3.723 7.787 5.212 8.648 1.489.861 2.42 3.075 2.42 3.075"}),e.createElement("path",{fill:"#306299",d:"M253.815 94.105s10.552.172 11.494-1.105l.691 1.898s-8.36 4.557-14 2.624z"}),e.createElement("path",{fill:"#8CC5F2",d:"M239 107.916 251.588 122s16.822-15.082 16.404-19.81c-.417-4.727-6.58-14.515-16.034-5.523C242.76 105.415 239 107.916 239 107.916"}),e.createElement("path",{fill:"#F4F2F9",d:"m271.435 269.654-2.566.346s-12.026-42.47-8.07-73.847c1.189-9.434 5.344-33.153 5.344-33.153l7.857.737c-.318 3.023-2.357 19.855-5.426 33.137-3.367 14.562 2.86 72.78 2.86 72.78"}),e.createElement("path",{fill:"#E6846F",d:"M257.747 92.558c-1.488.324-2.299.427-2.747.442.698-.966 1.484-2.182 1.832-3.158.793-2.241.799-4.33.799-4.33s2.971-.782 3.277-.413c.304.368 0 6.77-3.161 7.459"}),e.createElement("path",{fill:"#CEC3E2",d:"M112 96c0 10.492-8.048 19-17.973 19-4.156 0-7.981-1.491-11.027-3.996V80.996C86.046 78.49 89.87 77 94.027 77 103.952 77 112 85.508 112 96"}),e.createElement("path",{fill:"#C3B8D8",d:"M112 96.5c0 10.216-7.493 18.5-16.734 18.5-3.87 0-7.43-1.452-10.266-3.89V81.89C87.835 79.453 91.397 78 95.266 78 104.507 78 112 86.284 112 96.5"}),e.createElement("path",{fill:"#44AD99",d:"M138 113.096s-1.985-1.104-2.298-1.305c-.314-.199-4.39.902-9.826 6.516-5.433 5.614-.73 10.324-3.028 13.33-2.301 3.008-.107 9.323 1.044 13.635 1.15 4.31 0 9.722 0 9.722l-.06.006-1.821-.006s-6.584-28.868 4.075-39.995c2.596-2.706 5.97-4.703 9.647-5.999z"})))))};function gp(e){const t=e.target,{tagName:n,isContentEditable:r}=t;return"INPUT"!==n&&"TEXTAREA"!==n&&!0!==r}function vp(t={}){const{ref:n,isDisabled:r,isFocusable:o,clickOnEnter:a=!0,clickOnSpace:i=!0,onMouseDown:s,onMouseUp:l,onClick:c,onKeyDown:d,onKeyUp:f,tabIndex:p,onMouseOver:h,onMouseLeave:m,...g}=t,[v,y]=(0,e.useState)(!0),[b,x]=(0,e.useState)(!1),w=function(){const t=(0,e.useRef)(new Map),n=t.current,r=(0,e.useCallback)(((e,n,r,o)=>{t.current.set(r,{type:n,el:e,options:o}),e.addEventListener(n,r,o)}),[]),o=(0,e.useCallback)(((e,n,r,o)=>{e.removeEventListener(n,r,o),t.current.delete(r)}),[]);return(0,e.useEffect)((()=>()=>{n.forEach(((e,t)=>{o(e.el,e.type,t,e.options)}))}),[o,n]),{add:r,remove:o}}(),k=v?p:p||0,S=r&&!o,E=(0,e.useCallback)((e=>{if(r)return e.stopPropagation(),void e.preventDefault();e.currentTarget.focus(),null==c||c(e)}),[r,c]),C=(0,e.useCallback)((e=>{b&&gp(e)&&(e.preventDefault(),e.stopPropagation(),x(!1),w.remove(document,"keyup",C,!1))}),[b,w]),_=(0,e.useCallback)((e=>{if(null==d||d(e),r||e.defaultPrevented||e.metaKey)return;if(!gp(e.nativeEvent)||v)return;const t=a&&"Enter"===e.key;i&&" "===e.key&&(e.preventDefault(),x(!0)),t&&(e.preventDefault(),e.currentTarget.click()),w.add(document,"keyup",C,!1)}),[r,v,d,a,i,w,C]),P=(0,e.useCallback)((e=>{null==f||f(e),r||e.defaultPrevented||e.metaKey||gp(e.nativeEvent)&&!v&&i&&" "===e.key&&(e.preventDefault(),x(!1),e.currentTarget.click())}),[i,v,r,f]),A=(0,e.useCallback)((e=>{0===e.button&&(x(!1),w.remove(document,"mouseup",A,!1))}),[w]),T=(0,e.useCallback)((e=>{if(0===e.button){if(r)return e.stopPropagation(),void e.preventDefault();v||x(!0),e.currentTarget.focus({preventScroll:!0}),w.add(document,"mouseup",A,!1),null==s||s(e)}}),[r,v,s,w,A]),z=(0,e.useCallback)((e=>{0===e.button&&(v||x(!1),null==l||l(e))}),[l,v]),M=(0,e.useCallback)((e=>{r?e.preventDefault():null==h||h(e)}),[r,h]),F=(0,e.useCallback)((e=>{b&&(e.preventDefault(),x(!1)),null==m||m(e)}),[b,m]),O=vr(n,(e=>{e&&"BUTTON"!==e.tagName&&y(!1)}));return v?{...g,ref:O,type:"button","aria-disabled":S?void 0:r,disabled:S,onClick:E,onMouseDown:s,onMouseUp:l,onKeyUp:f,onKeyDown:d,onMouseOver:h,onMouseLeave:m}:{...g,ref:O,role:"button","data-active":u(b),"aria-disabled":r?"true":void 0,tabIndex:S?void 0:k,onClick:E,onMouseDown:T,onMouseUp:z,onKeyUp:P,onKeyDown:_,onMouseOver:M,onMouseLeave:F}}var yp=Object.defineProperty,bp=(e,t,n)=>(((e,t,n)=>{t in e?yp(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n})(e,"symbol"!=typeof t?t+"":t,n),n);function xp(e){return e.sort(((e,t)=>{const n=e.compareDocumentPosition(t);if(n&Node.DOCUMENT_POSITION_FOLLOWING||n&Node.DOCUMENT_POSITION_CONTAINED_BY)return-1;if(n&Node.DOCUMENT_POSITION_PRECEDING||n&Node.DOCUMENT_POSITION_CONTAINS)return 1;if(n&Node.DOCUMENT_POSITION_DISCONNECTED||n&Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC)throw Error("Cannot sort the given nodes.");return 0}))}function wp(e,t,n){let r=e+1;return n&&r>=t&&(r=0),r}function kp(e,t,n){let r=e-1;return n&&r<0&&(r=t),r}var Sp="undefined"!=typeof window?e.useLayoutEffect:e.useEffect,Ep=e=>e,Cp=class{constructor(){bp(this,"descendants",new Map),bp(this,"register",(e=>{var t;if(null!=e)return"object"==typeof(t=e)&&"nodeType"in t&&t.nodeType===Node.ELEMENT_NODE?this.registerNode(e):t=>{this.registerNode(t,e)}})),bp(this,"unregister",(e=>{this.descendants.delete(e);const t=xp(Array.from(this.descendants.keys()));this.assignIndex(t)})),bp(this,"destroy",(()=>{this.descendants.clear()})),bp(this,"assignIndex",(e=>{this.descendants.forEach((t=>{const n=e.indexOf(t.node);t.index=n,t.node.dataset.index=t.index.toString()}))})),bp(this,"count",(()=>this.descendants.size)),bp(this,"enabledCount",(()=>this.enabledValues().length)),bp(this,"values",(()=>Array.from(this.descendants.values()).sort(((e,t)=>e.index-t.index)))),bp(this,"enabledValues",(()=>this.values().filter((e=>!e.disabled)))),bp(this,"item",(e=>{if(0!==this.count())return this.values()[e]})),bp(this,"enabledItem",(e=>{if(0!==this.enabledCount())return this.enabledValues()[e]})),bp(this,"first",(()=>this.item(0))),bp(this,"firstEnabled",(()=>this.enabledItem(0))),bp(this,"last",(()=>this.item(this.descendants.size-1))),bp(this,"lastEnabled",(()=>{const e=this.enabledValues().length-1;return this.enabledItem(e)})),bp(this,"indexOf",(e=>{var t,n;return e&&null!=(n=null==(t=this.descendants.get(e))?void 0:t.index)?n:-1})),bp(this,"enabledIndexOf",(e=>null==e?-1:this.enabledValues().findIndex((t=>t.node.isSameNode(e))))),bp(this,"next",((e,t=!0)=>{const n=wp(e,this.count(),t);return this.item(n)})),bp(this,"nextEnabled",((e,t=!0)=>{const n=this.item(e);if(!n)return;const r=wp(this.enabledIndexOf(n.node),this.enabledCount(),t);return this.enabledItem(r)})),bp(this,"prev",((e,t=!0)=>{const n=kp(e,this.count()-1,t);return this.item(n)})),bp(this,"prevEnabled",((e,t=!0)=>{const n=this.item(e);if(!n)return;const r=kp(this.enabledIndexOf(n.node),this.enabledCount()-1,t);return this.enabledItem(r)})),bp(this,"registerNode",((e,t)=>{if(!e||this.descendants.has(e))return;const n=xp(Array.from(this.descendants.keys()).concat(e));(null==t?void 0:t.disabled)&&(t.disabled=!!t.disabled);const r={node:e,index:-1,...t};this.descendants.set(e,r),this.assignIndex(n)}))}},[_p,Pp]=rr({name:"DescendantsProvider",errorMessage:"useDescendantsContext must be used within DescendantsProvider"});function Ap(){return[Ep(_p),()=>Ep(Pp()),()=>function(){const t=(0,e.useRef)(new Cp);return Sp((()=>()=>t.current.destroy())),t.current}(),t=>function(t){const n=Pp(),[r,o]=(0,e.useState)(-1),a=(0,e.useRef)(null);Sp((()=>()=>{a.current&&n.unregister(a.current)}),[]),Sp((()=>{if(!a.current)return;const e=Number(a.current.dataset.index);r==e||Number.isNaN(e)||o(e)}));const i=Ep(t?n.register(t):n.register);return{descendants:n,index:r,enabledIndex:n.enabledIndexOf(a.current),register:vr(i,a)}}(t)]}function Tp(t,n=[]){const r=(0,e.useRef)(t);return(0,e.useEffect)((()=>{r.current=t})),(0,e.useCallback)(((...e)=>{var t;return null==(t=r.current)?void 0:t.call(r,...e)}),n)}function zp(t){const{value:n,defaultValue:r,onChange:o,shouldUpdate:a=((e,t)=>e!==t)}=t,i=Tp(o),s=Tp(a),[l,c]=(0,e.useState)(r),u=void 0!==n,d=u?n:l,f=Tp((e=>{const t="function"==typeof e?e(d):e;s(d,t)&&(u||c(t),i(t))}),[u,i,d,s]);return[d,f]}var[Mp,Fp,Op,Rp]=Ap(),[jp,Ip]=rr({name:"TabsContext",errorMessage:"useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />"}),[Np,Dp]=rr({});function Lp(e,t){return`${e}--tab-${t}`}function Bp(e,t){return`${e}--tabpanel-${t}`}var[$p,Vp]=rr({name:"TabsStylesContext",errorMessage:"useTabsStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Tabs />\" "}),Wp=r((function(t,n){const r=pr("Tabs",t),{children:o,className:i,...s}=Ge(t),{htmlProps:l,descendants:c,...u}=function(t){var n;const{defaultIndex:r,onChange:o,index:a,isManual:i,isLazy:s,lazyBehavior:l="unmount",orientation:c="horizontal",direction:u="ltr",...d}=t,[f,p]=(0,e.useState)(null!=r?r:0),[h,m]=zp({defaultValue:null!=r?r:0,value:a,onChange:o});(0,e.useEffect)((()=>{null!=a&&p(a)}),[a]);const g=Op(),v=(0,e.useId)();return{id:`tabs-${null!=(n=t.id)?n:v}`,selectedIndex:h,focusedIndex:f,setSelectedIndex:m,setFocusedIndex:p,isManual:i,isLazy:s,lazyBehavior:l,orientation:c,descendants:g,direction:u,htmlProps:d}}(s),d=(0,e.useMemo)((()=>u),[u]),{isFitted:f,...p}=l,h={position:"relative",...r.root};return(0,qn.jsx)(Mp,{value:c,children:(0,qn.jsx)(jp,{value:d,children:(0,qn.jsx)($p,{value:r,children:(0,qn.jsx)(Un.div,{className:a("chakra-tabs",i),ref:n,...p,__css:h,children:o})})})})}));Wp.displayName="Tabs";var Hp=r((function(t,n){const r=function(t){const{focusedIndex:n,orientation:r,direction:o}=Ip(),a=Fp(),i=(0,e.useCallback)((e=>{const t=()=>{var e;const t=a.nextEnabled(n);t&&(null==(e=t.node)||e.focus())},i=()=>{var e;const t=a.prevEnabled(n);t&&(null==(e=t.node)||e.focus())},s="horizontal"===r,l="vertical"===r,c=e.key,u={["ltr"===o?"ArrowLeft":"ArrowRight"]:()=>s&&i(),["ltr"===o?"ArrowRight":"ArrowLeft"]:()=>s&&t(),ArrowDown:()=>l&&t(),ArrowUp:()=>l&&i(),Home:()=>{var e;const t=a.firstEnabled();t&&(null==(e=t.node)||e.focus())},End:()=>{var e;const t=a.lastEnabled();t&&(null==(e=t.node)||e.focus())}},d=u[c];d&&(e.preventDefault(),d(e))}),[a,n,r,o]);return{...t,role:"tablist","aria-orientation":r,onKeyDown:f(t.onKeyDown,i)}}({...t,ref:n}),o={display:"flex",...Vp().tablist};return(0,qn.jsx)(Un.div,{...r,className:a("chakra-tabs__tablist",t.className),__css:o})}));Hp.displayName="TabList";var Up=r((function(e,t){const n=Vp(),r=function(e){const{isDisabled:t=!1,isFocusable:n=!1,...r}=e,{setSelectedIndex:o,isManual:a,id:i,setFocusedIndex:s,selectedIndex:l}=Ip(),{index:c,register:u}=Rp({disabled:t&&!n}),d=c===l;return{...vp({...r,ref:vr(u,e.ref),isDisabled:t,isFocusable:n,onClick:f(e.onClick,(()=>{o(c)}))}),id:Lp(i,c),role:"tab",tabIndex:d?0:-1,type:"button","aria-selected":d,"aria-controls":Bp(i,c),onFocus:t?void 0:f(e.onFocus,(()=>{s(c),!a&&(!t||!n)&&o(c)}))}}({...e,ref:t}),o={outline:"0",display:"flex",alignItems:"center",justifyContent:"center",...n.tab};return(0,qn.jsx)(Un.button,{...r,className:a("chakra-tabs__tab",e.className),__css:o})}));Up.displayName="Tab";var qp=r((function(t,n){const r=function(t){const n=Ip(),{id:r,selectedIndex:o}=n,a=tr(t.children).map(((t,n)=>(0,e.createElement)(Np,{key:n,value:{isSelected:n===o,id:Bp(r,n),tabId:Lp(r,n),selectedIndex:o}},t)));return{...t,children:a}}(t),o=Vp();return(0,qn.jsx)(Un.div,{...r,width:"100%",ref:n,className:a("chakra-tabs__tab-panels",t.className),__css:o.tabpanels})}));qp.displayName="TabPanels";var Gp,Yp,Xp=r((function(t,n){const r=function(t){const{children:n,...r}=t,{isLazy:o,lazyBehavior:a}=Ip(),{isSelected:i,id:s,tabId:l}=Dp(),c=(0,e.useRef)(!1);i&&(c.current=!0);const u=function(e){const{wasSelected:t,enabled:n,isSelected:r,mode:o="unmount"}=e;return!n||!!r||!("keepMounted"!==o||!t)}({wasSelected:c.current,isSelected:i,enabled:o,mode:a});return{tabIndex:0,...r,children:u?n:null,role:"tabpanel","aria-labelledby":l,hidden:!i,id:s}}({...t,ref:n}),o=Vp();return(0,qn.jsx)(Un.div,{outline:"0",...r,className:a("chakra-tabs__tab-panel",t.className),__css:o.tabpanel})}));function Qp(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}Xp.displayName="TabPanel";var Kp=pi.div(Gp||(Gp=Qp(["\n  background-color: ",";\n  height: 35vh;\n  border-top-right-radius: 250px;\n  border-bottom-right-radius: 250px;\n  margin-top: -30vh;\n  z-index: -1;\n  width: 40vw;\n  @media (max-width: 768px) {\n    width: 60vw;\n    max-height: 150px;\n    min-height: 150px;\n    margin-top: -400px;\n    height: 45vh;\n  }\n"])),Qf),Zp=pi.div(Yp||(Yp=Qp(['\n  max-width: 800px;\n  width: 40vw;\n  height: auto;\n  @media (max-width: 768px) {\n    width: 90vw;\n    margin-right: auto;\n    margin-left: auto;\n  }\n  svg {\n    width: 100%;\n    height: 100%;\n    overflow: "visible";\n  }\n'])));const Jp=function(t){var n=t.title,r=t.content,o=t.imageComponent;return e.createElement(e.Fragment,null,e.createElement(nr,{direction:{base:"column",md:"row"},maxW:"1440px",mx:"auto"},e.createElement(Zp,null,o),e.createElement(Gn,{pl:4,pr:4,flex:1,align:"center",justify:"center"},e.createElement(nr,{spacing:6,w:"full",maxW:"lg"},e.createElement(Oi,{as:"h3",fontWeight:500,fontSize:{base:"24px",md:"30px"},lineHeight:{base:"30px",md:"45px"},align:{base:"center",md:"left"},mt:{base:"50px",md:"0"}},n),e.createElement(Oi,{as:"p",fontSize:"lg",align:{base:"center",md:"left"}},r),e.createElement(nr,{direction:{base:"row",md:"row"},spacing:4,mx:{base:"auto",md:"0"}},e.createElement(Ri,{text:"More Info"}))))),e.createElement(Gn,{justify:"start"},e.createElement(Kp,null)))};var eh;function th(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var nh=pi.div(eh||(eh=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(['\n  display: flex;\n  justify-content: center;\n  text-align: center;\n  @media (max-width: 768px) {\n    display: block;\n  }\n  .chakra-tabs__tab {\n    color: gray;\n    width: 200px;\n    text-align: center;\n    &[aria-selected="true"] {\n      border-color: hsl(0, 94%, 66%);\n      color: hsl(229, 31%, 21%);\n    }\n  }\n'])));const rh=function(){var t,n,r=(t=(0,e.useState)(0),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,s=[],l=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=a.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){c=!0,o=e}finally{try{if(!l&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return s}}(t,n)||function(e,t){if(e){if("string"==typeof e)return th(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?th(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=(r[0],r[1]);return e.createElement(Wp,{"data-testid":"tabs",id:"features",onChange:function(e){return o(e)},mt:150},e.createElement(Oi,{as:"h3",fontWeight:500,fontSize:{base:"24px",md:"30px"},lineHeight:{base:"30px",md:"45px"},align:"center"},"Features"),e.createElement(Gn,{pl:4,pr:4,flex:1,align:"center",justify:"center"},e.createElement(Oi,{as:"p",fontSize:"lg",align:"center",maxW:"500px",pt:30},"Our aim is to make it quick and for you to access your favourite websites. Your bookmarks sync between your devices so you can access them on the go.")),e.createElement(Hp,{w:"fit-content",my:"50px",mx:"auto"},e.createElement(nr,{direction:{base:"column",md:"row"}},e.createElement(nh,null,e.createElement(Up,null,"Simple Bookmarking"),e.createElement(Up,null,"Speedy Searching"),e.createElement(Up,null,"Easy Sharing")))),e.createElement(qp,null,e.createElement(Xp,{p:0,pt:70},e.createElement(Jp,{title:"Bookmark in one click",content:"A clean and simple interface to organize your favourite websites. Open a new browser tab and see your sites load instntly. Try it for free.",imageComponent:e.createElement(sp,null)})),e.createElement(Xp,{p:0,pt:70},e.createElement(Jp,{title:" Intelligent search",content:" Our powerful search feature will help you find saved sites in no time at all. No need to trawl through all of your bookmarks.",imageComponent:e.createElement(dp,null)})),e.createElement(Xp,{p:0,pt:70},e.createElement(Jp,{title:"Share your bookmarks",content:"Easly share your bookmarks and collections with others. Create a shareable link that you can send at tke click of a button.",imageComponent:e.createElement(mp,null)}))))};var oh;function ah(){return ah=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ah.apply(this,arguments)}const ih=function(t){return e.createElement("svg",ah({xmlns:"http://www.w3.org/2000/svg",width:102,height:100},t),oh||(oh=e.createElement("g",{fill:"none"},e.createElement("path",{fill:"#E16B5A",d:"M50.768.01s30.01-1.325 45.916 28.249H48.217s-9.154-.296-16.957 10.594c-2.25 4.561-4.65 9.27-1.95 18.538-3.9-6.472-20.708-35.164-20.708-35.164S20.457 1.186 50.768.009z"}),e.createElement("path",{fill:"#FFD464",d:"M95.122 75.095S81.284 101.238 47.21 99.952C51.414 92.82 71.45 58.8 71.45 58.8s4.837-7.626-.875-19.696c-2.903-4.192-11.7-8.586-21.237-10.928 7.67-.075 47.25.005 47.25.005s12.653 20.59-1.466 46.915z"}),e.createElement("path",{fill:"#74B340",d:"M6.628 75.294s-16.17-24.825 2.004-53.116l24.225 41.163s4.314 7.92 17.832 9.104c5.153-.368 10.514-.682 17.351-7.607C64.27 71.387 47.327 100 47.327 100s-24.51.448-40.7-24.706z"}),e.createElement("ellipse",{cx:50.646,cy:50.406,fill:"#FFF",rx:23.064,ry:22.656}),e.createElement("ellipse",{cx:50.638,cy:50.406,fill:"#2995CC",rx:18.292,ry:17.969}),e.createElement("path",{fill:"#268CBF",d:"M50.643 32.441c-.364 0-.724.014-1.082.034 9.598.55 17.209 8.369 17.209 17.934 0 9.568-7.611 17.386-17.21 17.937.36.02.72.034 1.083.034 10.101 0 18.292-8.046 18.292-17.97 0-9.923-8.19-17.969-18.292-17.969"}))))};var sh;function lh(){return lh=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},lh.apply(this,arguments)}const ch=function(t){return e.createElement("svg",lh({xmlns:"http://www.w3.org/2000/svg",width:105,height:100},t),sh||(sh=e.createElement("path",{fill:"#FF9800",d:"M105 50c0 28.862-23.513 50-52.5 50S0 76.588 0 47.726c0-9.043 2.33-17.59 6.392-25a.995.995 0 0 1 .23-.366C4.338 18.956 3.334 10.318 9.128 4.541c0 2.411 1.464 6.548 3.104 9.638 1.326 2.457 2.737 4.228 3.741 4 2.284-.543 10.27-.543 11.412 0 1.877-2.405 6.445-9.09 13.703-9.09-4.062 4.045-15.704 18.185 4.567 18.185h4.568L36.52 36.363s1.556 3 0 4.548c-1.732-1.732-9.128 1.862-9.128 6.815s5.296 11.363 15.98 11.363c10.683 0 7.986-4.548 13.696-4.548 5.709 0 6.844 4.548 6.844 4.548-7.855 0-13.558 9.09-22.824 9.09 4.567 3.364 7.58 4.547 13.696 4.547 15.113 0 27.392-12.225 27.392-27.274 0-6.09-2.008-11.683-5.388-16.224a27.414 27.414 0 0 1 10.96 19.498 40.554 40.554 0 0 0 1.279-10.089c0-13.683-5.84-31.776-15.98-38.637C87.655 4.358 105 18.466 105 45.452z"})))};var uh;function dh(){return dh=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},dh.apply(this,arguments)}const fh=function(t){return e.createElement("svg",dh({xmlns:"http://www.w3.org/2000/svg",width:96,height:100},t),uh||(uh=e.createElement("path",{fill:"#EB6060",d:"M48 100C21.49 100 0 77.614 0 50S21.49 0 48 0s48 22.386 48 50-21.49 50-48 50m0-10c13.807 0 25-17.909 25-40S61.807 10 48 10 23 27.909 23 50s11.193 40 25 40"})))};var ph;function hh(){return hh=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},hh.apply(this,arguments)}const mh=function(t){return e.createElement("svg",hh({xmlns:"http://www.w3.org/2000/svg",width:280,height:4},t),ph||(ph=e.createElement("path",{fill:"#495DCF",fillOpacity:.2,d:"M0 4a2 2 0 1 1 0-4 2 2 0 0 1 0 4m280 0a2 2 0 1 1 0-4 2 2 0 0 1 0 4m-17 0a2 2 0 1 1 0-4 2 2 0 0 1 0 4m-35 0a2 2 0 1 1 0-4 2 2 0 0 1 0 4m-35 0a2 2 0 1 1 0-4 2 2 0 0 1 0 4m-35 0a2 2 0 1 1 0-4 2 2 0 0 1 0 4m-18 0a2 2 0 1 1 0-4 2 2 0 0 1 0 4m-17 0a2 2 0 1 1 0-4 2 2 0 0 1 0 4m122 0a2 2 0 1 1 0-4 2 2 0 0 1 0 4m-35 0a2 2 0 1 1 0-4 2 2 0 0 1 0 4m-35 0a2 2 0 1 1 0-4 2 2 0 0 1 0 4m-70 0a2 2 0 1 1 0-4 2 2 0 0 1 0 4M88 4a2 2 0 1 1 0-4 2 2 0 0 1 0 4M70 4a2 2 0 1 1 0-4 2 2 0 0 1 0 4M53 4a2 2 0 1 1 0-4 2 2 0 0 1 0 4M35 4a2 2 0 1 1 0-4 2 2 0 0 1 0 4M18 4a2 2 0 1 1 0-4 2 2 0 0 1 0 4"})))},gh=function(t){var n=t.text,r=t.content,o=t.imageComponent,a=t.marginTop;return e.createElement(Yn,{role:"group",py:6,maxW:"280px",w:"full",boxShadow:"0px 8px 11px -4px rgba(210, 213, 237, 1)",rounded:"lg",pos:"relative",h:"fit-content",zIndex:1,ml:5,mr:5,mt:a},e.createElement(nr,{align:"center"},o),e.createElement(nr,{pt:10,align:"center"},e.createElement(Oi,{as:"h4",fontSize:"2xl",fontWeight:500},n),e.createElement(Oi,{as:"p",color:"gray.500",fontSize:"sm"},r)),e.createElement(nr,{align:"center",mt:10},e.createElement(mh,null)),e.createElement(nr,{align:"center",mt:5},e.createElement(Ri,{text:"Add & Install Extension"})))},vh=function(){return e.createElement(e.Fragment,null,e.createElement(Oi,{id:"pricing",mt:"150px",as:"h3",fontWeight:500,fontSize:{base:"24px",md:"30px"},lineHeight:{base:"30px",md:"45px"},align:"center"},"Download the extension"),e.createElement(Gn,{pl:4,pr:4,flex:1,align:"center",justify:"center"},e.createElement(Oi,{as:"p",fontSize:"lg",align:"center",maxW:"500px",pt:30},"We.ve got more browsers in the pipeline. Please do let us know if you.ve got a favourite you'd like us to proritize.")),e.createElement(nr,{"data-testid":"cards",direction:{base:"column",lg:"row"},justifyContent:"center",flexFlow:"wrap",mt:50},e.createElement(gh,{text:"Add to Chrome",content:"Minimium version 62",imageComponent:e.createElement(ih,null)}),e.createElement(gh,{text:"Add to Firefox",content:"Minimium version 55",imageComponent:e.createElement(ch,null),marginTop:10}),e.createElement(gh,{text:"Add to Opera",content:"Minimium version 46",imageComponent:e.createElement(fh,null),marginTop:{base:"2.5rem",lg:"5rem"}})))};var[yh,bh]=rr({name:"AccordionStylesContext",hookName:"useAccordionStyles",providerName:"<Accordion />"}),[xh,wh]=rr({name:"AccordionItemContext",hookName:"useAccordionItemContext",providerName:"<AccordionItem />"}),[kh,Sh,Eh,Ch]=Ap();var[_h,Ph]=rr({name:"AccordionContext",hookName:"useAccordionContext",providerName:"Accordion"});var Ah=r((function({children:t,reduceMotion:n,...r},o){const i=pr("Accordion",r),l=Ge(r),{htmlProps:c,descendants:u,...d}=function(t){const{onChange:n,defaultIndex:r,index:o,allowMultiple:a,allowToggle:i,...l}=t;!function(e){const t=e.index||e.defaultIndex,n=null!=t&&!Array.isArray(t)&&e.allowMultiple;s({condition:!!n,message:`If 'allowMultiple' is passed, then 'index' or 'defaultIndex' must be an array. You passed: ${typeof t},`})}(t),function(e){s({condition:!(!e.allowMultiple||!e.allowToggle),message:"If 'allowMultiple' is passed, 'allowToggle' will be ignored. Either remove 'allowToggle' or 'allowMultiple' depending on whether you want multiple accordions visible or not"})}(t);const c=Eh(),[u,d]=(0,e.useState)(-1);(0,e.useEffect)((()=>()=>{d(-1)}),[]);const[f,p]=zp({value:o,defaultValue:()=>a?null!=r?r:[]:null!=r?r:-1,onChange:n});return{index:f,setIndex:p,htmlProps:l,getAccordionItemProps:e=>{let t=!1;return null!==e&&(t=Array.isArray(f)?f.includes(e):f===e),{isOpen:t,onChange:t=>{if(null!==e)if(a&&Array.isArray(f)){const n=t?f.concat(e):f.filter((t=>t!==e));p(n)}else t?p(e):i&&p(-1)}}},focusedIndex:u,setFocusedIndex:d,descendants:c}}(l),f=(0,e.useMemo)((()=>({...d,reduceMotion:!!n})),[d,n]);return(0,qn.jsx)(kh,{value:u,children:(0,qn.jsx)(_h,{value:f,children:(0,qn.jsx)(yh,{value:i,children:(0,qn.jsx)(Un.div,{ref:o,...c,className:a("chakra-accordion",r.className),__css:i.root,children:t})})})})}));Ah.displayName="Accordion";var Th=r((function(t,n){const{children:r,className:o}=t,{htmlProps:i,...l}=function(t){const{isDisabled:n,isFocusable:r,id:o,...a}=t,{getAccordionItemProps:i,setFocusedIndex:l}=Ph(),c=(0,e.useRef)(null),u=(0,e.useId)(),d=null!=o?o:u,p=`accordion-button-${d}`,h=`accordion-panel-${d}`;!function(e){s({condition:!(!e.isFocusable||e.isDisabled),message:"Using only 'isFocusable', this prop is reserved for situations where you pass 'isDisabled' but you still want the element to receive focus (A11y). Either remove it or pass 'isDisabled' as well.\n    "})}(t);const{register:m,index:g,descendants:v}=Ch({disabled:n&&!r}),{isOpen:y,onChange:b}=i(-1===g?null:g);!function(e){s({condition:e.isOpen&&!!e.isDisabled,message:"Cannot open a disabled accordion item"})}({isOpen:y,isDisabled:n});const x=(0,e.useCallback)((()=>{null==b||b(!y),l(g)}),[g,l,y,b]),w=(0,e.useCallback)((e=>{const t={ArrowDown:()=>{const e=v.nextEnabled(g);null==e||e.node.focus()},ArrowUp:()=>{const e=v.prevEnabled(g);null==e||e.node.focus()},Home:()=>{const e=v.firstEnabled();null==e||e.node.focus()},End:()=>{const e=v.lastEnabled();null==e||e.node.focus()}},n=t[e.key];n&&(e.preventDefault(),n(e))}),[v,g]),k=(0,e.useCallback)((()=>{l(g)}),[l,g]),S=(0,e.useCallback)((function(e={},t=null){return{...e,type:"button",ref:vr(m,c,t),id:p,disabled:!!n,"aria-expanded":!!y,"aria-controls":h,onClick:f(e.onClick,x),onFocus:f(e.onFocus,k),onKeyDown:f(e.onKeyDown,w)}}),[p,n,y,x,k,w,h,m]),E=(0,e.useCallback)((function(e={},t=null){return{...e,ref:t,role:"region",id:h,"aria-labelledby":p,hidden:!y}}),[p,y,h]);return{isOpen:y,isDisabled:n,isFocusable:r,onOpen:()=>{null==b||b(!0)},onClose:()=>{null==b||b(!1)},getButtonProps:S,getPanelProps:E,htmlProps:a}}(t),c={...bh().container,overflowAnchor:"none"},u=(0,e.useMemo)((()=>l),[l]);return(0,qn.jsx)(xh,{value:u,children:(0,qn.jsx)(Un.div,{ref:n,...i,className:a("chakra-accordion__item",o),__css:c,children:"function"==typeof r?r({isExpanded:!!l.isOpen,isDisabled:!!l.isDisabled}):r})})}));Th.displayName="AccordionItem";var zh=r((function(e,t){const{getButtonProps:n}=wh(),r=n(e,t),o={display:"flex",alignItems:"center",width:"100%",outline:0,...bh().button};return(0,qn.jsx)(Un.button,{...r,className:a("chakra-accordion__button",e.className),__css:o})}));zh.displayName="AccordionButton";var Mh={path:(0,qn.jsxs)("g",{stroke:"currentColor",strokeWidth:"1.5",children:[(0,qn.jsx)("path",{strokeLinecap:"round",fill:"none",d:"M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25"}),(0,qn.jsx)("path",{fill:"currentColor",strokeLinecap:"round",d:"M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0"}),(0,qn.jsx)("circle",{fill:"none",strokeMiterlimit:"10",cx:"12",cy:"12",r:"11.25"})]}),viewBox:"0 0 24 24"},Fh=r(((e,t)=>{const{as:n,viewBox:r,color:o="currentColor",focusable:i=!1,children:s,className:l,__css:c,...u}=e,d={ref:t,focusable:i,className:a("chakra-icon",l),__css:{w:"1em",h:"1em",display:"inline-block",lineHeight:"1em",flexShrink:0,color:o,...c,...fr("Icon",e)}},f=null!=r?r:Mh.viewBox;if(n&&"string"!=typeof n)return(0,qn.jsx)(Un.svg,{as:n,...d,...u});const p=null!=s?s:Mh.path;return(0,qn.jsx)(Un.svg,{verticalAlign:"middle",viewBox:f,...d,...u,children:p})}));function Oh(e){const{isOpen:t,isDisabled:n}=wh(),{reduceMotion:r}=Ph(),o=a("chakra-accordion__icon",e.className),i={opacity:n?.4:1,transform:t?"rotate(-180deg)":void 0,transition:r?void 0:"transform 0.2s",transformOrigin:"center",...bh().icon};return(0,qn.jsx)(Fh,{viewBox:"0 0 24 24","aria-hidden":!0,className:o,__css:i,...e,children:(0,qn.jsx)("path",{fill:"currentColor",d:"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"})})}Fh.displayName="Icon",Oh.displayName="AccordionIcon";var Rh={ease:[.25,.1,.25,1],easeIn:[.4,0,1,1],easeOut:[0,0,.2,1],easeInOut:[.4,0,.2,1]},jh={enter:{duration:.2,ease:Rh.easeOut},exit:{duration:.1,ease:Rh.easeIn}},Ih=(e,t)=>({...e,delay:"number"==typeof t?t:null==t?void 0:t.enter}),Nh=(e,t)=>({...e,delay:"number"==typeof t?t:null==t?void 0:t.exit});const Dh="undefined"!=typeof document,Lh=Dh?e.useLayoutEffect:e.useEffect;function Bh(){const t=(0,e.useRef)(!1);return Lh((()=>(t.current=!0,()=>{t.current=!1})),[]),t}const $h=e=>e;class Vh{constructor(){this.order=[],this.scheduled=new Set}add(e){if(!this.scheduled.has(e))return this.scheduled.add(e),this.order.push(e),!0}remove(e){const t=this.order.indexOf(e);-1!==t&&(this.order.splice(t,1),this.scheduled.delete(e))}clear(){this.order.length=0,this.scheduled.clear()}}const Wh=["prepare","read","update","preRender","render","postRender"],{schedule:Hh,cancel:Uh,state:qh,steps:Gh}=function(e,t){let n=!1,r=!0;const o={delta:0,timestamp:0,isProcessing:!1},a=Wh.reduce(((e,t)=>(e[t]=function(e){let t=new Vh,n=new Vh,r=0,o=!1,a=!1;const i=new WeakSet,s={schedule:(e,a=!1,s=!1)=>{const l=s&&o,c=l?t:n;return a&&i.add(e),c.add(e)&&l&&o&&(r=t.order.length),e},cancel:e=>{n.remove(e),i.delete(e)},process:l=>{if(o)a=!0;else{if(o=!0,[t,n]=[n,t],n.clear(),r=t.order.length,r)for(let n=0;n<r;n++){const r=t.order[n];r(l),i.has(r)&&(s.schedule(r),e())}o=!1,a&&(a=!1,s.process(l))}}};return s}((()=>n=!0)),e)),{}),i=e=>a[e].process(o),s=()=>{const t=performance.now();n=!1,o.delta=r?1e3/60:Math.max(Math.min(t-o.timestamp,40),1),o.timestamp=t,o.isProcessing=!0,Wh.forEach(i),o.isProcessing=!1,n&&(r=!1,e(s))};return{schedule:Wh.reduce(((t,i)=>{const l=a[i];return t[i]=(t,a=!1,i=!1)=>(n||(n=!0,r=!0,o.isProcessing||e(s)),l.schedule(t,a,i)),t}),{}),cancel:e=>Wh.forEach((t=>a[t].cancel(e))),state:o,steps:a}}("undefined"!=typeof requestAnimationFrame?requestAnimationFrame:$h),Yh=(0,e.createContext)(null);function Xh(t){const n=(0,e.useRef)(null);return null===n.current&&(n.current=t()),n.current}class Qh extends e.Component{getSnapshotBeforeUpdate(e){const t=this.props.childRef.current;if(t&&e.isPresent&&!this.props.isPresent){const e=this.props.sizeRef.current;e.height=t.offsetHeight||0,e.width=t.offsetWidth||0,e.top=t.offsetTop,e.left=t.offsetLeft}return null}componentDidUpdate(){}render(){return this.props.children}}function Kh({children:t,isPresent:n}){const r=(0,e.useId)(),o=(0,e.useRef)(null),a=(0,e.useRef)({width:0,height:0,top:0,left:0});return(0,e.useInsertionEffect)((()=>{const{width:e,height:t,top:i,left:s}=a.current;if(n||!o.current||!e||!t)return;o.current.dataset.motionPopId=r;const l=document.createElement("style");return document.head.appendChild(l),l.sheet&&l.sheet.insertRule(`\n          [data-motion-pop-id="${r}"] {\n            position: absolute !important;\n            width: ${e}px !important;\n            height: ${t}px !important;\n            top: ${i}px !important;\n            left: ${s}px !important;\n          }\n        `),()=>{document.head.removeChild(l)}}),[n]),e.createElement(Qh,{isPresent:n,childRef:o,sizeRef:a},e.cloneElement(t,{ref:o}))}const Zh=({children:t,initial:n,isPresent:r,onExitComplete:o,custom:a,presenceAffectsLayout:i,mode:s})=>{const l=Xh(Jh),c=(0,e.useId)(),u=(0,e.useMemo)((()=>({id:c,initial:n,isPresent:r,custom:a,onExitComplete:e=>{l.set(e,!0);for(const e of l.values())if(!e)return;o&&o()},register:e=>(l.set(e,!1),()=>l.delete(e))})),i?void 0:[r]);return(0,e.useMemo)((()=>{l.forEach(((e,t)=>l.set(t,!1)))}),[r]),e.useEffect((()=>{!r&&!l.size&&o&&o()}),[r]),"popLayout"===s&&(t=e.createElement(Kh,{isPresent:r},t)),e.createElement(Yh.Provider,{value:u},t)};function Jh(){return new Map}const em=(0,e.createContext)({});let tm=$h,nm=$h;const rm=e=>e.key||"",om=({children:t,custom:n,initial:r=!0,onExitComplete:o,exitBeforeEnter:a,presenceAffectsLayout:i=!0,mode:s="sync"})=>{nm(!a,"Replace exitBeforeEnter with mode='wait'");const l=(0,e.useContext)(em).forceRender||function(){const t=Bh(),[n,r]=(0,e.useState)(0),o=(0,e.useCallback)((()=>{t.current&&r(n+1)}),[n]);return[(0,e.useCallback)((()=>Hh.postRender(o)),[o]),n]}()[0],c=Bh(),u=function(t){const n=[];return e.Children.forEach(t,(t=>{(0,e.isValidElement)(t)&&n.push(t)})),n}(t);let d=u;const f=(0,e.useRef)(new Map).current,p=(0,e.useRef)(d),h=(0,e.useRef)(new Map).current,m=(0,e.useRef)(!0);var g;if(Lh((()=>{m.current=!1,function(e,t){e.forEach((e=>{const n=rm(e);t.set(n,e)}))}(u,h),p.current=d})),g=()=>{m.current=!0,h.clear(),f.clear()},(0,e.useEffect)((()=>()=>g()),[]),m.current)return e.createElement(e.Fragment,null,d.map((t=>e.createElement(Zh,{key:rm(t),isPresent:!0,initial:!!r&&void 0,presenceAffectsLayout:i,mode:s},t))));d=[...d];const v=p.current.map(rm),y=u.map(rm),b=v.length;for(let e=0;e<b;e++){const t=v[e];-1!==y.indexOf(t)||f.has(t)||f.set(t,void 0)}return"wait"===s&&f.size&&(d=[]),f.forEach(((t,r)=>{if(-1!==y.indexOf(r))return;const a=h.get(r);if(!a)return;const m=v.indexOf(r);let g=t;if(!g){const t=()=>{f.delete(r);const e=Array.from(h.keys()).filter((e=>!y.includes(e)));if(e.forEach((e=>h.delete(e))),p.current=u.filter((t=>{const n=rm(t);return n===r||e.includes(n)})),!f.size){if(!1===c.current)return;l(),o&&o()}};g=e.createElement(Zh,{key:rm(a),isPresent:!1,onExitComplete:t,custom:n,presenceAffectsLayout:i,mode:s},a),f.set(r,g)}d.splice(m,0,g)})),d=d.map((t=>{const n=t.key;return f.has(n)?t:e.createElement(Zh,{key:rm(t),isPresent:!0,presenceAffectsLayout:i,mode:s},t)})),e.createElement(e.Fragment,null,f.size?d:d.map((t=>(0,e.cloneElement)(t))))},am=(0,e.createContext)({transformPagePoint:e=>e,isStatic:!1,reducedMotion:"never"}),im=(0,e.createContext)({}),sm=(0,e.createContext)({strict:!1}),lm=e=>e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase(),cm="data-"+lm("framerAppearId");function um(e){return"object"==typeof e&&Object.prototype.hasOwnProperty.call(e,"current")}function dm(e){return"string"==typeof e||Array.isArray(e)}function fm(e){return"object"==typeof e&&"function"==typeof e.start}const pm=["animate","whileInView","whileFocus","whileHover","whileTap","whileDrag","exit"],hm=["initial",...pm];function mm(e){return fm(e.animate)||hm.some((t=>dm(e[t])))}function gm(e){return Boolean(mm(e)||e.variants)}function vm(e){return Array.isArray(e)?e.join(" "):e}const ym={animation:["animate","variants","whileHover","whileTap","exit","whileInView","whileFocus","whileDrag"],exit:["exit"],drag:["drag","dragControls"],focus:["whileFocus"],hover:["whileHover","onHoverStart","onHoverEnd"],tap:["whileTap","onTap","onTapStart","onTapCancel"],pan:["onPan","onPanStart","onPanSessionStart","onPanEnd"],inView:["whileInView","onViewportEnter","onViewportLeave"],layout:["layout","layoutId"]},bm={};for(const e in ym)bm[e]={isEnabled:t=>ym[e].some((e=>!!t[e]))};const xm=(0,e.createContext)({}),wm=Symbol.for("motionComponentSymbol");function km({preloadedFeatures:t,createVisualElement:n,useRender:r,useVisualState:o,Component:a}){t&&function(e){for(const t in e)bm[t]={...bm[t],...e[t]}}(t);const i=(0,e.forwardRef)((function(i,s){let l;const c={...(0,e.useContext)(am),...i,layoutId:Sm(i)},{isStatic:u}=c,d=function(t){const{initial:n,animate:r}=function(e,t){if(mm(e)){const{initial:t,animate:n}=e;return{initial:!1===t||dm(t)?t:void 0,animate:dm(n)?n:void 0}}return!1!==e.inherit?t:{}}(t,(0,e.useContext)(im));return(0,e.useMemo)((()=>({initial:n,animate:r})),[vm(n),vm(r)])}(i),f=o(i,u);if(!u&&Dh){d.visualElement=function(t,n,r,o){const{visualElement:a}=(0,e.useContext)(im),i=(0,e.useContext)(sm),s=(0,e.useContext)(Yh),l=(0,e.useContext)(am).reducedMotion,c=(0,e.useRef)();o=o||i.renderer,!c.current&&o&&(c.current=o(t,{visualState:n,parent:a,props:r,presenceContext:s,blockInitialAnimation:!!s&&!1===s.initial,reducedMotionConfig:l}));const u=c.current;(0,e.useInsertionEffect)((()=>{u&&u.update(r,s)}));const d=(0,e.useRef)(Boolean(r[cm]&&!window.HandoffComplete));return Lh((()=>{u&&(u.render(),d.current&&u.animationState&&u.animationState.animateChanges())})),(0,e.useEffect)((()=>{u&&(u.updateFeatures(),!d.current&&u.animationState&&u.animationState.animateChanges(),d.current&&(d.current=!1,window.HandoffComplete=!0))})),u}(a,f,c,n);const r=(0,e.useContext)(xm),o=(0,e.useContext)(sm).strict;d.visualElement&&(l=d.visualElement.loadFeatures(c,o,t,r))}return e.createElement(im.Provider,{value:d},l&&d.visualElement?e.createElement(l,{visualElement:d.visualElement,...c}):null,r(a,i,function(t,n,r){return(0,e.useCallback)((e=>{e&&t.mount&&t.mount(e),n&&(e?n.mount(e):n.unmount()),r&&("function"==typeof r?r(e):um(r)&&(r.current=e))}),[n])}(f,d.visualElement,s),f,u,d.visualElement))}));return i[wm]=a,i}function Sm({layoutId:t}){const n=(0,e.useContext)(em).id;return n&&void 0!==t?n+"-"+t:t}function Em(e){function t(t,n={}){return km(e(t,n))}if("undefined"==typeof Proxy)return t;const n=new Map;return new Proxy(t,{get:(e,r)=>(n.has(r)||n.set(r,t(r)),n.get(r))})}const Cm=["animate","circle","defs","desc","ellipse","g","image","line","filter","marker","mask","metadata","path","pattern","polygon","polyline","rect","stop","switch","symbol","svg","text","tspan","use","view"];function _m(e){return"string"==typeof e&&!e.includes("-")&&!!(Cm.indexOf(e)>-1||/[A-Z]/.test(e))}const Pm={},Am=["transformPerspective","x","y","z","translateX","translateY","translateZ","scale","scaleX","scaleY","rotate","rotateX","rotateY","rotateZ","skew","skewX","skewY"],Tm=new Set(Am);function zm(e,{layout:t,layoutId:n}){return Tm.has(e)||e.startsWith("origin")||(t||void 0!==n)&&(!!Pm[e]||"opacity"===e)}const Mm=e=>Boolean(e&&e.getVelocity),Fm={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"},Om=Am.length,Rm=e=>t=>"string"==typeof t&&t.startsWith(e),jm=Rm("--"),Im=Rm("var(--"),Nm=(e,t)=>t&&"number"==typeof e?t.transform(e):e,Dm=(e,t,n)=>Math.min(Math.max(n,e),t),Lm={test:e=>"number"==typeof e,parse:parseFloat,transform:e=>e},Bm={...Lm,transform:e=>Dm(0,1,e)},$m={...Lm,default:1},Vm=e=>Math.round(1e5*e)/1e5,Wm=/(-)?([\d]*\.?[\d])+/g,Hm=/(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi,Um=/^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;function qm(e){return"string"==typeof e}const Gm=e=>({test:t=>qm(t)&&t.endsWith(e)&&1===t.split(" ").length,parse:parseFloat,transform:t=>`${t}${e}`}),Ym=Gm("deg"),Xm=Gm("%"),Qm=Gm("px"),Km=Gm("vh"),Zm=Gm("vw"),Jm={...Xm,parse:e=>Xm.parse(e)/100,transform:e=>Xm.transform(100*e)},eg={...Lm,transform:Math.round},tg={borderWidth:Qm,borderTopWidth:Qm,borderRightWidth:Qm,borderBottomWidth:Qm,borderLeftWidth:Qm,borderRadius:Qm,radius:Qm,borderTopLeftRadius:Qm,borderTopRightRadius:Qm,borderBottomRightRadius:Qm,borderBottomLeftRadius:Qm,width:Qm,maxWidth:Qm,height:Qm,maxHeight:Qm,size:Qm,top:Qm,right:Qm,bottom:Qm,left:Qm,padding:Qm,paddingTop:Qm,paddingRight:Qm,paddingBottom:Qm,paddingLeft:Qm,margin:Qm,marginTop:Qm,marginRight:Qm,marginBottom:Qm,marginLeft:Qm,rotate:Ym,rotateX:Ym,rotateY:Ym,rotateZ:Ym,scale:$m,scaleX:$m,scaleY:$m,scaleZ:$m,skew:Ym,skewX:Ym,skewY:Ym,distance:Qm,translateX:Qm,translateY:Qm,translateZ:Qm,x:Qm,y:Qm,z:Qm,perspective:Qm,transformPerspective:Qm,opacity:Bm,originX:Jm,originY:Jm,originZ:Qm,zIndex:eg,fillOpacity:Bm,strokeOpacity:Bm,numOctaves:eg};function ng(e,t,n,r){const{style:o,vars:a,transform:i,transformOrigin:s}=e;let l=!1,c=!1,u=!0;for(const e in t){const n=t[e];if(jm(e)){a[e]=n;continue}const r=tg[e],d=Nm(n,r);if(Tm.has(e)){if(l=!0,i[e]=d,!u)continue;n!==(r.default||0)&&(u=!1)}else e.startsWith("origin")?(c=!0,s[e]=d):o[e]=d}if(t.transform||(l||r?o.transform=function(e,{enableHardwareAcceleration:t=!0,allowTransformNone:n=!0},r,o){let a="";for(let t=0;t<Om;t++){const n=Am[t];void 0!==e[n]&&(a+=`${Fm[n]||n}(${e[n]}) `)}return t&&!e.z&&(a+="translateZ(0)"),a=a.trim(),o?a=o(e,r?"":a):n&&r&&(a="none"),a}(e.transform,n,u,r):o.transform&&(o.transform="none")),c){const{originX:e="50%",originY:t="50%",originZ:n=0}=s;o.transformOrigin=`${e} ${t} ${n}`}}const rg=()=>({style:{},transform:{},transformOrigin:{},vars:{}});function og(e,t,n){for(const r in t)Mm(t[r])||zm(r,n)||(e[r]=t[r])}function ag(t,n,r){const o={},a=function(t,n,r){const o={};return og(o,t.style||{},t),Object.assign(o,function({transformTemplate:t},n,r){return(0,e.useMemo)((()=>{const e=rg();return ng(e,n,{enableHardwareAcceleration:!r},t),Object.assign({},e.vars,e.style)}),[n])}(t,n,r)),t.transformValues?t.transformValues(o):o}(t,n,r);return t.drag&&!1!==t.dragListener&&(o.draggable=!1,a.userSelect=a.WebkitUserSelect=a.WebkitTouchCallout="none",a.touchAction=!0===t.drag?"none":"pan-"+("x"===t.drag?"y":"x")),void 0===t.tabIndex&&(t.onTap||t.onTapStart||t.whileTap)&&(o.tabIndex=0),o.style=a,o}const ig=new Set(["animate","exit","variants","initial","style","values","variants","transition","transformTemplate","transformValues","custom","inherit","onLayoutAnimationStart","onLayoutAnimationComplete","onLayoutMeasure","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","_dragX","_dragY","onHoverStart","onHoverEnd","onViewportEnter","onViewportLeave","ignoreStrict","viewport"]);function sg(e){return e.startsWith("while")||e.startsWith("drag")&&"draggable"!==e||e.startsWith("layout")||e.startsWith("onTap")||e.startsWith("onPan")||ig.has(e)}let lg=e=>!sg(e);try{(cg=require("@emotion/is-prop-valid").default)&&(lg=e=>e.startsWith("on")?!sg(e):cg(e))}catch(Tn){}var cg;function ug(e,t,n){return"string"==typeof e?e:Qm.transform(t+n*e)}const dg={offset:"stroke-dashoffset",array:"stroke-dasharray"},fg={offset:"strokeDashoffset",array:"strokeDasharray"};function pg(e,{attrX:t,attrY:n,attrScale:r,originX:o,originY:a,pathLength:i,pathSpacing:s=1,pathOffset:l=0,...c},u,d,f){if(ng(e,c,u,f),d)return void(e.style.viewBox&&(e.attrs.viewBox=e.style.viewBox));e.attrs=e.style,e.style={};const{attrs:p,style:h,dimensions:m}=e;p.transform&&(m&&(h.transform=p.transform),delete p.transform),m&&(void 0!==o||void 0!==a||h.transform)&&(h.transformOrigin=function(e,t,n){return`${ug(t,e.x,e.width)} ${ug(n,e.y,e.height)}`}(m,void 0!==o?o:.5,void 0!==a?a:.5)),void 0!==t&&(p.x=t),void 0!==n&&(p.y=n),void 0!==r&&(p.scale=r),void 0!==i&&function(e,t,n=1,r=0,o=!0){e.pathLength=1;const a=o?dg:fg;e[a.offset]=Qm.transform(-r);const i=Qm.transform(t),s=Qm.transform(n);e[a.array]=`${i} ${s}`}(p,i,s,l,!1)}const hg=()=>({...rg(),attrs:{}}),mg=e=>"string"==typeof e&&"svg"===e.toLowerCase();function gg(t,n,r,o){const a=(0,e.useMemo)((()=>{const e=hg();return pg(e,n,{enableHardwareAcceleration:!1},mg(o),t.transformTemplate),{...e.attrs,style:{...e.style}}}),[n]);if(t.style){const e={};og(e,t.style,t),a.style={...e,...a.style}}return a}function vg(t=!1){return(n,r,o,{latestValues:a},i)=>{const s=(_m(n)?gg:ag)(r,a,i,n),l=function(e,t,n){const r={};for(const o in e)"values"===o&&"object"==typeof e.values||(lg(o)||!0===n&&sg(o)||!t&&!sg(o)||e.draggable&&o.startsWith("onDrag"))&&(r[o]=e[o]);return r}(r,"string"==typeof n,t),c={...l,...s,ref:o},{children:u}=r,d=(0,e.useMemo)((()=>Mm(u)?u.get():u),[u]);return(0,e.createElement)(n,{...c,children:d})}}function yg(e,{style:t,vars:n},r,o){Object.assign(e.style,t,o&&o.getProjectionStyles(r));for(const t in n)e.style.setProperty(t,n[t])}const bg=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox","gradientTransform","pathLength","startOffset","textLength","lengthAdjust"]);function xg(e,t,n,r){yg(e,t,void 0,r);for(const n in t.attrs)e.setAttribute(bg.has(n)?n:lm(n),t.attrs[n])}function wg(e,t){const{style:n}=e,r={};for(const o in n)(Mm(n[o])||t.style&&Mm(t.style[o])||zm(o,e))&&(r[o]=n[o]);return r}function kg(e,t){const n=wg(e,t);for(const r in e)(Mm(e[r])||Mm(t[r]))&&(n[-1!==Am.indexOf(r)?"attr"+r.charAt(0).toUpperCase()+r.substring(1):r]=e[r]);return n}function Sg(e,t,n,r={},o={}){return"function"==typeof t&&(t=t(void 0!==n?n:e.custom,r,o)),"string"==typeof t&&(t=e.variants&&e.variants[t]),"function"==typeof t&&(t=t(void 0!==n?n:e.custom,r,o)),t}const Eg=e=>Array.isArray(e),Cg=e=>Boolean(e&&"object"==typeof e&&e.mix&&e.toValue),_g=e=>Eg(e)?e[e.length-1]||0:e;function Pg(e){const t=Mm(e)?e.get():e;return Cg(t)?t.toValue():t}const Ag=t=>(n,r)=>{const o=(0,e.useContext)(im),a=(0,e.useContext)(Yh),i=()=>function({scrapeMotionValuesFromProps:e,createRenderState:t,onMount:n},r,o,a){const i={latestValues:Tg(r,o,a,e),renderState:t()};return n&&(i.mount=e=>n(r,e,i)),i}(t,n,o,a);return r?i():Xh(i)};function Tg(e,t,n,r){const o={},a=r(e,{});for(const e in a)o[e]=Pg(a[e]);let{initial:i,animate:s}=e;const l=mm(e),c=gm(e);t&&c&&!l&&!1!==e.inherit&&(void 0===i&&(i=t.initial),void 0===s&&(s=t.animate));let u=!!n&&!1===n.initial;u=u||!1===i;const d=u?s:i;return d&&"boolean"!=typeof d&&!fm(d)&&(Array.isArray(d)?d:[d]).forEach((t=>{const n=Sg(e,t);if(!n)return;const{transitionEnd:r,transition:a,...i}=n;for(const e in i){let t=i[e];Array.isArray(t)&&(t=t[u?t.length-1:0]),null!==t&&(o[e]=t)}for(const e in r)o[e]=r[e]})),o}const zg={useVisualState:Ag({scrapeMotionValuesFromProps:kg,createRenderState:hg,onMount:(e,t,{renderState:n,latestValues:r})=>{Hh.read((()=>{try{n.dimensions="function"==typeof t.getBBox?t.getBBox():t.getBoundingClientRect()}catch(e){n.dimensions={x:0,y:0,width:0,height:0}}})),Hh.render((()=>{pg(n,r,{enableHardwareAcceleration:!1},mg(t.tagName),e.transformTemplate),xg(t,n)}))}})},Mg={useVisualState:Ag({scrapeMotionValuesFromProps:wg,createRenderState:rg})};function Fg(e,t,n,r={passive:!0}){return e.addEventListener(t,n,r),()=>e.removeEventListener(t,n)}const Og=e=>"mouse"===e.pointerType?"number"!=typeof e.button||e.button<=0:!1!==e.isPrimary;function Rg(e,t="page"){return{point:{x:e[t+"X"],y:e[t+"Y"]}}}const jg=e=>t=>Og(t)&&e(t,Rg(t));function Ig(e,t,n,r){return Fg(e,t,jg(n),r)}const Ng=(e,t)=>n=>t(e(n)),Dg=(...e)=>e.reduce(Ng);function Lg(e){let t=null;return()=>null===t&&(t=e,()=>{t=null})}const Bg=Lg("dragHorizontal"),$g=Lg("dragVertical");function Vg(e){let t=!1;if("y"===e)t=$g();else if("x"===e)t=Bg();else{const e=Bg(),n=$g();e&&n?t=()=>{e(),n()}:(e&&e(),n&&n())}return t}function Wg(){const e=Vg(!0);return!e||(e(),!1)}class Hg{constructor(e){this.isMounted=!1,this.node=e}update(){}}function Ug(e,t){const n="pointer"+(t?"enter":"leave"),r="onHover"+(t?"Start":"End");return Ig(e.current,n,((n,o)=>{if("touch"===n.type||Wg())return;const a=e.getProps();e.animationState&&a.whileHover&&e.animationState.setActive("whileHover",t),a[r]&&Hh.update((()=>a[r](n,o)))}),{passive:!e.getProps()[r]})}const qg=(e,t)=>!!t&&(e===t||qg(e,t.parentElement));function Gg(e,t){if(!t)return;const n=new PointerEvent("pointer"+e);t(n,Rg(n))}const Yg=new WeakMap,Xg=new WeakMap,Qg=e=>{const t=Yg.get(e.target);t&&t(e)},Kg=e=>{e.forEach(Qg)};const Zg={some:0,all:1},Jg={inView:{Feature:class extends Hg{constructor(){super(...arguments),this.hasEnteredView=!1,this.isInView=!1}startObserver(){this.unmount();const{viewport:e={}}=this.node.getProps(),{root:t,margin:n,amount:r="some",once:o}=e,a={root:t?t.current:void 0,rootMargin:n,threshold:"number"==typeof r?r:Zg[r]};return function(e,t,n){const r=function({root:e,...t}){const n=e||document;Xg.has(n)||Xg.set(n,{});const r=Xg.get(n),o=JSON.stringify(t);return r[o]||(r[o]=new IntersectionObserver(Kg,{root:e,...t})),r[o]}(t);return Yg.set(e,n),r.observe(e),()=>{Yg.delete(e),r.unobserve(e)}}(this.node.current,a,(e=>{const{isIntersecting:t}=e;if(this.isInView===t)return;if(this.isInView=t,o&&!t&&this.hasEnteredView)return;t&&(this.hasEnteredView=!0),this.node.animationState&&this.node.animationState.setActive("whileInView",t);const{onViewportEnter:n,onViewportLeave:r}=this.node.getProps(),a=t?n:r;a&&a(e)}))}mount(){this.startObserver()}update(){if("undefined"==typeof IntersectionObserver)return;const{props:e,prevProps:t}=this.node;["amount","margin","root"].some(function({viewport:e={}},{viewport:t={}}={}){return n=>e[n]!==t[n]}(e,t))&&this.startObserver()}unmount(){}}},tap:{Feature:class extends Hg{constructor(){super(...arguments),this.removeStartListeners=$h,this.removeEndListeners=$h,this.removeAccessibleListeners=$h,this.startPointerPress=(e,t)=>{if(this.removeEndListeners(),this.isPressing)return;const n=this.node.getProps(),r=Ig(window,"pointerup",((e,t)=>{if(!this.checkPressEnd())return;const{onTap:n,onTapCancel:r}=this.node.getProps();Hh.update((()=>{qg(this.node.current,e.target)?n&&n(e,t):r&&r(e,t)}))}),{passive:!(n.onTap||n.onPointerUp)}),o=Ig(window,"pointercancel",((e,t)=>this.cancelPress(e,t)),{passive:!(n.onTapCancel||n.onPointerCancel)});this.removeEndListeners=Dg(r,o),this.startPress(e,t)},this.startAccessiblePress=()=>{const e=Fg(this.node.current,"keydown",(e=>{"Enter"!==e.key||this.isPressing||(this.removeEndListeners(),this.removeEndListeners=Fg(this.node.current,"keyup",(e=>{"Enter"===e.key&&this.checkPressEnd()&&Gg("up",((e,t)=>{const{onTap:n}=this.node.getProps();n&&Hh.update((()=>n(e,t)))}))})),Gg("down",((e,t)=>{this.startPress(e,t)})))})),t=Fg(this.node.current,"blur",(()=>{this.isPressing&&Gg("cancel",((e,t)=>this.cancelPress(e,t)))}));this.removeAccessibleListeners=Dg(e,t)}}startPress(e,t){this.isPressing=!0;const{onTapStart:n,whileTap:r}=this.node.getProps();r&&this.node.animationState&&this.node.animationState.setActive("whileTap",!0),n&&Hh.update((()=>n(e,t)))}checkPressEnd(){return this.removeEndListeners(),this.isPressing=!1,this.node.getProps().whileTap&&this.node.animationState&&this.node.animationState.setActive("whileTap",!1),!Wg()}cancelPress(e,t){if(!this.checkPressEnd())return;const{onTapCancel:n}=this.node.getProps();n&&Hh.update((()=>n(e,t)))}mount(){const e=this.node.getProps(),t=Ig(this.node.current,"pointerdown",this.startPointerPress,{passive:!(e.onTapStart||e.onPointerStart)}),n=Fg(this.node.current,"focus",this.startAccessiblePress);this.removeStartListeners=Dg(t,n)}unmount(){this.removeStartListeners(),this.removeEndListeners(),this.removeAccessibleListeners()}}},focus:{Feature:class extends Hg{constructor(){super(...arguments),this.isActive=!1}onFocus(){let e=!1;try{e=this.node.current.matches(":focus-visible")}catch(t){e=!0}e&&this.node.animationState&&(this.node.animationState.setActive("whileFocus",!0),this.isActive=!0)}onBlur(){this.isActive&&this.node.animationState&&(this.node.animationState.setActive("whileFocus",!1),this.isActive=!1)}mount(){this.unmount=Dg(Fg(this.node.current,"focus",(()=>this.onFocus())),Fg(this.node.current,"blur",(()=>this.onBlur())))}unmount(){}}},hover:{Feature:class extends Hg{mount(){this.unmount=Dg(Ug(this.node,!0),Ug(this.node,!1))}unmount(){}}}};function ev(e,t){if(!Array.isArray(t))return!1;const n=t.length;if(n!==e.length)return!1;for(let r=0;r<n;r++)if(t[r]!==e[r])return!1;return!0}function tv(e,t,n){const r=e.getProps();return Sg(r,t,void 0!==n?n:r.custom,function(e){const t={};return e.values.forEach(((e,n)=>t[n]=e.get())),t}(e),function(e){const t={};return e.values.forEach(((e,n)=>t[n]=e.getVelocity())),t}(e))}const nv=e=>1e3*e,rv=e=>e/1e3,ov=e=>Array.isArray(e)&&"number"==typeof e[0];function av(e){return Boolean(!e||"string"==typeof e&&sv[e]||ov(e)||Array.isArray(e)&&e.every(av))}const iv=([e,t,n,r])=>`cubic-bezier(${e}, ${t}, ${n}, ${r})`,sv={linear:"linear",ease:"ease",easeIn:"ease-in",easeOut:"ease-out",easeInOut:"ease-in-out",circIn:iv([0,.65,.55,1]),circOut:iv([.55,0,1,.45]),backIn:iv([.31,.01,.66,-.59]),backOut:iv([.33,1.53,.69,.99])};function lv(e){if(e)return ov(e)?iv(e):Array.isArray(e)?e.map(lv):sv[e]}const cv=(e,t,n)=>(((1-3*n+3*t)*e+(3*n-6*t))*e+3*t)*e,uv=1e-7,dv=12;function fv(e,t,n,r){if(e===t&&n===r)return $h;return o=>0===o||1===o?o:cv(function(e,t,n,r,o){let a,i,s=0;do{i=t+(n-t)/2,a=cv(i,r,o)-e,a>0?n=i:t=i}while(Math.abs(a)>uv&&++s<dv);return i}(o,0,1,e,n),t,r)}const pv=fv(.42,0,1,1),hv=fv(0,0,.58,1),mv=fv(.42,0,.58,1),gv=e=>Array.isArray(e)&&"number"!=typeof e[0],vv=e=>t=>t<=.5?e(2*t)/2:(2-e(2*(1-t)))/2,yv=e=>t=>1-e(1-t),bv=e=>1-Math.sin(Math.acos(e)),xv=yv(bv),wv=vv(bv),kv=fv(.33,1.53,.69,.99),Sv=yv(kv),Ev=vv(Sv),Cv={linear:$h,easeIn:pv,easeInOut:mv,easeOut:hv,circIn:bv,circInOut:wv,circOut:xv,backIn:Sv,backInOut:Ev,backOut:kv,anticipate:e=>(e*=2)<1?.5*Sv(e):.5*(2-Math.pow(2,-10*(e-1)))},_v=e=>{if(Array.isArray(e)){nm(4===e.length,"Cubic bezier arrays must contain four numerical values.");const[t,n,r,o]=e;return fv(t,n,r,o)}return"string"==typeof e?(nm(void 0!==Cv[e],`Invalid easing type '${e}'`),Cv[e]):e},Pv=(e,t)=>n=>Boolean(qm(n)&&Um.test(n)&&n.startsWith(e)||t&&Object.prototype.hasOwnProperty.call(n,t)),Av=(e,t,n)=>r=>{if(!qm(r))return r;const[o,a,i,s]=r.match(Wm);return{[e]:parseFloat(o),[t]:parseFloat(a),[n]:parseFloat(i),alpha:void 0!==s?parseFloat(s):1}},Tv={...Lm,transform:e=>Math.round((e=>Dm(0,255,e))(e))},zv={test:Pv("rgb","red"),parse:Av("red","green","blue"),transform:({red:e,green:t,blue:n,alpha:r=1})=>"rgba("+Tv.transform(e)+", "+Tv.transform(t)+", "+Tv.transform(n)+", "+Vm(Bm.transform(r))+")"},Mv={test:Pv("#"),parse:function(e){let t="",n="",r="",o="";return e.length>5?(t=e.substring(1,3),n=e.substring(3,5),r=e.substring(5,7),o=e.substring(7,9)):(t=e.substring(1,2),n=e.substring(2,3),r=e.substring(3,4),o=e.substring(4,5),t+=t,n+=n,r+=r,o+=o),{red:parseInt(t,16),green:parseInt(n,16),blue:parseInt(r,16),alpha:o?parseInt(o,16)/255:1}},transform:zv.transform},Fv={test:Pv("hsl","hue"),parse:Av("hue","saturation","lightness"),transform:({hue:e,saturation:t,lightness:n,alpha:r=1})=>"hsla("+Math.round(e)+", "+Xm.transform(Vm(t))+", "+Xm.transform(Vm(n))+", "+Vm(Bm.transform(r))+")"},Ov={test:e=>zv.test(e)||Mv.test(e)||Fv.test(e),parse:e=>zv.test(e)?zv.parse(e):Fv.test(e)?Fv.parse(e):Mv.parse(e),transform:e=>qm(e)?e:e.hasOwnProperty("red")?zv.transform(e):Fv.transform(e)},Rv=(e,t,n)=>-n*e+n*t+e;function jv(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}const Iv=(e,t,n)=>{const r=e*e;return Math.sqrt(Math.max(0,n*(t*t-r)+r))},Nv=[Mv,zv,Fv],Dv=e=>Nv.find((t=>t.test(e)));function Lv(e){const t=Dv(e);nm(Boolean(t),`'${e}' is not an animatable color. Use the equivalent color code instead.`);let n=t.parse(e);return t===Fv&&(n=function({hue:e,saturation:t,lightness:n,alpha:r}){e/=360,n/=100;let o=0,a=0,i=0;if(t/=100){const r=n<.5?n*(1+t):n+t-n*t,s=2*n-r;o=jv(s,r,e+1/3),a=jv(s,r,e),i=jv(s,r,e-1/3)}else o=a=i=n;return{red:Math.round(255*o),green:Math.round(255*a),blue:Math.round(255*i),alpha:r}}(n)),n}const Bv=(e,t)=>{const n=Lv(e),r=Lv(t),o={...n};return e=>(o.red=Iv(n.red,r.red,e),o.green=Iv(n.green,r.green,e),o.blue=Iv(n.blue,r.blue,e),o.alpha=Rv(n.alpha,r.alpha,e),zv.transform(o))},$v={regex:/var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\)/g,countKey:"Vars",token:"${v}",parse:$h},Vv={regex:Hm,countKey:"Colors",token:"${c}",parse:Ov.parse},Wv={regex:Wm,countKey:"Numbers",token:"${n}",parse:Lm.parse};function Hv(e,{regex:t,countKey:n,token:r,parse:o}){const a=e.tokenised.match(t);a&&(e["num"+n]=a.length,e.tokenised=e.tokenised.replace(t,r),e.values.push(...a.map(o)))}function Uv(e){const t=e.toString(),n={value:t,tokenised:t,values:[],numVars:0,numColors:0,numNumbers:0};return n.value.includes("var(--")&&Hv(n,$v),Hv(n,Vv),Hv(n,Wv),n}function qv(e){return Uv(e).values}function Gv(e){const{values:t,numColors:n,numVars:r,tokenised:o}=Uv(e),a=t.length;return e=>{let t=o;for(let o=0;o<a;o++)t=o<r?t.replace($v.token,e[o]):o<r+n?t.replace(Vv.token,Ov.transform(e[o])):t.replace(Wv.token,Vm(e[o]));return t}}const Yv=e=>"number"==typeof e?0:e,Xv={test:function(e){var t,n;return isNaN(e)&&qm(e)&&((null===(t=e.match(Wm))||void 0===t?void 0:t.length)||0)+((null===(n=e.match(Hm))||void 0===n?void 0:n.length)||0)>0},parse:qv,createTransformer:Gv,getAnimatableNone:function(e){const t=qv(e);return Gv(e)(t.map(Yv))}},Qv=(e,t)=>n=>`${n>0?t:e}`;function Kv(e,t){return"number"==typeof e?n=>Rv(e,t,n):Ov.test(e)?Bv(e,t):e.startsWith("var(")?Qv(e,t):ey(e,t)}const Zv=(e,t)=>{const n=[...e],r=n.length,o=e.map(((e,n)=>Kv(e,t[n])));return e=>{for(let t=0;t<r;t++)n[t]=o[t](e);return n}},Jv=(e,t)=>{const n={...e,...t},r={};for(const o in n)void 0!==e[o]&&void 0!==t[o]&&(r[o]=Kv(e[o],t[o]));return e=>{for(const t in r)n[t]=r[t](e);return n}},ey=(e,t)=>{const n=Xv.createTransformer(t),r=Uv(e),o=Uv(t);return r.numVars===o.numVars&&r.numColors===o.numColors&&r.numNumbers>=o.numNumbers?Dg(Zv(r.values,o.values),n):(tm(!0,`Complex values '${e}' and '${t}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`),Qv(e,t))},ty=(e,t,n)=>{const r=t-e;return 0===r?1:(n-e)/r},ny=(e,t)=>n=>Rv(e,t,n);function ry(e,t,{clamp:n=!0,ease:r,mixer:o}={}){const a=e.length;if(nm(a===t.length,"Both input and output ranges must be the same length"),1===a)return()=>t[0];e[0]>e[a-1]&&(e=[...e].reverse(),t=[...t].reverse());const i=function(e,t,n){const r=[],o=n||function(e){return"number"==typeof e?ny:"string"==typeof e?Ov.test(e)?Bv:ey:Array.isArray(e)?Zv:"object"==typeof e?Jv:ny}(e[0]),a=e.length-1;for(let n=0;n<a;n++){let a=o(e[n],e[n+1]);if(t){const e=Array.isArray(t)?t[n]||$h:t;a=Dg(e,a)}r.push(a)}return r}(t,r,o),s=i.length,l=t=>{let n=0;if(s>1)for(;n<e.length-2&&!(t<e[n+1]);n++);const r=ty(e[n],e[n+1],t);return i[n](r)};return n?t=>l(Dm(e[0],e[a-1],t)):l}function oy({duration:e=300,keyframes:t,times:n,ease:r="easeInOut"}){const o=gv(r)?r.map(_v):_v(r),a={done:!1,value:t[0]},i=function(e,t){return e.map((e=>e*t))}(n&&n.length===t.length?n:function(e){const t=[0];return function(e,t){const n=e[e.length-1];for(let r=1;r<=t;r++){const o=ty(0,t,r);e.push(Rv(n,1,o))}}(t,e.length-1),t}(t),e),s=ry(i,t,{ease:Array.isArray(o)?o:(l=t,c=o,l.map((()=>c||mv)).splice(0,l.length-1))});var l,c;return{calculatedDuration:e,next:t=>(a.value=s(t),a.done=t>=e,a)}}function ay(e,t){return t?e*(1e3/t):0}const iy=5;function sy(e,t,n){const r=Math.max(t-iy,0);return ay(n-e(r),t-r)}const ly=.001,cy=.01,uy=10,dy=.05,fy=1;const py=12;function hy(e,t){return e*Math.sqrt(1-t*t)}const my=["duration","bounce"],gy=["stiffness","damping","mass"];function vy(e,t){return t.some((t=>void 0!==e[t]))}function yy({keyframes:e,restDelta:t,restSpeed:n,...r}){const o=e[0],a=e[e.length-1],i={done:!1,value:o},{stiffness:s,damping:l,mass:c,velocity:u,duration:d,isResolvedFromDuration:f}=function(e){let t={velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1,...e};if(!vy(e,gy)&&vy(e,my)){const n=function({duration:e=800,bounce:t=.25,velocity:n=0,mass:r=1}){let o,a;tm(e<=nv(uy),"Spring duration must be 10 seconds or less");let i=1-t;i=Dm(dy,fy,i),e=Dm(cy,uy,rv(e)),i<1?(o=t=>{const r=t*i,o=r*e,a=r-n,s=hy(t,i),l=Math.exp(-o);return ly-a/s*l},a=t=>{const r=t*i*e,a=r*n+n,s=Math.pow(i,2)*Math.pow(t,2)*e,l=Math.exp(-r),c=hy(Math.pow(t,2),i);return(-o(t)+ly>0?-1:1)*((a-s)*l)/c}):(o=t=>Math.exp(-t*e)*((t-n)*e+1)-ly,a=t=>Math.exp(-t*e)*(e*e*(n-t)));const s=function(e,t,n){let r=n;for(let n=1;n<py;n++)r-=e(r)/t(r);return r}(o,a,5/e);if(e=nv(e),isNaN(s))return{stiffness:100,damping:10,duration:e};{const t=Math.pow(s,2)*r;return{stiffness:t,damping:2*i*Math.sqrt(r*t),duration:e}}}(e);t={...t,...n,velocity:0,mass:1},t.isResolvedFromDuration=!0}return t}(r),p=u?-rv(u):0,h=l/(2*Math.sqrt(s*c)),m=a-o,g=rv(Math.sqrt(s/c)),v=Math.abs(m)<5;let y;if(n||(n=v?.01:2),t||(t=v?.005:.5),h<1){const e=hy(g,h);y=t=>{const n=Math.exp(-h*g*t);return a-n*((p+h*g*m)/e*Math.sin(e*t)+m*Math.cos(e*t))}}else if(1===h)y=e=>a-Math.exp(-g*e)*(m+(p+g*m)*e);else{const e=g*Math.sqrt(h*h-1);y=t=>{const n=Math.exp(-h*g*t),r=Math.min(e*t,300);return a-n*((p+h*g*m)*Math.sinh(r)+e*m*Math.cosh(r))/e}}return{calculatedDuration:f&&d||null,next:e=>{const r=y(e);if(f)i.done=e>=d;else{let o=p;0!==e&&(o=h<1?sy(y,e,r):0);const s=Math.abs(o)<=n,l=Math.abs(a-r)<=t;i.done=s&&l}return i.value=i.done?a:r,i}}}function by({keyframes:e,velocity:t=0,power:n=.8,timeConstant:r=325,bounceDamping:o=10,bounceStiffness:a=500,modifyTarget:i,min:s,max:l,restDelta:c=.5,restSpeed:u}){const d=e[0],f={done:!1,value:d},p=e=>void 0===s?l:void 0===l||Math.abs(s-e)<Math.abs(l-e)?s:l;let h=n*t;const m=d+h,g=void 0===i?m:i(m);g!==m&&(h=g-d);const v=e=>-h*Math.exp(-e/r),y=e=>g+v(e),b=e=>{const t=v(e),n=y(e);f.done=Math.abs(t)<=c,f.value=f.done?g:n};let x,w;const k=e=>{(e=>void 0!==s&&e<s||void 0!==l&&e>l)(f.value)&&(x=e,w=yy({keyframes:[f.value,p(f.value)],velocity:sy(y,e,f.value),damping:o,stiffness:a,restDelta:c,restSpeed:u}))};return k(0),{calculatedDuration:null,next:e=>{let t=!1;return w||void 0!==x||(t=!0,b(e),k(e)),void 0!==x&&e>x?w.next(e-x):(!t&&b(e),f)}}}const xy=e=>{const t=({timestamp:t})=>e(t);return{start:()=>Hh.update(t,!0),stop:()=>Uh(t),now:()=>qh.isProcessing?qh.timestamp:performance.now()}},wy=2e4;function ky(e){let t=0,n=e.next(t);for(;!n.done&&t<wy;)t+=50,n=e.next(t);return t>=wy?1/0:t}const Sy={decay:by,inertia:by,tween:oy,keyframes:oy,spring:yy};function Ey({autoplay:e=!0,delay:t=0,driver:n=xy,keyframes:r,type:o="keyframes",repeat:a=0,repeatDelay:i=0,repeatType:s="loop",onPlay:l,onStop:c,onComplete:u,onUpdate:d,...f}){let p,h,m=1,g=!1;const v=()=>{h=new Promise((e=>{p=e}))};let y;v();const b=Sy[o]||oy;let x;b!==oy&&"number"!=typeof r[0]&&(x=ry([0,100],r,{clamp:!1}),r=[0,100]);const w=b({...f,keyframes:r});let k;"mirror"===s&&(k=b({...f,keyframes:[...r].reverse(),velocity:-(f.velocity||0)}));let S="idle",E=null,C=null,_=null;null===w.calculatedDuration&&a&&(w.calculatedDuration=ky(w));const{calculatedDuration:P}=w;let A=1/0,T=1/0;null!==P&&(A=P+i,T=A*(a+1)-i);let z=0;const M=e=>{if(null===C)return;m>0&&(C=Math.min(C,e)),m<0&&(C=Math.min(e-T/m,C)),z=null!==E?E:Math.round(e-C)*m;const n=z-t*(m>=0?1:-1),o=m>=0?n<0:n>T;z=Math.max(n,0),"finished"===S&&null===E&&(z=T);let l=z,c=w;if(a){const e=z/A;let t=Math.floor(e),n=e%1;!n&&e>=1&&(n=1),1===n&&t--,t=Math.min(t,a+1);const r=Boolean(t%2);r&&("reverse"===s?(n=1-n,i&&(n-=i/A)):"mirror"===s&&(c=k));let o=Dm(0,1,n);z>T&&(o="reverse"===s&&r?1:0),l=o*A}const u=o?{done:!1,value:r[0]}:c.next(l);x&&(u.value=x(u.value));let{done:f}=u;o||null===P||(f=m>=0?z>=T:z<=0);const p=null===E&&("finished"===S||"running"===S&&f);return d&&d(u.value),p&&R(),u},F=()=>{y&&y.stop(),y=void 0},O=()=>{S="idle",F(),p(),v(),C=_=null},R=()=>{S="finished",u&&u(),F(),p()},j=()=>{if(g)return;y||(y=n(M));const e=y.now();l&&l(),null!==E?C=e-E:C&&"finished"!==S||(C=e),"finished"===S&&v(),_=C,E=null,S="running",y.start()};e&&j();const I={then:(e,t)=>h.then(e,t),get time(){return rv(z)},set time(e){e=nv(e),z=e,null===E&&y&&0!==m?C=y.now()-e/m:E=e},get duration(){const e=null===w.calculatedDuration?ky(w):w.calculatedDuration;return rv(e)},get speed(){return m},set speed(e){e!==m&&y&&(m=e,I.time=rv(z))},get state(){return S},play:j,pause:()=>{S="paused",E=z},stop:()=>{g=!0,"idle"!==S&&(S="idle",c&&c(),O())},cancel:()=>{null!==_&&M(_),O()},complete:()=>{S="finished"},sample:e=>(C=0,M(e))};return I}const Cy=function(e){let t;return()=>(void 0===t&&(t=Object.hasOwnProperty.call(Element.prototype,"animate")),t)}(),_y=new Set(["opacity","clipPath","filter","transform","backgroundColor"]),Py=10,Ay=2e4,Ty=(e,t)=>"spring"===t.type||"backgroundColor"===e||!av(t.ease);const zy={type:"spring",stiffness:500,damping:25,restSpeed:10},My={type:"keyframes",duration:.8},Fy={type:"keyframes",ease:[.25,.1,.35,1],duration:.3},Oy=(e,{keyframes:t})=>t.length>2?My:Tm.has(e)?e.startsWith("scale")?{type:"spring",stiffness:550,damping:0===t[1]?2*Math.sqrt(550):30,restSpeed:10}:zy:Fy,Ry=(e,t)=>!("zIndex"===e||"number"!=typeof t&&!Array.isArray(t)&&("string"!=typeof t||!Xv.test(t)&&"0"!==t||t.startsWith("url("))),jy=new Set(["brightness","contrast","saturate","opacity"]);function Iy(e){const[t,n]=e.slice(0,-1).split("(");if("drop-shadow"===t)return e;const[r]=n.match(Wm)||[];if(!r)return e;const o=n.replace(r,"");let a=jy.has(t)?1:0;return r!==n&&(a*=100),t+"("+a+o+")"}const Ny=/([a-z-]*)\(.*?\)/g,Dy={...Xv,getAnimatableNone:e=>{const t=e.match(Ny);return t?t.map(Iy).join(" "):e}},Ly={...tg,color:Ov,backgroundColor:Ov,outlineColor:Ov,fill:Ov,stroke:Ov,borderColor:Ov,borderTopColor:Ov,borderRightColor:Ov,borderBottomColor:Ov,borderLeftColor:Ov,filter:Dy,WebkitFilter:Dy},By=e=>Ly[e];function $y(e,t){let n=By(e);return n!==Dy&&(n=Xv),n.getAnimatableNone?n.getAnimatableNone(t):void 0}const Vy=e=>/^0[^.\s]+$/.test(e);function Wy(e){return"number"==typeof e?0===e:null!==e?"none"===e||"0"===e||Vy(e):void 0}function Hy(e,t){return e[t]||e.default||e}const Uy=(e,t,n,r={})=>o=>{const a=Hy(r,e)||{},i=a.delay||r.delay||0;let{elapsed:s=0}=r;s-=nv(i);const l=function(e,t,n,r){const o=Ry(t,n);let a;a=Array.isArray(n)?[...n]:[null,n];const i=void 0!==r.from?r.from:e.get();let s;const l=[];for(let e=0;e<a.length;e++)null===a[e]&&(a[e]=0===e?i:a[e-1]),Wy(a[e])&&l.push(e),"string"==typeof a[e]&&"none"!==a[e]&&"0"!==a[e]&&(s=a[e]);if(o&&l.length&&s)for(let e=0;e<l.length;e++)a[l[e]]=$y(t,s);return a}(t,e,n,a),c=l[0],u=l[l.length-1],d=Ry(e,c),f=Ry(e,u);tm(d===f,`You are trying to animate ${e} from "${c}" to "${u}". ${c} is not an animatable value - to enable this animation set ${c} to a value animatable to ${u} via the \`style\` property.`);let p={keyframes:l,velocity:t.getVelocity(),ease:"easeOut",...a,delay:-s,onUpdate:e=>{t.set(e),a.onUpdate&&a.onUpdate(e)},onComplete:()=>{o(),a.onComplete&&a.onComplete()}};if(function({when:e,delay:t,delayChildren:n,staggerChildren:r,staggerDirection:o,repeat:a,repeatType:i,repeatDelay:s,from:l,elapsed:c,...u}){return!!Object.keys(u).length}(a)||(p={...p,...Oy(e,p)}),p.duration&&(p.duration=nv(p.duration)),p.repeatDelay&&(p.repeatDelay=nv(p.repeatDelay)),!d||!f||!1===a.type)return function({keyframes:e,delay:t,onUpdate:n,onComplete:r}){const o=()=>(n&&n(e[e.length-1]),r&&r(),{time:0,speed:1,duration:0,play:$h,pause:$h,stop:$h,then:e=>(e(),Promise.resolve()),cancel:$h,complete:$h});return t?Ey({keyframes:[0,1],duration:0,delay:t,onComplete:o}):o()}(p);if(!r.isHandoff&&t.owner&&t.owner.current instanceof HTMLElement&&!t.owner.getProps().onUpdate){const n=function(e,t,{onUpdate:n,onComplete:r,...o}){if(!Cy()||!_y.has(t)||o.repeatDelay||"mirror"===o.repeatType||0===o.damping||"inertia"===o.type)return!1;let a,i,s=!1;const l=()=>{i=new Promise((e=>{a=e}))};l();let{keyframes:c,duration:u=300,ease:d,times:f}=o;if(Ty(t,o)){const e=Ey({...o,repeat:0,delay:0});let t={done:!1,value:c[0]};const n=[];let r=0;for(;!t.done&&r<Ay;)t=e.sample(r),n.push(t.value),r+=Py;f=void 0,c=n,u=r-Py,d="linear"}const p=function(e,t,n,{delay:r=0,duration:o,repeat:a=0,repeatType:i="loop",ease:s,times:l}={}){const c={[t]:n};l&&(c.offset=l);const u=lv(s);return Array.isArray(u)&&(c.easing=u),e.animate(c,{delay:r,duration:o,easing:Array.isArray(u)?"linear":u,fill:"both",iterations:a+1,direction:"reverse"===i?"alternate":"normal"})}(e.owner.current,t,c,{...o,duration:u,ease:d,times:f}),h=()=>p.cancel(),m=()=>{Hh.update(h),a(),l()};return p.onfinish=()=>{e.set(function(e,{repeat:t,repeatType:n="loop"}){return e[t&&"loop"!==n&&t%2==1?0:e.length-1]}(c,o)),r&&r(),m()},{then:(e,t)=>i.then(e,t),attachTimeline:e=>(p.timeline=e,p.onfinish=null,$h),get time(){return rv(p.currentTime||0)},set time(e){p.currentTime=nv(e)},get speed(){return p.playbackRate},set speed(e){p.playbackRate=e},get duration(){return rv(u)},play:()=>{s||(p.play(),Uh(h))},pause:()=>p.pause(),stop:()=>{if(s=!0,"idle"===p.playState)return;const{currentTime:t}=p;if(t){const n=Ey({...o,autoplay:!1});e.setWithVelocity(n.sample(t-Py).value,n.sample(t).value,Py)}m()},complete:()=>p.finish(),cancel:m}}(t,e,p);if(n)return n}return Ey(p)};function qy(e){return Boolean(Mm(e)&&e.add)}const Gy=e=>/^\-?\d*\.?\d+$/.test(e);function Yy(e,t){-1===e.indexOf(t)&&e.push(t)}function Xy(e,t){const n=e.indexOf(t);n>-1&&e.splice(n,1)}class Qy{constructor(){this.subscriptions=[]}add(e){return Yy(this.subscriptions,e),()=>Xy(this.subscriptions,e)}notify(e,t,n){const r=this.subscriptions.length;if(r)if(1===r)this.subscriptions[0](e,t,n);else for(let o=0;o<r;o++){const r=this.subscriptions[o];r&&r(e,t,n)}}getSize(){return this.subscriptions.length}clear(){this.subscriptions.length=0}}const Ky={current:void 0};class Zy{constructor(e,t={}){var n;this.version="10.16.16",this.timeDelta=0,this.lastUpdated=0,this.canTrackVelocity=!1,this.events={},this.updateAndNotify=(e,t=!0)=>{this.prev=this.current,this.current=e;const{delta:n,timestamp:r}=qh;this.lastUpdated!==r&&(this.timeDelta=n,this.lastUpdated=r,Hh.postRender(this.scheduleVelocityCheck)),this.prev!==this.current&&this.events.change&&this.events.change.notify(this.current),this.events.velocityChange&&this.events.velocityChange.notify(this.getVelocity()),t&&this.events.renderRequest&&this.events.renderRequest.notify(this.current)},this.scheduleVelocityCheck=()=>Hh.postRender(this.velocityCheck),this.velocityCheck=({timestamp:e})=>{e!==this.lastUpdated&&(this.prev=this.current,this.events.velocityChange&&this.events.velocityChange.notify(this.getVelocity()))},this.hasAnimated=!1,this.prev=this.current=e,this.canTrackVelocity=(n=this.current,!isNaN(parseFloat(n))),this.owner=t.owner}onChange(e){return this.on("change",e)}on(e,t){this.events[e]||(this.events[e]=new Qy);const n=this.events[e].add(t);return"change"===e?()=>{n(),Hh.read((()=>{this.events.change.getSize()||this.stop()}))}:n}clearListeners(){for(const e in this.events)this.events[e].clear()}attach(e,t){this.passiveEffect=e,this.stopPassiveEffect=t}set(e,t=!0){t&&this.passiveEffect?this.passiveEffect(e,this.updateAndNotify):this.updateAndNotify(e,t)}setWithVelocity(e,t,n){this.set(t),this.prev=e,this.timeDelta=n}jump(e){this.updateAndNotify(e),this.prev=e,this.stop(),this.stopPassiveEffect&&this.stopPassiveEffect()}get(){return Ky.current&&Ky.current.push(this),this.current}getPrevious(){return this.prev}getVelocity(){return this.canTrackVelocity?ay(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0}start(e){return this.stop(),new Promise((t=>{this.hasAnimated=!0,this.animation=e(t),this.events.animationStart&&this.events.animationStart.notify()})).then((()=>{this.events.animationComplete&&this.events.animationComplete.notify(),this.clearAnimation()}))}stop(){this.animation&&(this.animation.stop(),this.events.animationCancel&&this.events.animationCancel.notify()),this.clearAnimation()}isAnimating(){return!!this.animation}clearAnimation(){delete this.animation}destroy(){this.clearListeners(),this.stop(),this.stopPassiveEffect&&this.stopPassiveEffect()}}function Jy(e,t){return new Zy(e,t)}const eb=e=>t=>t.test(e),tb=[Lm,Qm,Xm,Ym,Zm,Km,{test:e=>"auto"===e,parse:e=>e}],nb=e=>tb.find(eb(e)),rb=[...tb,Ov,Xv],ob=e=>rb.find(eb(e));function ab(e,t,n){e.hasValue(t)?e.getValue(t).set(n):e.addValue(t,Jy(n))}function ib(e,t){if(t)return(t[e]||t.default||t).from}function sb({protectedKeys:e,needsAnimating:t},n){const r=e.hasOwnProperty(n)&&!0!==t[n];return t[n]=!1,r}function lb(e,t){const n=e.get();if(!Array.isArray(t))return n!==t;for(let e=0;e<t.length;e++)if(t[e]!==n)return!0}function cb(e,t,{delay:n=0,transitionOverride:r,type:o}={}){let{transition:a=e.getDefaultTransition(),transitionEnd:i,...s}=e.makeTargetAnimatable(t);const l=e.getValue("willChange");r&&(a=r);const c=[],u=o&&e.animationState&&e.animationState.getState()[o];for(const t in s){const r=e.getValue(t),o=s[t];if(!r||void 0===o||u&&sb(u,t))continue;const i={delay:n,elapsed:0,...Hy(a||{},t)};if(window.HandoffAppearAnimations){const n=e.getProps()[cm];if(n){const e=window.HandoffAppearAnimations(n,t,r,Hh);null!==e&&(i.elapsed=e,i.isHandoff=!0)}}let d=!i.isHandoff&&!lb(r,o);if("spring"===i.type&&(r.getVelocity()||i.velocity)&&(d=!1),r.animation&&(d=!1),d)continue;r.start(Uy(t,r,o,e.shouldReduceMotion&&Tm.has(t)?{type:!1}:i));const f=r.animation;qy(l)&&(l.add(t),f.then((()=>l.remove(t)))),c.push(f)}return i&&Promise.all(c).then((()=>{i&&function(e,t){const n=tv(e,t);let{transitionEnd:r={},transition:o={},...a}=n?e.makeTargetAnimatable(n,!1):{};a={...a,...r};for(const t in a)ab(e,t,_g(a[t]))}(e,i)})),c}function ub(e,t,n={}){const r=tv(e,t,n.custom);let{transition:o=e.getDefaultTransition()||{}}=r||{};n.transitionOverride&&(o=n.transitionOverride);const a=r?()=>Promise.all(cb(e,r,n)):()=>Promise.resolve(),i=e.variantChildren&&e.variantChildren.size?(r=0)=>{const{delayChildren:a=0,staggerChildren:i,staggerDirection:s}=o;return function(e,t,n=0,r=0,o=1,a){const i=[],s=(e.variantChildren.size-1)*r,l=1===o?(e=0)=>e*r:(e=0)=>s-e*r;return Array.from(e.variantChildren).sort(db).forEach(((e,r)=>{e.notify("AnimationStart",t),i.push(ub(e,t,{...a,delay:n+l(r)}).then((()=>e.notify("AnimationComplete",t))))})),Promise.all(i)}(e,t,a+r,i,s,n)}:()=>Promise.resolve(),{when:s}=o;if(s){const[e,t]="beforeChildren"===s?[a,i]:[i,a];return e().then((()=>t()))}return Promise.all([a(),i(n.delay)])}function db(e,t){return e.sortNodePosition(t)}const fb=[...pm].reverse(),pb=pm.length;function hb(e){let t=function(e){return t=>Promise.all(t.map((({animation:t,options:n})=>function(e,t,n={}){let r;if(e.notify("AnimationStart",t),Array.isArray(t)){const o=t.map((t=>ub(e,t,n)));r=Promise.all(o)}else if("string"==typeof t)r=ub(e,t,n);else{const o="function"==typeof t?tv(e,t,n.custom):t;r=Promise.all(cb(e,o,n))}return r.then((()=>e.notify("AnimationComplete",t)))}(e,t,n))))}(e);const n={animate:gb(!0),whileInView:gb(),whileHover:gb(),whileTap:gb(),whileDrag:gb(),whileFocus:gb(),exit:gb()};let r=!0;const o=(t,n)=>{const r=tv(e,n);if(r){const{transition:e,transitionEnd:n,...o}=r;t={...t,...o,...n}}return t};function a(a,i){const s=e.getProps(),l=e.getVariantContext(!0)||{},c=[],u=new Set;let d={},f=1/0;for(let t=0;t<pb;t++){const p=fb[t],h=n[p],m=void 0!==s[p]?s[p]:l[p],g=dm(m),v=p===i?h.isActive:null;!1===v&&(f=t);let y=m===l[p]&&m!==s[p]&&g;if(y&&r&&e.manuallyAnimateOnMount&&(y=!1),h.protectedKeys={...d},!h.isActive&&null===v||!m&&!h.prevProp||fm(m)||"boolean"==typeof m)continue;const b=mb(h.prevProp,m);let x=b||p===i&&h.isActive&&!y&&g||t>f&&g;const w=Array.isArray(m)?m:[m];let k=w.reduce(o,{});!1===v&&(k={});const{prevResolvedValues:S={}}=h,E={...S,...k},C=e=>{x=!0,u.delete(e),h.needsAnimating[e]=!0};for(const e in E){const t=k[e],n=S[e];d.hasOwnProperty(e)||(t!==n?Eg(t)&&Eg(n)?!ev(t,n)||b?C(e):h.protectedKeys[e]=!0:void 0!==t?C(e):u.add(e):void 0!==t&&u.has(e)?C(e):h.protectedKeys[e]=!0)}h.prevProp=m,h.prevResolvedValues=k,h.isActive&&(d={...d,...k}),r&&e.blockInitialAnimation&&(x=!1),x&&!y&&c.push(...w.map((e=>({animation:e,options:{type:p,...a}}))))}if(u.size){const t={};u.forEach((n=>{const r=e.getBaseTarget(n);void 0!==r&&(t[n]=r)})),c.push({animation:t})}let p=Boolean(c.length);return!r||!1!==s.initial&&s.initial!==s.animate||e.manuallyAnimateOnMount||(p=!1),r=!1,p?t(c):Promise.resolve()}return{animateChanges:a,setActive:function(t,r,o){var i;if(n[t].isActive===r)return Promise.resolve();null===(i=e.variantChildren)||void 0===i||i.forEach((e=>{var n;return null===(n=e.animationState)||void 0===n?void 0:n.setActive(t,r)})),n[t].isActive=r;const s=a(o,t);for(const e in n)n[e].protectedKeys={};return s},setAnimateFunction:function(n){t=n(e)},getState:()=>n}}function mb(e,t){return"string"==typeof t?t!==e:!!Array.isArray(t)&&!ev(t,e)}function gb(e=!1){return{isActive:e,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}let vb=0;const yb={animation:{Feature:class extends Hg{constructor(e){super(e),e.animationState||(e.animationState=hb(e))}updateAnimationControlsSubscription(){const{animate:e}=this.node.getProps();this.unmount(),fm(e)&&(this.unmount=e.subscribe(this.node))}mount(){this.updateAnimationControlsSubscription()}update(){const{animate:e}=this.node.getProps(),{animate:t}=this.node.prevProps||{};e!==t&&this.updateAnimationControlsSubscription()}unmount(){}}},exit:{Feature:class extends Hg{constructor(){super(...arguments),this.id=vb++}update(){if(!this.node.presenceContext)return;const{isPresent:e,onExitComplete:t,custom:n}=this.node.presenceContext,{isPresent:r}=this.node.prevPresenceContext||{};if(!this.node.animationState||e===r)return;const o=this.node.animationState.setActive("exit",!e,{custom:null!=n?n:this.node.getProps().custom});t&&!e&&o.then((()=>t(this.id)))}mount(){const{register:e}=this.node.presenceContext||{};e&&(this.unmount=e(this.id))}unmount(){}}}},bb=(e,t)=>Math.abs(e-t);class xb{constructor(e,t,{transformPagePoint:n,contextWindow:r}={}){if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.contextWindow=window,this.updatePoint=()=>{if(!this.lastMoveEvent||!this.lastMoveEventInfo)return;const e=Sb(this.lastMoveEventInfo,this.history),t=null!==this.startEvent,n=function(e,t){const n=bb(e.x,t.x),r=bb(e.y,t.y);return Math.sqrt(n**2+r**2)}(e.offset,{x:0,y:0})>=3;if(!t&&!n)return;const{point:r}=e,{timestamp:o}=qh;this.history.push({...r,timestamp:o});const{onStart:a,onMove:i}=this.handlers;t||(a&&a(this.lastMoveEvent,e),this.startEvent=this.lastMoveEvent),i&&i(this.lastMoveEvent,e)},this.handlePointerMove=(e,t)=>{this.lastMoveEvent=e,this.lastMoveEventInfo=wb(t,this.transformPagePoint),Hh.update(this.updatePoint,!0)},this.handlePointerUp=(e,t)=>{if(this.end(),!this.lastMoveEvent||!this.lastMoveEventInfo)return;const{onEnd:n,onSessionEnd:r}=this.handlers,o=Sb("pointercancel"===e.type?this.lastMoveEventInfo:wb(t,this.transformPagePoint),this.history);this.startEvent&&n&&n(e,o),r&&r(e,o)},!Og(e))return;this.handlers=t,this.transformPagePoint=n,this.contextWindow=r||window;const o=wb(Rg(e),this.transformPagePoint),{point:a}=o,{timestamp:i}=qh;this.history=[{...a,timestamp:i}];const{onSessionStart:s}=t;s&&s(e,Sb(o,this.history)),this.removeListeners=Dg(Ig(this.contextWindow,"pointermove",this.handlePointerMove),Ig(this.contextWindow,"pointerup",this.handlePointerUp),Ig(this.contextWindow,"pointercancel",this.handlePointerUp))}updateHandlers(e){this.handlers=e}end(){this.removeListeners&&this.removeListeners(),Uh(this.updatePoint)}}function wb(e,t){return t?{point:t(e.point)}:e}function kb(e,t){return{x:e.x-t.x,y:e.y-t.y}}function Sb({point:e},t){return{point:e,delta:kb(e,Cb(t)),offset:kb(e,Eb(t)),velocity:_b(t,.1)}}function Eb(e){return e[0]}function Cb(e){return e[e.length-1]}function _b(e,t){if(e.length<2)return{x:0,y:0};let n=e.length-1,r=null;const o=Cb(e);for(;n>=0&&(r=e[n],!(o.timestamp-r.timestamp>nv(t)));)n--;if(!r)return{x:0,y:0};const a=rv(o.timestamp-r.timestamp);if(0===a)return{x:0,y:0};const i={x:(o.x-r.x)/a,y:(o.y-r.y)/a};return i.x===1/0&&(i.x=0),i.y===1/0&&(i.y=0),i}function Pb(e){return e.max-e.min}function Ab(e,t=0,n=.01){return Math.abs(e-t)<=n}function Tb(e,t,n,r=.5){e.origin=r,e.originPoint=Rv(t.min,t.max,e.origin),e.scale=Pb(n)/Pb(t),(Ab(e.scale,1,1e-4)||isNaN(e.scale))&&(e.scale=1),e.translate=Rv(n.min,n.max,e.origin)-e.originPoint,(Ab(e.translate)||isNaN(e.translate))&&(e.translate=0)}function zb(e,t,n,r){Tb(e.x,t.x,n.x,r?r.originX:void 0),Tb(e.y,t.y,n.y,r?r.originY:void 0)}function Mb(e,t,n){e.min=n.min+t.min,e.max=e.min+Pb(t)}function Fb(e,t,n){e.min=t.min-n.min,e.max=e.min+Pb(t)}function Ob(e,t,n){Fb(e.x,t.x,n.x),Fb(e.y,t.y,n.y)}function Rb(e,t,n){return{min:void 0!==t?e.min+t:void 0,max:void 0!==n?e.max+n-(e.max-e.min):void 0}}function jb(e,t){let n=t.min-e.min,r=t.max-e.max;return t.max-t.min<e.max-e.min&&([n,r]=[r,n]),{min:n,max:r}}const Ib=.35;function Nb(e,t,n){return{min:Db(e,t),max:Db(e,n)}}function Db(e,t){return"number"==typeof e?e:e[t]||0}const Lb=()=>({x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}}),Bb=()=>({x:{min:0,max:0},y:{min:0,max:0}});function $b(e){return[e("x"),e("y")]}function Vb({top:e,left:t,right:n,bottom:r}){return{x:{min:t,max:n},y:{min:e,max:r}}}function Wb(e){return void 0===e||1===e}function Hb({scale:e,scaleX:t,scaleY:n}){return!Wb(e)||!Wb(t)||!Wb(n)}function Ub(e){return Hb(e)||qb(e)||e.z||e.rotate||e.rotateX||e.rotateY}function qb(e){return Gb(e.x)||Gb(e.y)}function Gb(e){return e&&"0%"!==e}function Yb(e,t,n){return n+t*(e-n)}function Xb(e,t,n,r,o){return void 0!==o&&(e=Yb(e,o,r)),Yb(e,n,r)+t}function Qb(e,t=0,n=1,r,o){e.min=Xb(e.min,t,n,r,o),e.max=Xb(e.max,t,n,r,o)}function Kb(e,{x:t,y:n}){Qb(e.x,t.translate,t.scale,t.originPoint),Qb(e.y,n.translate,n.scale,n.originPoint)}function Zb(e){return Number.isInteger(e)||e>1.0000000000001||e<.999999999999?e:1}function Jb(e,t){e.min=e.min+t,e.max=e.max+t}function ex(e,t,[n,r,o]){const a=void 0!==t[o]?t[o]:.5,i=Rv(e.min,e.max,a);Qb(e,t[n],t[r],i,t.scale)}const tx=["x","scaleX","originX"],nx=["y","scaleY","originY"];function rx(e,t){ex(e.x,t,tx),ex(e.y,t,nx)}function ox(e,t){return Vb(function(e,t){if(!t)return e;const n=t({x:e.left,y:e.top}),r=t({x:e.right,y:e.bottom});return{top:n.y,left:n.x,bottom:r.y,right:r.x}}(e.getBoundingClientRect(),t))}const ax=({current:e})=>e?e.ownerDocument.defaultView:null,ix=new WeakMap;class sx{constructor(e){this.openGlobalLock=null,this.isDragging=!1,this.currentDirection=null,this.originPoint={x:0,y:0},this.constraints=!1,this.hasMutatedConstraints=!1,this.elastic=Bb(),this.visualElement=e}start(e,{snapToCursor:t=!1}={}){const{presenceContext:n}=this.visualElement;n&&!1===n.isPresent||(this.panSession=new xb(e,{onSessionStart:e=>{this.stopAnimation(),t&&this.snapToCursor(Rg(e,"page").point)},onStart:(e,t)=>{const{drag:n,dragPropagation:r,onDragStart:o}=this.getProps();if(n&&!r&&(this.openGlobalLock&&this.openGlobalLock(),this.openGlobalLock=Vg(n),!this.openGlobalLock))return;this.isDragging=!0,this.currentDirection=null,this.resolveConstraints(),this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!0,this.visualElement.projection.target=void 0),$b((e=>{let t=this.getAxisMotionValue(e).get()||0;if(Xm.test(t)){const{projection:n}=this.visualElement;if(n&&n.layout){const r=n.layout.layoutBox[e];r&&(t=Pb(r)*(parseFloat(t)/100))}}this.originPoint[e]=t})),o&&Hh.update((()=>o(e,t)),!1,!0);const{animationState:a}=this.visualElement;a&&a.setActive("whileDrag",!0)},onMove:(e,t)=>{const{dragPropagation:n,dragDirectionLock:r,onDirectionLock:o,onDrag:a}=this.getProps();if(!n&&!this.openGlobalLock)return;const{offset:i}=t;if(r&&null===this.currentDirection)return this.currentDirection=function(e,t=10){let n=null;return Math.abs(e.y)>t?n="y":Math.abs(e.x)>t&&(n="x"),n}(i),void(null!==this.currentDirection&&o&&o(this.currentDirection));this.updateAxis("x",t.point,i),this.updateAxis("y",t.point,i),this.visualElement.render(),a&&a(e,t)},onSessionEnd:(e,t)=>this.stop(e,t)},{transformPagePoint:this.visualElement.getTransformPagePoint(),contextWindow:ax(this.visualElement)}))}stop(e,t){const n=this.isDragging;if(this.cancel(),!n)return;const{velocity:r}=t;this.startAnimation(r);const{onDragEnd:o}=this.getProps();o&&Hh.update((()=>o(e,t)))}cancel(){this.isDragging=!1;const{projection:e,animationState:t}=this.visualElement;e&&(e.isAnimationBlocked=!1),this.panSession&&this.panSession.end(),this.panSession=void 0;const{dragPropagation:n}=this.getProps();!n&&this.openGlobalLock&&(this.openGlobalLock(),this.openGlobalLock=null),t&&t.setActive("whileDrag",!1)}updateAxis(e,t,n){const{drag:r}=this.getProps();if(!n||!lx(e,r,this.currentDirection))return;const o=this.getAxisMotionValue(e);let a=this.originPoint[e]+n[e];this.constraints&&this.constraints[e]&&(a=function(e,{min:t,max:n},r){return void 0!==t&&e<t?e=r?Rv(t,e,r.min):Math.max(e,t):void 0!==n&&e>n&&(e=r?Rv(n,e,r.max):Math.min(e,n)),e}(a,this.constraints[e],this.elastic[e])),o.set(a)}resolveConstraints(){var e;const{dragConstraints:t,dragElastic:n}=this.getProps(),r=this.visualElement.projection&&!this.visualElement.projection.layout?this.visualElement.projection.measure(!1):null===(e=this.visualElement.projection)||void 0===e?void 0:e.layout,o=this.constraints;t&&um(t)?this.constraints||(this.constraints=this.resolveRefConstraints()):this.constraints=!(!t||!r)&&function(e,{top:t,left:n,bottom:r,right:o}){return{x:Rb(e.x,n,o),y:Rb(e.y,t,r)}}(r.layoutBox,t),this.elastic=function(e=Ib){return!1===e?e=0:!0===e&&(e=Ib),{x:Nb(e,"left","right"),y:Nb(e,"top","bottom")}}(n),o!==this.constraints&&r&&this.constraints&&!this.hasMutatedConstraints&&$b((e=>{this.getAxisMotionValue(e)&&(this.constraints[e]=function(e,t){const n={};return void 0!==t.min&&(n.min=t.min-e.min),void 0!==t.max&&(n.max=t.max-e.min),n}(r.layoutBox[e],this.constraints[e]))}))}resolveRefConstraints(){const{dragConstraints:e,onMeasureDragConstraints:t}=this.getProps();if(!e||!um(e))return!1;const n=e.current;nm(null!==n,"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");const{projection:r}=this.visualElement;if(!r||!r.layout)return!1;const o=function(e,t,n){const r=ox(e,n),{scroll:o}=t;return o&&(Jb(r.x,o.offset.x),Jb(r.y,o.offset.y)),r}(n,r.root,this.visualElement.getTransformPagePoint());let a=function(e,t){return{x:jb(e.x,t.x),y:jb(e.y,t.y)}}(r.layout.layoutBox,o);if(t){const e=t(function({x:e,y:t}){return{top:t.min,right:e.max,bottom:t.max,left:e.min}}(a));this.hasMutatedConstraints=!!e,e&&(a=Vb(e))}return a}startAnimation(e){const{drag:t,dragMomentum:n,dragElastic:r,dragTransition:o,dragSnapToOrigin:a,onDragTransitionEnd:i}=this.getProps(),s=this.constraints||{},l=$b((i=>{if(!lx(i,t,this.currentDirection))return;let l=s&&s[i]||{};a&&(l={min:0,max:0});const c=r?200:1e6,u=r?40:1e7,d={type:"inertia",velocity:n?e[i]:0,bounceStiffness:c,bounceDamping:u,timeConstant:750,restDelta:1,restSpeed:10,...o,...l};return this.startAxisValueAnimation(i,d)}));return Promise.all(l).then(i)}startAxisValueAnimation(e,t){const n=this.getAxisMotionValue(e);return n.start(Uy(e,n,0,t))}stopAnimation(){$b((e=>this.getAxisMotionValue(e).stop()))}getAxisMotionValue(e){const t="_drag"+e.toUpperCase(),n=this.visualElement.getProps();return n[t]||this.visualElement.getValue(e,(n.initial?n.initial[e]:void 0)||0)}snapToCursor(e){$b((t=>{const{drag:n}=this.getProps();if(!lx(t,n,this.currentDirection))return;const{projection:r}=this.visualElement,o=this.getAxisMotionValue(t);if(r&&r.layout){const{min:n,max:a}=r.layout.layoutBox[t];o.set(e[t]-Rv(n,a,.5))}}))}scalePositionWithinConstraints(){if(!this.visualElement.current)return;const{drag:e,dragConstraints:t}=this.getProps(),{projection:n}=this.visualElement;if(!um(t)||!n||!this.constraints)return;this.stopAnimation();const r={x:0,y:0};$b((e=>{const t=this.getAxisMotionValue(e);if(t){const n=t.get();r[e]=function(e,t){let n=.5;const r=Pb(e),o=Pb(t);return o>r?n=ty(t.min,t.max-r,e.min):r>o&&(n=ty(e.min,e.max-o,t.min)),Dm(0,1,n)}({min:n,max:n},this.constraints[e])}}));const{transformTemplate:o}=this.visualElement.getProps();this.visualElement.current.style.transform=o?o({},""):"none",n.root&&n.root.updateScroll(),n.updateLayout(),this.resolveConstraints(),$b((t=>{if(!lx(t,e,null))return;const n=this.getAxisMotionValue(t),{min:o,max:a}=this.constraints[t];n.set(Rv(o,a,r[t]))}))}addListeners(){if(!this.visualElement.current)return;ix.set(this.visualElement,this);const e=Ig(this.visualElement.current,"pointerdown",(e=>{const{drag:t,dragListener:n=!0}=this.getProps();t&&n&&this.start(e)})),t=()=>{const{dragConstraints:e}=this.getProps();um(e)&&(this.constraints=this.resolveRefConstraints())},{projection:n}=this.visualElement,r=n.addEventListener("measure",t);n&&!n.layout&&(n.root&&n.root.updateScroll(),n.updateLayout()),t();const o=Fg(window,"resize",(()=>this.scalePositionWithinConstraints())),a=n.addEventListener("didUpdate",(({delta:e,hasLayoutChanged:t})=>{this.isDragging&&t&&($b((t=>{const n=this.getAxisMotionValue(t);n&&(this.originPoint[t]+=e[t].translate,n.set(n.get()+e[t].translate))})),this.visualElement.render())}));return()=>{o(),e(),r(),a&&a()}}getProps(){const e=this.visualElement.getProps(),{drag:t=!1,dragDirectionLock:n=!1,dragPropagation:r=!1,dragConstraints:o=!1,dragElastic:a=Ib,dragMomentum:i=!0}=e;return{...e,drag:t,dragDirectionLock:n,dragPropagation:r,dragConstraints:o,dragElastic:a,dragMomentum:i}}}function lx(e,t,n){return!(!0!==t&&t!==e||null!==n&&n!==e)}const cx=e=>(t,n)=>{e&&Hh.update((()=>e(t,n)))};function ux(){const t=(0,e.useContext)(Yh);if(null===t)return[!0,null];const{isPresent:n,onExitComplete:r,register:o}=t,a=(0,e.useId)();return(0,e.useEffect)((()=>o(a)),[]),!n&&r?[!1,()=>r&&r(a)]:[!0]}const dx={hasAnimatedSinceResize:!0,hasEverUpdated:!1};function fx(e,t){return t.max===t.min?0:e/(t.max-t.min)*100}const px={correct:(e,t)=>{if(!t.target)return e;if("string"==typeof e){if(!Qm.test(e))return e;e=parseFloat(e)}return`${fx(e,t.target.x)}% ${fx(e,t.target.y)}%`}},hx={correct:(e,{treeScale:t,projectionDelta:n})=>{const r=e,o=Xv.parse(e);if(o.length>5)return r;const a=Xv.createTransformer(e),i="number"!=typeof o[0]?1:0,s=n.x.scale*t.x,l=n.y.scale*t.y;o[0+i]/=s,o[1+i]/=l;const c=Rv(s,l,.5);return"number"==typeof o[2+i]&&(o[2+i]/=c),"number"==typeof o[3+i]&&(o[3+i]/=c),a(o)}};class mx extends e.Component{componentDidMount(){const{visualElement:e,layoutGroup:t,switchLayoutGroup:n,layoutId:r}=this.props,{projection:o}=e;var a;a=vx,Object.assign(Pm,a),o&&(t.group&&t.group.add(o),n&&n.register&&r&&n.register(o),o.root.didUpdate(),o.addEventListener("animationComplete",(()=>{this.safeToRemove()})),o.setOptions({...o.options,onExitComplete:()=>this.safeToRemove()})),dx.hasEverUpdated=!0}getSnapshotBeforeUpdate(e){const{layoutDependency:t,visualElement:n,drag:r,isPresent:o}=this.props,a=n.projection;return a?(a.isPresent=o,r||e.layoutDependency!==t||void 0===t?a.willUpdate():this.safeToRemove(),e.isPresent!==o&&(o?a.promote():a.relegate()||Hh.postRender((()=>{const e=a.getStack();e&&e.members.length||this.safeToRemove()}))),null):null}componentDidUpdate(){const{projection:e}=this.props.visualElement;e&&(e.root.didUpdate(),queueMicrotask((()=>{!e.currentAnimation&&e.isLead()&&this.safeToRemove()})))}componentWillUnmount(){const{visualElement:e,layoutGroup:t,switchLayoutGroup:n}=this.props,{projection:r}=e;r&&(r.scheduleCheckAfterUnmount(),t&&t.group&&t.group.remove(r),n&&n.deregister&&n.deregister(r))}safeToRemove(){const{safeToRemove:e}=this.props;e&&e()}render(){return null}}function gx(t){const[n,r]=ux(),o=(0,e.useContext)(em);return e.createElement(mx,{...t,layoutGroup:o,switchLayoutGroup:(0,e.useContext)(xm),isPresent:n,safeToRemove:r})}const vx={borderRadius:{...px,applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]},borderTopLeftRadius:px,borderTopRightRadius:px,borderBottomLeftRadius:px,borderBottomRightRadius:px,boxShadow:hx},yx=["TopLeft","TopRight","BottomLeft","BottomRight"],bx=yx.length,xx=e=>"string"==typeof e?parseFloat(e):e,wx=e=>"number"==typeof e||Qm.test(e);function kx(e,t){return void 0!==e[t]?e[t]:e.borderRadius}const Sx=Cx(0,.5,xv),Ex=Cx(.5,.95,$h);function Cx(e,t,n){return r=>r<e?0:r>t?1:n(ty(e,t,r))}function _x(e,t){e.min=t.min,e.max=t.max}function Px(e,t){_x(e.x,t.x),_x(e.y,t.y)}function Ax(e,t,n,r,o){return e=Yb(e-=t,1/n,r),void 0!==o&&(e=Yb(e,1/o,r)),e}function Tx(e,t,[n,r,o],a,i){!function(e,t=0,n=1,r=.5,o,a=e,i=e){if(Xm.test(t)&&(t=parseFloat(t),t=Rv(i.min,i.max,t/100)-i.min),"number"!=typeof t)return;let s=Rv(a.min,a.max,r);e===a&&(s-=t),e.min=Ax(e.min,t,n,s,o),e.max=Ax(e.max,t,n,s,o)}(e,t[n],t[r],t[o],t.scale,a,i)}const zx=["x","scaleX","originX"],Mx=["y","scaleY","originY"];function Fx(e,t,n,r){Tx(e.x,t,zx,n?n.x:void 0,r?r.x:void 0),Tx(e.y,t,Mx,n?n.y:void 0,r?r.y:void 0)}function Ox(e){return 0===e.translate&&1===e.scale}function Rx(e){return Ox(e.x)&&Ox(e.y)}function jx(e,t){return Math.round(e.x.min)===Math.round(t.x.min)&&Math.round(e.x.max)===Math.round(t.x.max)&&Math.round(e.y.min)===Math.round(t.y.min)&&Math.round(e.y.max)===Math.round(t.y.max)}function Ix(e){return Pb(e.x)/Pb(e.y)}class Nx{constructor(){this.members=[]}add(e){Yy(this.members,e),e.scheduleRender()}remove(e){if(Xy(this.members,e),e===this.prevLead&&(this.prevLead=void 0),e===this.lead){const e=this.members[this.members.length-1];e&&this.promote(e)}}relegate(e){const t=this.members.findIndex((t=>e===t));if(0===t)return!1;let n;for(let e=t;e>=0;e--){const t=this.members[e];if(!1!==t.isPresent){n=t;break}}return!!n&&(this.promote(n),!0)}promote(e,t){const n=this.lead;if(e!==n&&(this.prevLead=n,this.lead=e,e.show(),n)){n.instance&&n.scheduleRender(),e.scheduleRender(),e.resumeFrom=n,t&&(e.resumeFrom.preserveOpacity=!0),n.snapshot&&(e.snapshot=n.snapshot,e.snapshot.latestValues=n.animationValues||n.latestValues),e.root&&e.root.isUpdating&&(e.isLayoutDirty=!0);const{crossfade:r}=e.options;!1===r&&n.hide()}}exitAnimationComplete(){this.members.forEach((e=>{const{options:t,resumingFrom:n}=e;t.onExitComplete&&t.onExitComplete(),n&&n.options.onExitComplete&&n.options.onExitComplete()}))}scheduleRender(){this.members.forEach((e=>{e.instance&&e.scheduleRender(!1)}))}removeLeadSnapshot(){this.lead&&this.lead.snapshot&&(this.lead.snapshot=void 0)}}function Dx(e,t,n){let r="";const o=e.x.translate/t.x,a=e.y.translate/t.y;if((o||a)&&(r=`translate3d(${o}px, ${a}px, 0) `),1===t.x&&1===t.y||(r+=`scale(${1/t.x}, ${1/t.y}) `),n){const{rotate:e,rotateX:t,rotateY:o}=n;e&&(r+=`rotate(${e}deg) `),t&&(r+=`rotateX(${t}deg) `),o&&(r+=`rotateY(${o}deg) `)}const i=e.x.scale*t.x,s=e.y.scale*t.y;return 1===i&&1===s||(r+=`scale(${i}, ${s})`),r||"none"}const Lx=(e,t)=>e.depth-t.depth;class Bx{constructor(){this.children=[],this.isDirty=!1}add(e){Yy(this.children,e),this.isDirty=!0}remove(e){Xy(this.children,e),this.isDirty=!0}forEach(e){this.isDirty&&this.children.sort(Lx),this.isDirty=!1,this.children.forEach(e)}}const $x=["","X","Y","Z"],Vx={visibility:"hidden"},Wx=1e3;let Hx=0;const Ux={type:"projectionFrame",totalNodes:0,resolvedTargetDeltas:0,recalculatedProjection:0};function qx({attachResizeListener:e,defaultParent:t,measureScroll:n,checkIsScrollRoot:r,resetTransform:o}){return class{constructor(e={},n=(null==t?void 0:t())){this.id=Hx++,this.animationId=0,this.children=new Set,this.options={},this.isTreeAnimating=!1,this.isAnimationBlocked=!1,this.isLayoutDirty=!1,this.isProjectionDirty=!1,this.isSharedProjectionDirty=!1,this.isTransformDirty=!1,this.updateManuallyBlocked=!1,this.updateBlockedByResize=!1,this.isUpdating=!1,this.isSVG=!1,this.needsReset=!1,this.shouldResetTransform=!1,this.treeScale={x:1,y:1},this.eventHandlers=new Map,this.hasTreeAnimated=!1,this.updateScheduled=!1,this.projectionUpdateScheduled=!1,this.checkUpdateFailed=()=>{this.isUpdating&&(this.isUpdating=!1,this.clearAllSnapshots())},this.updateProjection=()=>{var e;this.projectionUpdateScheduled=!1,Ux.totalNodes=Ux.resolvedTargetDeltas=Ux.recalculatedProjection=0,this.nodes.forEach(Xx),this.nodes.forEach(nw),this.nodes.forEach(rw),this.nodes.forEach(Qx),e=Ux,window.MotionDebug&&window.MotionDebug.record(e)},this.hasProjected=!1,this.isVisible=!0,this.animationProgress=0,this.sharedNodes=new Map,this.latestValues=e,this.root=n?n.root||n:this,this.path=n?[...n.path,n]:[],this.parent=n,this.depth=n?n.depth+1:0;for(let e=0;e<this.path.length;e++)this.path[e].shouldResetTransform=!0;this.root===this&&(this.nodes=new Bx)}addEventListener(e,t){return this.eventHandlers.has(e)||this.eventHandlers.set(e,new Qy),this.eventHandlers.get(e).add(t)}notifyListeners(e,...t){const n=this.eventHandlers.get(e);n&&n.notify(...t)}hasListeners(e){return this.eventHandlers.has(e)}mount(t,n=this.root.hasTreeAnimated){if(this.instance)return;var r;this.isSVG=(r=t)instanceof SVGElement&&"svg"!==r.tagName,this.instance=t;const{layoutId:o,layout:a,visualElement:i}=this.options;if(i&&!i.current&&i.mount(t),this.root.nodes.add(this),this.parent&&this.parent.children.add(this),n&&(a||o)&&(this.isLayoutDirty=!0),e){let n;const r=()=>this.root.updateBlockedByResize=!1;e(t,(()=>{this.root.updateBlockedByResize=!0,n&&n(),n=function(e,t){const n=performance.now(),r=({timestamp:t})=>{const o=t-n;o>=250&&(Uh(r),e(o-250))};return Hh.read(r,!0),()=>Uh(r)}(r),dx.hasAnimatedSinceResize&&(dx.hasAnimatedSinceResize=!1,this.nodes.forEach(tw))}))}o&&this.root.registerSharedNode(o,this),!1!==this.options.animate&&i&&(o||a)&&this.addEventListener("didUpdate",(({delta:e,hasLayoutChanged:t,hasRelativeTargetChanged:n,layout:r})=>{if(this.isTreeAnimationBlocked())return this.target=void 0,void(this.relativeTarget=void 0);const o=this.options.transition||i.getDefaultTransition()||cw,{onLayoutAnimationStart:a,onLayoutAnimationComplete:s}=i.getProps(),l=!this.targetLayout||!jx(this.targetLayout,r)||n,c=!t&&n;if(this.options.layoutRoot||this.resumeFrom&&this.resumeFrom.instance||c||t&&(l||!this.currentAnimation)){this.resumeFrom&&(this.resumingFrom=this.resumeFrom,this.resumingFrom.resumingFrom=void 0),this.setAnimationOrigin(e,c);const t={...Hy(o,"layout"),onPlay:a,onComplete:s};(i.shouldReduceMotion||this.options.layoutRoot)&&(t.delay=0,t.type=!1),this.startAnimation(t)}else t||tw(this),this.isLead()&&this.options.onExitComplete&&this.options.onExitComplete();this.targetLayout=r}))}unmount(){this.options.layoutId&&this.willUpdate(),this.root.nodes.remove(this);const e=this.getStack();e&&e.remove(this),this.parent&&this.parent.children.delete(this),this.instance=void 0,Uh(this.updateProjection)}blockUpdate(){this.updateManuallyBlocked=!0}unblockUpdate(){this.updateManuallyBlocked=!1}isUpdateBlocked(){return this.updateManuallyBlocked||this.updateBlockedByResize}isTreeAnimationBlocked(){return this.isAnimationBlocked||this.parent&&this.parent.isTreeAnimationBlocked()||!1}startUpdate(){this.isUpdateBlocked()||(this.isUpdating=!0,this.nodes&&this.nodes.forEach(ow),this.animationId++)}getTransformTemplate(){const{visualElement:e}=this.options;return e&&e.getProps().transformTemplate}willUpdate(e=!0){if(this.root.hasTreeAnimated=!0,this.root.isUpdateBlocked())return void(this.options.onExitComplete&&this.options.onExitComplete());if(!this.root.isUpdating&&this.root.startUpdate(),this.isLayoutDirty)return;this.isLayoutDirty=!0;for(let e=0;e<this.path.length;e++){const t=this.path[e];t.shouldResetTransform=!0,t.updateScroll("snapshot"),t.options.layoutRoot&&t.willUpdate(!1)}const{layoutId:t,layout:n}=this.options;if(void 0===t&&!n)return;const r=this.getTransformTemplate();this.prevTransformTemplateValue=r?r(this.latestValues,""):void 0,this.updateSnapshot(),e&&this.notifyListeners("willUpdate")}update(){if(this.updateScheduled=!1,this.isUpdateBlocked())return this.unblockUpdate(),this.clearAllSnapshots(),void this.nodes.forEach(Zx);this.isUpdating||this.nodes.forEach(Jx),this.isUpdating=!1,this.nodes.forEach(ew),this.nodes.forEach(Gx),this.nodes.forEach(Yx),this.clearAllSnapshots();const e=performance.now();qh.delta=Dm(0,1e3/60,e-qh.timestamp),qh.timestamp=e,qh.isProcessing=!0,Gh.update.process(qh),Gh.preRender.process(qh),Gh.render.process(qh),qh.isProcessing=!1}didUpdate(){this.updateScheduled||(this.updateScheduled=!0,queueMicrotask((()=>this.update())))}clearAllSnapshots(){this.nodes.forEach(Kx),this.sharedNodes.forEach(aw)}scheduleUpdateProjection(){this.projectionUpdateScheduled||(this.projectionUpdateScheduled=!0,Hh.preRender(this.updateProjection,!1,!0))}scheduleCheckAfterUnmount(){Hh.postRender((()=>{this.isLayoutDirty?this.root.didUpdate():this.root.checkUpdateFailed()}))}updateSnapshot(){!this.snapshot&&this.instance&&(this.snapshot=this.measure())}updateLayout(){if(!this.instance)return;if(this.updateScroll(),!(this.options.alwaysMeasureLayout&&this.isLead()||this.isLayoutDirty))return;if(this.resumeFrom&&!this.resumeFrom.instance)for(let e=0;e<this.path.length;e++)this.path[e].updateScroll();const e=this.layout;this.layout=this.measure(!1),this.layoutCorrected=Bb(),this.isLayoutDirty=!1,this.projectionDelta=void 0,this.notifyListeners("measure",this.layout.layoutBox);const{visualElement:t}=this.options;t&&t.notify("LayoutMeasure",this.layout.layoutBox,e?e.layoutBox:void 0)}updateScroll(e="measure"){let t=Boolean(this.options.layoutScroll&&this.instance);this.scroll&&this.scroll.animationId===this.root.animationId&&this.scroll.phase===e&&(t=!1),t&&(this.scroll={animationId:this.root.animationId,phase:e,isRoot:r(this.instance),offset:n(this.instance)})}resetTransform(){if(!o)return;const e=this.isLayoutDirty||this.shouldResetTransform,t=this.projectionDelta&&!Rx(this.projectionDelta),n=this.getTransformTemplate(),r=n?n(this.latestValues,""):void 0,a=r!==this.prevTransformTemplateValue;e&&(t||Ub(this.latestValues)||a)&&(o(this.instance,r),this.shouldResetTransform=!1,this.scheduleRender())}measure(e=!0){const t=this.measurePageBox();let n=this.removeElementScroll(t);var r;return e&&(n=this.removeTransform(n)),fw((r=n).x),fw(r.y),{animationId:this.root.animationId,measuredBox:t,layoutBox:n,latestValues:{},source:this.id}}measurePageBox(){const{visualElement:e}=this.options;if(!e)return Bb();const t=e.measureViewportBox(),{scroll:n}=this.root;return n&&(Jb(t.x,n.offset.x),Jb(t.y,n.offset.y)),t}removeElementScroll(e){const t=Bb();Px(t,e);for(let n=0;n<this.path.length;n++){const r=this.path[n],{scroll:o,options:a}=r;if(r!==this.root&&o&&a.layoutScroll){if(o.isRoot){Px(t,e);const{scroll:n}=this.root;n&&(Jb(t.x,-n.offset.x),Jb(t.y,-n.offset.y))}Jb(t.x,o.offset.x),Jb(t.y,o.offset.y)}}return t}applyTransform(e,t=!1){const n=Bb();Px(n,e);for(let e=0;e<this.path.length;e++){const r=this.path[e];!t&&r.options.layoutScroll&&r.scroll&&r!==r.root&&rx(n,{x:-r.scroll.offset.x,y:-r.scroll.offset.y}),Ub(r.latestValues)&&rx(n,r.latestValues)}return Ub(this.latestValues)&&rx(n,this.latestValues),n}removeTransform(e){const t=Bb();Px(t,e);for(let e=0;e<this.path.length;e++){const n=this.path[e];if(!n.instance)continue;if(!Ub(n.latestValues))continue;Hb(n.latestValues)&&n.updateSnapshot();const r=Bb();Px(r,n.measurePageBox()),Fx(t,n.latestValues,n.snapshot?n.snapshot.layoutBox:void 0,r)}return Ub(this.latestValues)&&Fx(t,this.latestValues),t}setTargetDelta(e){this.targetDelta=e,this.root.scheduleUpdateProjection(),this.isProjectionDirty=!0}setOptions(e){this.options={...this.options,...e,crossfade:void 0===e.crossfade||e.crossfade}}clearMeasurements(){this.scroll=void 0,this.layout=void 0,this.snapshot=void 0,this.prevTransformTemplateValue=void 0,this.targetDelta=void 0,this.target=void 0,this.isLayoutDirty=!1}forceRelativeParentToResolveTarget(){this.relativeParent&&this.relativeParent.resolvedRelativeTargetAt!==qh.timestamp&&this.relativeParent.resolveTargetDelta(!0)}resolveTargetDelta(e=!1){var t;const n=this.getLead();this.isProjectionDirty||(this.isProjectionDirty=n.isProjectionDirty),this.isTransformDirty||(this.isTransformDirty=n.isTransformDirty),this.isSharedProjectionDirty||(this.isSharedProjectionDirty=n.isSharedProjectionDirty);const r=Boolean(this.resumingFrom)||this!==n;if(!(e||r&&this.isSharedProjectionDirty||this.isProjectionDirty||(null===(t=this.parent)||void 0===t?void 0:t.isProjectionDirty)||this.attemptToResolveRelativeTarget))return;const{layout:o,layoutId:a}=this.options;if(this.layout&&(o||a)){if(this.resolvedRelativeTargetAt=qh.timestamp,!this.targetDelta&&!this.relativeTarget){const e=this.getClosestProjectingParent();e&&e.layout&&1!==this.animationProgress?(this.relativeParent=e,this.forceRelativeParentToResolveTarget(),this.relativeTarget=Bb(),this.relativeTargetOrigin=Bb(),Ob(this.relativeTargetOrigin,this.layout.layoutBox,e.layout.layoutBox),Px(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}if(this.relativeTarget||this.targetDelta){var i,s,l;if(this.target||(this.target=Bb(),this.targetWithTransforms=Bb()),this.relativeTarget&&this.relativeTargetOrigin&&this.relativeParent&&this.relativeParent.target?(this.forceRelativeParentToResolveTarget(),i=this.target,s=this.relativeTarget,l=this.relativeParent.target,Mb(i.x,s.x,l.x),Mb(i.y,s.y,l.y)):this.targetDelta?(Boolean(this.resumingFrom)?this.target=this.applyTransform(this.layout.layoutBox):Px(this.target,this.layout.layoutBox),Kb(this.target,this.targetDelta)):Px(this.target,this.layout.layoutBox),this.attemptToResolveRelativeTarget){this.attemptToResolveRelativeTarget=!1;const e=this.getClosestProjectingParent();e&&Boolean(e.resumingFrom)===Boolean(this.resumingFrom)&&!e.options.layoutScroll&&e.target&&1!==this.animationProgress?(this.relativeParent=e,this.forceRelativeParentToResolveTarget(),this.relativeTarget=Bb(),this.relativeTargetOrigin=Bb(),Ob(this.relativeTargetOrigin,this.target,e.target),Px(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}Ux.resolvedTargetDeltas++}}}getClosestProjectingParent(){if(this.parent&&!Hb(this.parent.latestValues)&&!qb(this.parent.latestValues))return this.parent.isProjecting()?this.parent:this.parent.getClosestProjectingParent()}isProjecting(){return Boolean((this.relativeTarget||this.targetDelta||this.options.layoutRoot)&&this.layout)}calcProjection(){var e;const t=this.getLead(),n=Boolean(this.resumingFrom)||this!==t;let r=!0;if((this.isProjectionDirty||(null===(e=this.parent)||void 0===e?void 0:e.isProjectionDirty))&&(r=!1),n&&(this.isSharedProjectionDirty||this.isTransformDirty)&&(r=!1),this.resolvedRelativeTargetAt===qh.timestamp&&(r=!1),r)return;const{layout:o,layoutId:a}=this.options;if(this.isTreeAnimating=Boolean(this.parent&&this.parent.isTreeAnimating||this.currentAnimation||this.pendingAnimation),this.isTreeAnimating||(this.targetDelta=this.relativeTarget=void 0),!this.layout||!o&&!a)return;Px(this.layoutCorrected,this.layout.layoutBox);const i=this.treeScale.x,s=this.treeScale.y;!function(e,t,n,r=!1){const o=n.length;if(!o)return;let a,i;t.x=t.y=1;for(let s=0;s<o;s++){a=n[s],i=a.projectionDelta;const o=a.instance;o&&o.style&&"contents"===o.style.display||(r&&a.options.layoutScroll&&a.scroll&&a!==a.root&&rx(e,{x:-a.scroll.offset.x,y:-a.scroll.offset.y}),i&&(t.x*=i.x.scale,t.y*=i.y.scale,Kb(e,i)),r&&Ub(a.latestValues)&&rx(e,a.latestValues))}t.x=Zb(t.x),t.y=Zb(t.y)}(this.layoutCorrected,this.treeScale,this.path,n),!t.layout||t.target||1===this.treeScale.x&&1===this.treeScale.y||(t.target=t.layout.layoutBox);const{target:l}=t;if(!l)return void(this.projectionTransform&&(this.projectionDelta=Lb(),this.projectionTransform="none",this.scheduleRender()));this.projectionDelta||(this.projectionDelta=Lb(),this.projectionDeltaWithTransform=Lb());const c=this.projectionTransform;zb(this.projectionDelta,this.layoutCorrected,l,this.latestValues),this.projectionTransform=Dx(this.projectionDelta,this.treeScale),this.projectionTransform===c&&this.treeScale.x===i&&this.treeScale.y===s||(this.hasProjected=!0,this.scheduleRender(),this.notifyListeners("projectionUpdate",l)),Ux.recalculatedProjection++}hide(){this.isVisible=!1}show(){this.isVisible=!0}scheduleRender(e=!0){if(this.options.scheduleRender&&this.options.scheduleRender(),e){const e=this.getStack();e&&e.scheduleRender()}this.resumingFrom&&!this.resumingFrom.instance&&(this.resumingFrom=void 0)}setAnimationOrigin(e,t=!1){const n=this.snapshot,r=n?n.latestValues:{},o={...this.latestValues},a=Lb();this.relativeParent&&this.relativeParent.options.layoutRoot||(this.relativeTarget=this.relativeTargetOrigin=void 0),this.attemptToResolveRelativeTarget=!t;const i=Bb(),s=(n?n.source:void 0)!==(this.layout?this.layout.source:void 0),l=this.getStack(),c=!l||l.members.length<=1,u=Boolean(s&&!c&&!0===this.options.crossfade&&!this.path.some(lw));let d;this.animationProgress=0,this.mixTargetDelta=t=>{const n=t/1e3;var l,f,p,h,m,g;iw(a.x,e.x,n),iw(a.y,e.y,n),this.setTargetDelta(a),this.relativeTarget&&this.relativeTargetOrigin&&this.layout&&this.relativeParent&&this.relativeParent.layout&&(Ob(i,this.layout.layoutBox,this.relativeParent.layout.layoutBox),p=this.relativeTarget,h=this.relativeTargetOrigin,m=i,g=n,sw(p.x,h.x,m.x,g),sw(p.y,h.y,m.y,g),d&&(l=this.relativeTarget,f=d,l.x.min===f.x.min&&l.x.max===f.x.max&&l.y.min===f.y.min&&l.y.max===f.y.max)&&(this.isProjectionDirty=!1),d||(d=Bb()),Px(d,this.relativeTarget)),s&&(this.animationValues=o,function(e,t,n,r,o,a){o?(e.opacity=Rv(0,void 0!==n.opacity?n.opacity:1,Sx(r)),e.opacityExit=Rv(void 0!==t.opacity?t.opacity:1,0,Ex(r))):a&&(e.opacity=Rv(void 0!==t.opacity?t.opacity:1,void 0!==n.opacity?n.opacity:1,r));for(let o=0;o<bx;o++){const a=`border${yx[o]}Radius`;let i=kx(t,a),s=kx(n,a);void 0===i&&void 0===s||(i||(i=0),s||(s=0),0===i||0===s||wx(i)===wx(s)?(e[a]=Math.max(Rv(xx(i),xx(s),r),0),(Xm.test(s)||Xm.test(i))&&(e[a]+="%")):e[a]=s)}(t.rotate||n.rotate)&&(e.rotate=Rv(t.rotate||0,n.rotate||0,r))}(o,r,this.latestValues,n,u,c)),this.root.scheduleUpdateProjection(),this.scheduleRender(),this.animationProgress=n},this.mixTargetDelta(this.options.layoutRoot?1e3:0)}startAnimation(e){this.notifyListeners("animationStart"),this.currentAnimation&&this.currentAnimation.stop(),this.resumingFrom&&this.resumingFrom.currentAnimation&&this.resumingFrom.currentAnimation.stop(),this.pendingAnimation&&(Uh(this.pendingAnimation),this.pendingAnimation=void 0),this.pendingAnimation=Hh.update((()=>{dx.hasAnimatedSinceResize=!0,this.currentAnimation=function(e,t,n){const r=Mm(0)?0:Jy(0);return r.start(Uy("",r,t,n)),r.animation}(0,Wx,{...e,onUpdate:t=>{this.mixTargetDelta(t),e.onUpdate&&e.onUpdate(t)},onComplete:()=>{e.onComplete&&e.onComplete(),this.completeAnimation()}}),this.resumingFrom&&(this.resumingFrom.currentAnimation=this.currentAnimation),this.pendingAnimation=void 0}))}completeAnimation(){this.resumingFrom&&(this.resumingFrom.currentAnimation=void 0,this.resumingFrom.preserveOpacity=void 0);const e=this.getStack();e&&e.exitAnimationComplete(),this.resumingFrom=this.currentAnimation=this.animationValues=void 0,this.notifyListeners("animationComplete")}finishAnimation(){this.currentAnimation&&(this.mixTargetDelta&&this.mixTargetDelta(Wx),this.currentAnimation.stop()),this.completeAnimation()}applyTransformsToTarget(){const e=this.getLead();let{targetWithTransforms:t,target:n,layout:r,latestValues:o}=e;if(t&&n&&r){if(this!==e&&this.layout&&r&&pw(this.options.animationType,this.layout.layoutBox,r.layoutBox)){n=this.target||Bb();const t=Pb(this.layout.layoutBox.x);n.x.min=e.target.x.min,n.x.max=n.x.min+t;const r=Pb(this.layout.layoutBox.y);n.y.min=e.target.y.min,n.y.max=n.y.min+r}Px(t,n),rx(t,o),zb(this.projectionDeltaWithTransform,this.layoutCorrected,t,o)}}registerSharedNode(e,t){this.sharedNodes.has(e)||this.sharedNodes.set(e,new Nx),this.sharedNodes.get(e).add(t);const n=t.options.initialPromotionConfig;t.promote({transition:n?n.transition:void 0,preserveFollowOpacity:n&&n.shouldPreserveFollowOpacity?n.shouldPreserveFollowOpacity(t):void 0})}isLead(){const e=this.getStack();return!e||e.lead===this}getLead(){var e;const{layoutId:t}=this.options;return t&&(null===(e=this.getStack())||void 0===e?void 0:e.lead)||this}getPrevLead(){var e;const{layoutId:t}=this.options;return t?null===(e=this.getStack())||void 0===e?void 0:e.prevLead:void 0}getStack(){const{layoutId:e}=this.options;if(e)return this.root.sharedNodes.get(e)}promote({needsReset:e,transition:t,preserveFollowOpacity:n}={}){const r=this.getStack();r&&r.promote(this,n),e&&(this.projectionDelta=void 0,this.needsReset=!0),t&&this.setOptions({transition:t})}relegate(){const e=this.getStack();return!!e&&e.relegate(this)}resetRotation(){const{visualElement:e}=this.options;if(!e)return;let t=!1;const{latestValues:n}=e;if((n.rotate||n.rotateX||n.rotateY||n.rotateZ)&&(t=!0),!t)return;const r={};for(let t=0;t<$x.length;t++){const o="rotate"+$x[t];n[o]&&(r[o]=n[o],e.setStaticValue(o,0))}e.render();for(const t in r)e.setStaticValue(t,r[t]);e.scheduleRender()}getProjectionStyles(e){var t,n;if(!this.instance||this.isSVG)return;if(!this.isVisible)return Vx;const r={visibility:""},o=this.getTransformTemplate();if(this.needsReset)return this.needsReset=!1,r.opacity="",r.pointerEvents=Pg(null==e?void 0:e.pointerEvents)||"",r.transform=o?o(this.latestValues,""):"none",r;const a=this.getLead();if(!this.projectionDelta||!this.layout||!a.target){const t={};return this.options.layoutId&&(t.opacity=void 0!==this.latestValues.opacity?this.latestValues.opacity:1,t.pointerEvents=Pg(null==e?void 0:e.pointerEvents)||""),this.hasProjected&&!Ub(this.latestValues)&&(t.transform=o?o({},""):"none",this.hasProjected=!1),t}const i=a.animationValues||a.latestValues;this.applyTransformsToTarget(),r.transform=Dx(this.projectionDeltaWithTransform,this.treeScale,i),o&&(r.transform=o(i,r.transform));const{x:s,y:l}=this.projectionDelta;r.transformOrigin=`${100*s.origin}% ${100*l.origin}% 0`,a.animationValues?r.opacity=a===this?null!==(n=null!==(t=i.opacity)&&void 0!==t?t:this.latestValues.opacity)&&void 0!==n?n:1:this.preserveOpacity?this.latestValues.opacity:i.opacityExit:r.opacity=a===this?void 0!==i.opacity?i.opacity:"":void 0!==i.opacityExit?i.opacityExit:0;for(const e in Pm){if(void 0===i[e])continue;const{correct:t,applyTo:n}=Pm[e],o="none"===r.transform?i[e]:t(i[e],a);if(n){const e=n.length;for(let t=0;t<e;t++)r[n[t]]=o}else r[e]=o}return this.options.layoutId&&(r.pointerEvents=a===this?Pg(null==e?void 0:e.pointerEvents)||"":"none"),r}clearSnapshot(){this.resumeFrom=this.snapshot=void 0}resetTree(){this.root.nodes.forEach((e=>{var t;return null===(t=e.currentAnimation)||void 0===t?void 0:t.stop()})),this.root.nodes.forEach(Zx),this.root.sharedNodes.clear()}}}function Gx(e){e.updateLayout()}function Yx(e){var t;const n=(null===(t=e.resumeFrom)||void 0===t?void 0:t.snapshot)||e.snapshot;if(e.isLead()&&e.layout&&n&&e.hasListeners("didUpdate")){const{layoutBox:t,measuredBox:r}=e.layout,{animationType:o}=e.options,a=n.source!==e.layout.source;"size"===o?$b((e=>{const r=a?n.measuredBox[e]:n.layoutBox[e],o=Pb(r);r.min=t[e].min,r.max=r.min+o})):pw(o,n.layoutBox,t)&&$b((r=>{const o=a?n.measuredBox[r]:n.layoutBox[r],i=Pb(t[r]);o.max=o.min+i,e.relativeTarget&&!e.currentAnimation&&(e.isProjectionDirty=!0,e.relativeTarget[r].max=e.relativeTarget[r].min+i)}));const i=Lb();zb(i,t,n.layoutBox);const s=Lb();a?zb(s,e.applyTransform(r,!0),n.measuredBox):zb(s,t,n.layoutBox);const l=!Rx(i);let c=!1;if(!e.resumeFrom){const r=e.getClosestProjectingParent();if(r&&!r.resumeFrom){const{snapshot:o,layout:a}=r;if(o&&a){const i=Bb();Ob(i,n.layoutBox,o.layoutBox);const s=Bb();Ob(s,t,a.layoutBox),jx(i,s)||(c=!0),r.options.layoutRoot&&(e.relativeTarget=s,e.relativeTargetOrigin=i,e.relativeParent=r)}}}e.notifyListeners("didUpdate",{layout:t,snapshot:n,delta:s,layoutDelta:i,hasLayoutChanged:l,hasRelativeTargetChanged:c})}else if(e.isLead()){const{onExitComplete:t}=e.options;t&&t()}e.options.transition=void 0}function Xx(e){Ux.totalNodes++,e.parent&&(e.isProjecting()||(e.isProjectionDirty=e.parent.isProjectionDirty),e.isSharedProjectionDirty||(e.isSharedProjectionDirty=Boolean(e.isProjectionDirty||e.parent.isProjectionDirty||e.parent.isSharedProjectionDirty)),e.isTransformDirty||(e.isTransformDirty=e.parent.isTransformDirty))}function Qx(e){e.isProjectionDirty=e.isSharedProjectionDirty=e.isTransformDirty=!1}function Kx(e){e.clearSnapshot()}function Zx(e){e.clearMeasurements()}function Jx(e){e.isLayoutDirty=!1}function ew(e){const{visualElement:t}=e.options;t&&t.getProps().onBeforeLayoutMeasure&&t.notify("BeforeLayoutMeasure"),e.resetTransform()}function tw(e){e.finishAnimation(),e.targetDelta=e.relativeTarget=e.target=void 0,e.isProjectionDirty=!0}function nw(e){e.resolveTargetDelta()}function rw(e){e.calcProjection()}function ow(e){e.resetRotation()}function aw(e){e.removeLeadSnapshot()}function iw(e,t,n){e.translate=Rv(t.translate,0,n),e.scale=Rv(t.scale,1,n),e.origin=t.origin,e.originPoint=t.originPoint}function sw(e,t,n,r){e.min=Rv(t.min,n.min,r),e.max=Rv(t.max,n.max,r)}function lw(e){return e.animationValues&&void 0!==e.animationValues.opacityExit}const cw={duration:.45,ease:[.4,0,.1,1]},uw=e=>"undefined"!=typeof navigator&&navigator.userAgent.toLowerCase().includes(e),dw=uw("applewebkit/")&&!uw("chrome/")?Math.round:$h;function fw(e){e.min=dw(e.min),e.max=dw(e.max)}function pw(e,t,n){return"position"===e||"preserve-aspect"===e&&!Ab(Ix(t),Ix(n),.2)}const hw=qx({attachResizeListener:(e,t)=>Fg(e,"resize",t),measureScroll:()=>({x:document.documentElement.scrollLeft||document.body.scrollLeft,y:document.documentElement.scrollTop||document.body.scrollTop}),checkIsScrollRoot:()=>!0}),mw={current:void 0},gw=qx({measureScroll:e=>({x:e.scrollLeft,y:e.scrollTop}),defaultParent:()=>{if(!mw.current){const e=new hw({});e.mount(window),e.setOptions({layoutScroll:!0}),mw.current=e}return mw.current},resetTransform:(e,t)=>{e.style.transform=void 0!==t?t:"none"},checkIsScrollRoot:e=>Boolean("fixed"===window.getComputedStyle(e).position)}),vw={pan:{Feature:class extends Hg{constructor(){super(...arguments),this.removePointerDownListener=$h}onPointerDown(e){this.session=new xb(e,this.createPanHandlers(),{transformPagePoint:this.node.getTransformPagePoint(),contextWindow:ax(this.node)})}createPanHandlers(){const{onPanSessionStart:e,onPanStart:t,onPan:n,onPanEnd:r}=this.node.getProps();return{onSessionStart:cx(e),onStart:cx(t),onMove:n,onEnd:(e,t)=>{delete this.session,r&&Hh.update((()=>r(e,t)))}}}mount(){this.removePointerDownListener=Ig(this.node.current,"pointerdown",(e=>this.onPointerDown(e)))}update(){this.session&&this.session.updateHandlers(this.createPanHandlers())}unmount(){this.removePointerDownListener(),this.session&&this.session.end()}}},drag:{Feature:class extends Hg{constructor(e){super(e),this.removeGroupControls=$h,this.removeListeners=$h,this.controls=new sx(e)}mount(){const{dragControls:e}=this.node.getProps();e&&(this.removeGroupControls=e.subscribe(this.controls)),this.removeListeners=this.controls.addListeners()||$h}unmount(){this.removeGroupControls(),this.removeListeners()}},ProjectionNode:gw,MeasureLayout:gx}},yw=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/,bw=4;function xw(e,t,n=1){nm(n<=bw,`Max CSS variable fallback depth detected in property "${e}". This may indicate a circular fallback dependency.`);const[r,o]=function(e){const t=yw.exec(e);if(!t)return[,];const[,n,r]=t;return[n,r]}(e);if(!r)return;const a=window.getComputedStyle(t).getPropertyValue(r);if(a){const e=a.trim();return Gy(e)?parseFloat(e):e}return Im(o)?xw(o,t,n+1):o}const ww=new Set(["width","height","top","left","right","bottom","x","y","translateX","translateY"]),kw=e=>ww.has(e),Sw=e=>e===Lm||e===Qm,Ew=(e,t)=>parseFloat(e.split(", ")[t]),Cw=(e,t)=>(n,{transform:r})=>{if("none"===r||!r)return 0;const o=r.match(/^matrix3d\((.+)\)$/);if(o)return Ew(o[1],t);{const t=r.match(/^matrix\((.+)\)$/);return t?Ew(t[1],e):0}},_w=new Set(["x","y","z"]),Pw=Am.filter((e=>!_w.has(e))),Aw={width:({x:e},{paddingLeft:t="0",paddingRight:n="0"})=>e.max-e.min-parseFloat(t)-parseFloat(n),height:({y:e},{paddingTop:t="0",paddingBottom:n="0"})=>e.max-e.min-parseFloat(t)-parseFloat(n),top:(e,{top:t})=>parseFloat(t),left:(e,{left:t})=>parseFloat(t),bottom:({y:e},{top:t})=>parseFloat(t)+(e.max-e.min),right:({x:e},{left:t})=>parseFloat(t)+(e.max-e.min),x:Cw(4,13),y:Cw(5,14)};Aw.translateX=Aw.x,Aw.translateY=Aw.y;const Tw=(e,t,n,r)=>{const o=function(e,{...t},n){const r=e.current;if(!(r instanceof Element))return{target:t,transitionEnd:n};n&&(n={...n}),e.values.forEach((e=>{const t=e.get();if(!Im(t))return;const n=xw(t,r);n&&e.set(n)}));for(const e in t){const o=t[e];if(!Im(o))continue;const a=xw(o,r);a&&(t[e]=a,n||(n={}),void 0===n[e]&&(n[e]=o))}return{target:t,transitionEnd:n}}(e,t,r);return function(e,t,n,r){return(e=>Object.keys(e).some(kw))(t)?((e,t,n={},r={})=>{t={...t},r={...r};const o=Object.keys(t).filter(kw);let a=[],i=!1;const s=[];if(o.forEach((o=>{const l=e.getValue(o);if(!e.hasValue(o))return;let c=n[o],u=nb(c);const d=t[o];let f;if(Eg(d)){const e=d.length,t=null===d[0]?1:0;c=d[t],u=nb(c);for(let n=t;n<e&&null!==d[n];n++)f?nm(nb(d[n])===f,"All keyframes must be of the same type"):(f=nb(d[n]),nm(f===u||Sw(u)&&Sw(f),"Keyframes must be of the same dimension as the current value"))}else f=nb(d);if(u!==f)if(Sw(u)&&Sw(f)){const e=l.get();"string"==typeof e&&l.set(parseFloat(e)),"string"==typeof d?t[o]=parseFloat(d):Array.isArray(d)&&f===Qm&&(t[o]=d.map(parseFloat))}else(null==u?void 0:u.transform)&&(null==f?void 0:f.transform)&&(0===c||0===d)?0===c?l.set(f.transform(c)):t[o]=u.transform(d):(i||(a=function(e){const t=[];return Pw.forEach((n=>{const r=e.getValue(n);void 0!==r&&(t.push([n,r.get()]),r.set(n.startsWith("scale")?1:0))})),t.length&&e.render(),t}(e),i=!0),s.push(o),r[o]=void 0!==r[o]?r[o]:t[o],l.jump(d))})),s.length){const n=s.indexOf("height")>=0?window.pageYOffset:null,o=((e,t,n)=>{const r=t.measureViewportBox(),o=t.current,a=getComputedStyle(o),{display:i}=a,s={};"none"===i&&t.setStaticValue("display",e.display||"block"),n.forEach((e=>{s[e]=Aw[e](r,a)})),t.render();const l=t.measureViewportBox();return n.forEach((n=>{const r=t.getValue(n);r&&r.jump(s[n]),e[n]=Aw[n](l,a)})),e})(t,e,s);return a.length&&a.forEach((([t,n])=>{e.getValue(t).set(n)})),e.render(),Dh&&null!==n&&window.scrollTo({top:n}),{target:o,transitionEnd:r}}return{target:t,transitionEnd:r}})(e,t,n,r):{target:t,transitionEnd:r}}(e,t=o.target,n,r=o.transitionEnd)},zw={current:null},Mw={current:!1},Fw=new WeakMap,Ow=Object.keys(bm),Rw=Ow.length,jw=["AnimationStart","AnimationComplete","Update","BeforeLayoutMeasure","LayoutMeasure","LayoutAnimationStart","LayoutAnimationComplete"],Iw=hm.length;class Nw{constructor({parent:e,props:t,presenceContext:n,reducedMotionConfig:r,visualState:o},a={}){this.current=null,this.children=new Set,this.isVariantNode=!1,this.isControllingVariants=!1,this.shouldReduceMotion=null,this.values=new Map,this.features={},this.valueSubscriptions=new Map,this.prevMotionValues={},this.events={},this.propEventSubscriptions={},this.notifyUpdate=()=>this.notify("Update",this.latestValues),this.render=()=>{this.current&&(this.triggerBuild(),this.renderInstance(this.current,this.renderState,this.props.style,this.projection))},this.scheduleRender=()=>Hh.render(this.render,!1,!0);const{latestValues:i,renderState:s}=o;this.latestValues=i,this.baseTarget={...i},this.initialValues=t.initial?{...i}:{},this.renderState=s,this.parent=e,this.props=t,this.presenceContext=n,this.depth=e?e.depth+1:0,this.reducedMotionConfig=r,this.options=a,this.isControllingVariants=mm(t),this.isVariantNode=gm(t),this.isVariantNode&&(this.variantChildren=new Set),this.manuallyAnimateOnMount=Boolean(e&&e.current);const{willChange:l,...c}=this.scrapeMotionValuesFromProps(t,{});for(const e in c){const t=c[e];void 0!==i[e]&&Mm(t)&&(t.set(i[e],!1),qy(l)&&l.add(e))}}scrapeMotionValuesFromProps(e,t){return{}}mount(e){this.current=e,Fw.set(e,this),this.projection&&!this.projection.instance&&this.projection.mount(e),this.parent&&this.isVariantNode&&!this.isControllingVariants&&(this.removeFromVariantTree=this.parent.addVariantChild(this)),this.values.forEach(((e,t)=>this.bindToMotionValue(t,e))),Mw.current||function(){if(Mw.current=!0,Dh)if(window.matchMedia){const e=window.matchMedia("(prefers-reduced-motion)"),t=()=>zw.current=e.matches;e.addListener(t),t()}else zw.current=!1}(),this.shouldReduceMotion="never"!==this.reducedMotionConfig&&("always"===this.reducedMotionConfig||zw.current),this.parent&&this.parent.children.add(this),this.update(this.props,this.presenceContext)}unmount(){Fw.delete(this.current),this.projection&&this.projection.unmount(),Uh(this.notifyUpdate),Uh(this.render),this.valueSubscriptions.forEach((e=>e())),this.removeFromVariantTree&&this.removeFromVariantTree(),this.parent&&this.parent.children.delete(this);for(const e in this.events)this.events[e].clear();for(const e in this.features)this.features[e].unmount();this.current=null}bindToMotionValue(e,t){const n=Tm.has(e),r=t.on("change",(t=>{this.latestValues[e]=t,this.props.onUpdate&&Hh.update(this.notifyUpdate,!1,!0),n&&this.projection&&(this.projection.isTransformDirty=!0)})),o=t.on("renderRequest",this.scheduleRender);this.valueSubscriptions.set(e,(()=>{r(),o()}))}sortNodePosition(e){return this.current&&this.sortInstanceNodePosition&&this.type===e.type?this.sortInstanceNodePosition(this.current,e.current):0}loadFeatures({children:e,...t},n,r,o){let a,i;for(let e=0;e<Rw;e++){const n=Ow[e],{isEnabled:r,Feature:o,ProjectionNode:s,MeasureLayout:l}=bm[n];s&&(a=s),r(t)&&(!this.features[n]&&o&&(this.features[n]=new o(this)),l&&(i=l))}if(!this.projection&&a){this.projection=new a(this.latestValues,this.parent&&this.parent.projection);const{layoutId:e,layout:n,drag:r,dragConstraints:i,layoutScroll:s,layoutRoot:l}=t;this.projection.setOptions({layoutId:e,layout:n,alwaysMeasureLayout:Boolean(r)||i&&um(i),visualElement:this,scheduleRender:()=>this.scheduleRender(),animationType:"string"==typeof n?n:"both",initialPromotionConfig:o,layoutScroll:s,layoutRoot:l})}return i}updateFeatures(){for(const e in this.features){const t=this.features[e];t.isMounted?t.update():(t.mount(),t.isMounted=!0)}}triggerBuild(){this.build(this.renderState,this.latestValues,this.options,this.props)}measureViewportBox(){return this.current?this.measureInstanceViewportBox(this.current,this.props):Bb()}getStaticValue(e){return this.latestValues[e]}setStaticValue(e,t){this.latestValues[e]=t}makeTargetAnimatable(e,t=!0){return this.makeTargetAnimatableFromInstance(e,this.props,t)}update(e,t){(e.transformTemplate||this.props.transformTemplate)&&this.scheduleRender(),this.prevProps=this.props,this.props=e,this.prevPresenceContext=this.presenceContext,this.presenceContext=t;for(let t=0;t<jw.length;t++){const n=jw[t];this.propEventSubscriptions[n]&&(this.propEventSubscriptions[n](),delete this.propEventSubscriptions[n]);const r=e["on"+n];r&&(this.propEventSubscriptions[n]=this.on(n,r))}this.prevMotionValues=function(e,t,n){const{willChange:r}=t;for(const o in t){const a=t[o],i=n[o];if(Mm(a))e.addValue(o,a),qy(r)&&r.add(o);else if(Mm(i))e.addValue(o,Jy(a,{owner:e})),qy(r)&&r.remove(o);else if(i!==a)if(e.hasValue(o)){const t=e.getValue(o);!t.hasAnimated&&t.set(a)}else{const t=e.getStaticValue(o);e.addValue(o,Jy(void 0!==t?t:a,{owner:e}))}}for(const r in n)void 0===t[r]&&e.removeValue(r);return t}(this,this.scrapeMotionValuesFromProps(e,this.prevProps),this.prevMotionValues),this.handleChildMotionValue&&this.handleChildMotionValue()}getProps(){return this.props}getVariant(e){return this.props.variants?this.props.variants[e]:void 0}getDefaultTransition(){return this.props.transition}getTransformPagePoint(){return this.props.transformPagePoint}getClosestVariantNode(){return this.isVariantNode?this:this.parent?this.parent.getClosestVariantNode():void 0}getVariantContext(e=!1){if(e)return this.parent?this.parent.getVariantContext():void 0;if(!this.isControllingVariants){const e=this.parent&&this.parent.getVariantContext()||{};return void 0!==this.props.initial&&(e.initial=this.props.initial),e}const t={};for(let e=0;e<Iw;e++){const n=hm[e],r=this.props[n];(dm(r)||!1===r)&&(t[n]=r)}return t}addVariantChild(e){const t=this.getClosestVariantNode();if(t)return t.variantChildren&&t.variantChildren.add(e),()=>t.variantChildren.delete(e)}addValue(e,t){t!==this.values.get(e)&&(this.removeValue(e),this.bindToMotionValue(e,t)),this.values.set(e,t),this.latestValues[e]=t.get()}removeValue(e){this.values.delete(e);const t=this.valueSubscriptions.get(e);t&&(t(),this.valueSubscriptions.delete(e)),delete this.latestValues[e],this.removeValueFromRenderState(e,this.renderState)}hasValue(e){return this.values.has(e)}getValue(e,t){if(this.props.values&&this.props.values[e])return this.props.values[e];let n=this.values.get(e);return void 0===n&&void 0!==t&&(n=Jy(t,{owner:this}),this.addValue(e,n)),n}readValue(e){var t;return void 0===this.latestValues[e]&&this.current?null!==(t=this.getBaseTargetFromProps(this.props,e))&&void 0!==t?t:this.readValueFromInstance(this.current,e,this.options):this.latestValues[e]}setBaseTarget(e,t){this.baseTarget[e]=t}getBaseTarget(e){var t;const{initial:n}=this.props,r="string"==typeof n||"object"==typeof n?null===(t=Sg(this.props,n))||void 0===t?void 0:t[e]:void 0;if(n&&void 0!==r)return r;const o=this.getBaseTargetFromProps(this.props,e);return void 0===o||Mm(o)?void 0!==this.initialValues[e]&&void 0===r?void 0:this.baseTarget[e]:o}on(e,t){return this.events[e]||(this.events[e]=new Qy),this.events[e].add(t)}notify(e,...t){this.events[e]&&this.events[e].notify(...t)}}class Dw extends Nw{sortInstanceNodePosition(e,t){return 2&e.compareDocumentPosition(t)?1:-1}getBaseTargetFromProps(e,t){return e.style?e.style[t]:void 0}removeValueFromRenderState(e,{vars:t,style:n}){delete t[e],delete n[e]}makeTargetAnimatableFromInstance({transition:e,transitionEnd:t,...n},{transformValues:r},o){let a=function(e,t,n){const r={};for(const o in e){const e=ib(o,t);if(void 0!==e)r[o]=e;else{const e=n.getValue(o);e&&(r[o]=e.get())}}return r}(n,e||{},this);if(r&&(t&&(t=r(t)),n&&(n=r(n)),a&&(a=r(a))),o){!function(e,t,n){var r,o;const a=Object.keys(t).filter((t=>!e.hasValue(t))),i=a.length;if(i)for(let s=0;s<i;s++){const i=a[s],l=t[i];let c=null;Array.isArray(l)&&(c=l[0]),null===c&&(c=null!==(o=null!==(r=n[i])&&void 0!==r?r:e.readValue(i))&&void 0!==o?o:t[i]),null!=c&&("string"==typeof c&&(Gy(c)||Vy(c))?c=parseFloat(c):!ob(c)&&Xv.test(l)&&(c=$y(i,l)),e.addValue(i,Jy(c,{owner:e})),void 0===n[i]&&(n[i]=c),null!==c&&e.setBaseTarget(i,c))}}(this,n,a);const e=Tw(this,n,a,t);t=e.transitionEnd,n=e.target}return{transition:e,transitionEnd:t,...n}}}class Lw extends Dw{readValueFromInstance(e,t){if(Tm.has(t)){const e=By(t);return e&&e.default||0}{const r=(n=e,window.getComputedStyle(n)),o=(jm(t)?r.getPropertyValue(t):r[t])||0;return"string"==typeof o?o.trim():o}var n}measureInstanceViewportBox(e,{transformPagePoint:t}){return ox(e,t)}build(e,t,n,r){ng(e,t,n,r.transformTemplate)}scrapeMotionValuesFromProps(e,t){return wg(e,t)}handleChildMotionValue(){this.childSubscription&&(this.childSubscription(),delete this.childSubscription);const{children:e}=this.props;Mm(e)&&(this.childSubscription=e.on("change",(e=>{this.current&&(this.current.textContent=`${e}`)})))}renderInstance(e,t,n,r){yg(e,t,n,r)}}class Bw extends Dw{constructor(){super(...arguments),this.isSVGTag=!1}getBaseTargetFromProps(e,t){return e[t]}readValueFromInstance(e,t){if(Tm.has(t)){const e=By(t);return e&&e.default||0}return t=bg.has(t)?t:lm(t),e.getAttribute(t)}measureInstanceViewportBox(){return Bb()}scrapeMotionValuesFromProps(e,t){return kg(e,t)}build(e,t,n,r){pg(e,t,n,this.isSVGTag,r.transformTemplate)}renderInstance(e,t,n,r){xg(e,t,0,r)}mount(e){this.isSVGTag=mg(e.tagName),super.mount(e)}}const $w=(e,t)=>_m(e)?new Bw(t,{enableHardwareAcceleration:!1}):new Lw(t,{enableHardwareAcceleration:!0}),Vw={...yb,...Jg,...vw,layout:{ProjectionNode:gw,MeasureLayout:gx}},Ww=Em(((e,t)=>function(e,{forwardMotionProps:t=!1},n,r){return{..._m(e)?zg:Mg,preloadedFeatures:n,useRender:vg(t),createVisualElement:r,Component:e}}(e,t,Vw,$w)));var Hw={exit:{height:{duration:.2,ease:Rh.ease},opacity:{duration:.3,ease:Rh.ease}},enter:{height:{duration:.3,ease:Rh.ease},opacity:{duration:.4,ease:Rh.ease}}},Uw={exit:({animateOpacity:e,startingHeight:t,transition:n,transitionEnd:r,delay:o})=>{var a,i;return{...e&&{opacity:(i=t,null!=i&&parseInt(i.toString(),10)>0?1:0)},height:t,transitionEnd:null==r?void 0:r.exit,transition:null!=(a=null==n?void 0:n.exit)?a:Nh(Hw.exit,o)}},enter:({animateOpacity:e,endingHeight:t,transition:n,transitionEnd:r,delay:o})=>{var a;return{...e&&{opacity:1},height:t,transitionEnd:null==r?void 0:r.enter,transition:null!=(a=null==n?void 0:n.enter)?a:Ih(Hw.enter,o)}}},qw=(0,e.forwardRef)(((t,n)=>{const{in:r,unmountOnExit:o,animateOpacity:i=!0,startingHeight:l=0,endingHeight:c="auto",style:u,className:d,transition:f,transitionEnd:p,...h}=t,[m,g]=(0,e.useState)(!1);(0,e.useEffect)((()=>{const e=setTimeout((()=>{g(!0)}));return()=>clearTimeout(e)}),[]),s({condition:Number(l)>0&&!!o,message:"startingHeight and unmountOnExit are mutually exclusive. You can't use them together"});const v=parseFloat(l.toString())>0,y={startingHeight:l,endingHeight:c,animateOpacity:i,transition:m?f:{enter:{duration:0}},transitionEnd:{enter:null==p?void 0:p.enter,exit:o?null==p?void 0:p.exit:{...null==p?void 0:p.exit,display:v?"block":"none"}}},b=!o||r,x=r||o?"enter":"exit";return(0,qn.jsx)(om,{initial:!1,custom:y,children:b&&(0,qn.jsx)(Ww.div,{ref:n,...h,className:a("chakra-collapse",d),style:{overflow:"hidden",display:"block",...u},custom:y,variants:Uw,initial:!!o&&"exit",animate:x,exit:"exit"})})}));qw.displayName="Collapse";var Gw,Yw=r((function(e,t){const{className:n,motionProps:r,...o}=e,{reduceMotion:i}=Ph(),{getPanelProps:s,isOpen:l}=wh(),c=s(o,t),u=a("chakra-accordion__panel",n),d=bh();i||delete c.hidden;const f=(0,qn.jsx)(Un.div,{...c,__css:d.panel,className:u});return i?f:(0,qn.jsx)(qw,{in:l,...r,children:f})}));Yw.displayName="AccordionPanel";var Xw=pi.div(Gw||(Gw=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(['\n  .chakra-accordion__button {\n    padding: 0;\n    .chakra-icon {\n      color: hsl(231, 69%, 60%);\n    }\n    &[aria-expanded="true"] {\n      .chakra-icon {\n        color: hsl(0, 94%, 66%);\n      }\n    }\n\n    &:hover {\n      background: inherit;\n    }\n    span {\n      padding: 20px 0 20px 0;\n      &:hover {\n        color: hsl(0, 94%, 66%);\n      }\n    }\n  }\n'])));const Qw=function(){return e.createElement(e.Fragment,null,e.createElement(Oi,{mt:"150px",as:"h3",fontWeight:500,fontSize:{base:"24px",md:"30px"},lineHeight:{base:"30px",md:"45px"},align:"center"},"Frequently Asked Questions"),e.createElement(Gn,{pl:4,pr:4,flex:1,align:"center",justify:"center"},e.createElement(Oi,{as:"p",fontSize:"lg",align:"center",maxW:"500px",pt:30},"Here are some od our FAQs. If you have any other questions you'd like answered please fell free to mail us.")),e.createElement(nr,{maxW:"650px",mx:"auto",mt:50,px:"20px","data-testid":"accordion"},e.createElement(Xw,null,e.createElement(Ah,{allowToggle:!0},e.createElement(Th,null,e.createElement("h2",null,e.createElement(zh,null,e.createElement(Yn,{as:"span",flex:"1",textAlign:"left",fontWeight:500},"What is Bookmark?"),e.createElement(Oh,{fontSize:"40px"}))),e.createElement(Yw,{pb:4,px:0,color:"hsl(229, 8%, 60%)"},"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim")),e.createElement(Th,null,e.createElement("h2",null,e.createElement(zh,null,e.createElement(Yn,{as:"span",flex:"1",textAlign:"left",fontWeight:500},"How can I request a new browser?"),e.createElement(Oh,{fontSize:"40px"}))),e.createElement(Yw,{pb:4,px:0,color:"hsl(229, 8%, 60%)"},"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.")),e.createElement(Th,null,e.createElement("h2",null,e.createElement(zh,null,e.createElement(Yn,{as:"span",flex:"1",textAlign:"left",fontWeight:500},"Is there a mobile app?"),e.createElement(Oh,{fontSize:"40px"}))),e.createElement(Yw,{pb:4,px:0,color:"hsl(229, 8%, 60%)"},"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.")),e.createElement(Th,null,e.createElement("h2",null,e.createElement(zh,null,e.createElement(Yn,{as:"span",flex:"1",textAlign:"left",fontWeight:500},"What about other Chromium browsers?"),e.createElement(Oh,{fontSize:"40px"}))),e.createElement(Yw,{pb:4,px:0,color:"hsl(229, 8%, 60%)"},"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.")))),e.createElement(nr,{direction:{base:"row",md:"row"},spacing:4,mx:"auto",mt:50},e.createElement(Ri,{text:"More Info"}))))};var Kw=r((function(e,t){const{className:n,centerContent:r,...o}=Ge(e),i=fr("Container",e);return(0,qn.jsx)(Un.div,{ref:t,className:a("chakra-container",n),...o,__css:{...i,...r&&{display:"flex",flexDirection:"column",alignItems:"center"}}})}));Kw.displayName="Container";var[Zw,Jw]=rr({name:"FormControlStylesContext",errorMessage:"useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" "}),[ek,tk]=rr({strict:!1,name:"FormControlContext"}),nk=r((function(t,n){const r=pr("Form",t),o=Ge(t),{getRootProps:i,htmlProps:s,...l}=function(t){const{id:n,isRequired:r,isInvalid:o,isDisabled:a,isReadOnly:i,...s}=t,l=(0,e.useId)(),c=n||`field-${l}`,d=`${c}-label`,f=`${c}-feedback`,p=`${c}-helptext`,[h,m]=(0,e.useState)(!1),[g,v]=(0,e.useState)(!1),[y,b]=(0,e.useState)(!1),x=(0,e.useCallback)(((e={},t=null)=>({id:p,...e,ref:vr(t,(e=>{e&&v(!0)}))})),[p]),w=(0,e.useCallback)(((e={},t=null)=>({...e,ref:t,"data-focus":u(y),"data-disabled":u(a),"data-invalid":u(o),"data-readonly":u(i),id:void 0!==e.id?e.id:d,htmlFor:void 0!==e.htmlFor?e.htmlFor:c})),[c,a,y,o,i,d]),k=(0,e.useCallback)(((e={},t=null)=>({id:f,...e,ref:vr(t,(e=>{e&&m(!0)})),"aria-live":"polite"})),[f]),S=(0,e.useCallback)(((e={},t=null)=>({...e,...s,ref:t,role:"group","data-focus":u(y),"data-disabled":u(a),"data-invalid":u(o),"data-readonly":u(i)})),[s,a,y,o,i]),E=(0,e.useCallback)(((e={},t=null)=>({...e,ref:t,role:"presentation","aria-hidden":!0,children:e.children||"*"})),[]);return{isRequired:!!r,isInvalid:!!o,isReadOnly:!!i,isDisabled:!!a,isFocused:!!y,onFocus:()=>b(!0),onBlur:()=>b(!1),hasFeedbackText:h,setHasFeedbackText:m,hasHelpText:g,setHasHelpText:v,id:c,labelId:d,feedbackId:f,helpTextId:p,htmlProps:s,getHelpTextProps:x,getErrorMessageProps:k,getRootProps:S,getLabelProps:w,getRequiredIndicatorProps:E}}(o),c=a("chakra-form-control",t.className);return(0,qn.jsx)(ek,{value:l,children:(0,qn.jsx)(Zw,{value:r,children:(0,qn.jsx)(Un.div,{...i({},n),className:c,__css:r.container})})})}));nk.displayName="FormControl";var rk=r((function(e,t){const n=tk(),r=Jw(),o=a("chakra-form__helper-text",e.className);return(0,qn.jsx)(Un.div,{...null==n?void 0:n.getHelpTextProps(e,t),__css:r.helperText,className:o})}));rk.displayName="FormHelperText";var ok=r((function(e,t){const{htmlSize:n,...r}=e,o=pr("Input",r),i=function(e){const{isDisabled:t,isInvalid:n,isReadOnly:r,isRequired:o,...a}=function(e){var t,n,r;const o=tk(),{id:a,disabled:i,readOnly:s,required:l,isRequired:c,isInvalid:u,isReadOnly:d,isDisabled:p,onFocus:h,onBlur:m,...g}=e,v=e["aria-describedby"]?[e["aria-describedby"]]:[];return(null==o?void 0:o.hasFeedbackText)&&(null==o?void 0:o.isInvalid)&&v.push(o.feedbackId),(null==o?void 0:o.hasHelpText)&&v.push(o.helpTextId),{...g,"aria-describedby":v.join(" ")||void 0,id:null!=a?a:null==o?void 0:o.id,isDisabled:null!=(t=null!=i?i:p)?t:null==o?void 0:o.isDisabled,isReadOnly:null!=(n=null!=s?s:d)?n:null==o?void 0:o.isReadOnly,isRequired:null!=(r=null!=l?l:c)?r:null==o?void 0:o.isRequired,isInvalid:null!=u?u:null==o?void 0:o.isInvalid,onFocus:f(null==o?void 0:o.onFocus,h),onBlur:f(null==o?void 0:o.onBlur,m)}}(e);return{...a,disabled:t,readOnly:r,required:o,"aria-invalid":d(n),"aria-required":d(o),"aria-readonly":d(r)}}(Ge(r)),s=a("chakra-input",e.className);return(0,qn.jsx)(Un.input,{size:n,...i,__css:o.field,ref:t,className:s})}));function ak(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,s=[],l=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=a.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){c=!0,o=e}finally{try{if(!l&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return s}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ik(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ik(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ik(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}ok.displayName="Input",ok.id="Input";const sk=function(t){var n,r=t.numberOfUsers,o=void 0===r?35e3:r,a=t.countdownTime,i=void 0===a?2e4:a,s=ak((0,e.useState)(""),2),l=s[0],c=s[1],u=ak((0,e.useState)("initial"),2),d=u[0],f=u[1],p=ak((0,e.useState)(!1),2),h=p[0],m=p[1],g=ak((0,e.useState)(o),2),v=g[0],y=g[1],b=o/i*100;return(0,e.useEffect)((function(){return clearInterval(n),n=setInterval((function(){0!==v?y((function(e){return e-b})):clearInterval(n)}),100),function(){return clearInterval(n)}}),[v]),e.createElement(Gn,{id:"contact",align:"center",justify:"center",py:10,bg:Je("hsl(231, 69%, 60%)","hsl(231, 69%, 60%)"),mt:150,"data-testid":"newsletter"},e.createElement(Kw,{maxW:"xl",p:6},e.createElement(Oi,{color:"white",letterSpacing:"3px",textTransform:"uppercase",fontSize:"12px",align:"center",mb:{base:"20px",md:"50px"}},v,"+ already joined"),e.createElement(Oi,{as:"h3",align:"center",mb:10,color:"white",fontWeight:500,fontSize:{base:"24px",md:"30px"},lineHeight:{base:"30px",md:"45px"}},"Stay up-to-date with what we're doing"),e.createElement(nr,{direction:{base:"column",md:"row"},as:"form",spacing:"12px",onSubmit:function(e){e.preventDefault(),m(!1),f("submitting"),setTimeout((function(){if("fail@example.com"===l)return m(!0),void f("initial");f("success")}),1e3)}},e.createElement(nk,null,e.createElement(ok,{variant:"solid",borderWidth:1,color:"gray.500",height:"44px",_placeholder:{color:"gray.300"},borderColor:Je("gray.300","gray.700"),id:"email",type:"email",required:!0,placeholder:"Enter your email address","aria-label":"Enter your email address",value:l,disabled:"initial"!==d,onChange:function(e){return c(e.target.value)}})),e.createElement(nk,{w:{base:"100%",md:"40%"}},e.createElement(br,{variant:"solid",bgColor:"hsl(0, 94%, 66%)",py:5,px:6,color:"white",borderRadius:"5px",fontWeight:500,border:"2px",borderColor:"hsl(0, 94%, 66%)",fontSize:"12px",letterSpacing:"1.5px",_hover:{bg:"#ffffff",color:"hsl(0, 94%, 66%)",border:"2px",borderColor:"hsl(0, 94%, 66%)"},isLoading:"submitting"===d,w:"100%",type:"success"===d?"button":"submit"},"success"===d?"Send":"Contact us"))),e.createElement(Oi,{mt:2,textAlign:"center",color:h?"red.500":"gray.500"},h&&"Oh no an error occured! 😢 Please try again later.")))},lk=function(){return e.createElement("svg",{width:"148",height:"25",xmlns:"http://www.w3.org/2000/svg"},e.createElement("g",{fill:"none",fillRule:"evenodd"},e.createElement("path",{d:"M37 6.299h5.227c.746 0 1.434.155 2.062.466.629.311 1.123.735 1.484 1.27s.542 1.12.542 1.754c0 .672-.165 1.254-.495 1.746-.33.491-.762.868-1.297 1.129v.15c.697.248 1.25.643 1.661 1.185.41.541.616 1.191.616 1.95 0 .735-.196 1.385-.588 1.951a3.817 3.817 0 0 1-1.587 1.307c-.665.305-1.403.457-2.212.457H37V6.299zm5.04 5.45c.548 0 .986-.152 1.316-.457.33-.305.495-.688.495-1.148 0-.448-.159-.824-.476-1.13-.318-.304-.738-.457-1.26-.457H39.52v3.192h2.52zm.28 5.619c.61 0 1.086-.159 1.428-.476.342-.317.513-.731.513-1.241 0-.51-.174-.927-.522-1.251-.349-.324-.847-.485-1.494-.485H39.52v3.453h2.8zm12.927 2.595c-1.307 0-2.492-.308-3.556-.924a6.711 6.711 0 0 1-2.511-2.53c-.61-1.07-.915-2.246-.915-3.528 0-1.281.305-2.457.915-3.528a6.711 6.711 0 0 1 2.51-2.529C52.756 6.308 53.94 6 55.248 6c1.306 0 2.492.308 3.556.924a6.711 6.711 0 0 1 2.51 2.53c.61 1.07.915 2.246.915 3.527 0 1.282-.305 2.458-.915 3.528a6.711 6.711 0 0 1-2.51 2.53c-1.064.616-2.25.924-3.556.924zm0-2.39a4.52 4.52 0 0 0 2.258-.578 4.177 4.177 0 0 0 1.615-1.624c.392-.697.588-1.494.588-2.39 0-.896-.196-1.692-.588-2.389a4.177 4.177 0 0 0-1.615-1.624 4.52 4.52 0 0 0-2.258-.579 4.47 4.47 0 0 0-2.25.579 4.195 4.195 0 0 0-1.605 1.624c-.392.697-.588 1.493-.588 2.39 0 .895.196 1.692.588 2.389a4.195 4.195 0 0 0 1.605 1.624 4.47 4.47 0 0 0 2.25.578zm15.353 2.39c-1.307 0-2.492-.308-3.556-.924a6.711 6.711 0 0 1-2.51-2.53c-.61-1.07-.915-2.246-.915-3.528 0-1.281.305-2.457.914-3.528a6.711 6.711 0 0 1 2.511-2.529C68.108 6.308 69.294 6 70.6 6c1.307 0 2.492.308 3.556.924a6.711 6.711 0 0 1 2.51 2.53c.61 1.07.915 2.246.915 3.527 0 1.282-.305 2.458-.914 3.528a6.711 6.711 0 0 1-2.511 2.53c-1.064.616-2.25.924-3.556.924zm0-2.39a4.52 4.52 0 0 0 2.259-.578 4.177 4.177 0 0 0 1.614-1.624c.392-.697.588-1.494.588-2.39 0-.896-.196-1.692-.588-2.389a4.177 4.177 0 0 0-1.614-1.624 4.52 4.52 0 0 0-2.259-.579 4.47 4.47 0 0 0-2.25.579 4.195 4.195 0 0 0-1.605 1.624c-.392.697-.588 1.493-.588 2.39 0 .895.196 1.692.588 2.389a4.195 4.195 0 0 0 1.606 1.624 4.47 4.47 0 0 0 2.249.578zM79.83 6.3h2.52v5.73h.15l4.89-5.73h3.043v.149L85.6 11.973l5.338 7.542v.149h-3.08l-3.994-5.693-1.512 1.773v3.92h-2.52V6.299zM93.779 6h3.248l3.546 9.39h.15L104.268 6h3.267v13.365h-2.501v-6.589l.15-2.221h-.15l-3.398 8.81h-1.96l-3.416-8.81h-.149l.15 2.221v6.59h-2.483V6zm20.8 0h2.894l5.021 13.365h-2.781l-1.12-3.192h-5.115l-1.12 3.192h-2.781L114.579 6zm3.193 7.859l-1.176-3.36-.486-1.606h-.149l-.485 1.606-1.195 3.36h3.49zM124.553 6h4.872c.871 0 1.646.18 2.324.541.678.361 1.204.862 1.577 1.503.374.64.56 1.366.56 2.175 0 .858-.27 1.62-.812 2.286a4.617 4.617 0 0 1-2.044 1.447l-.018.13 3.584 5.134v.15h-2.894l-3.453-5.022h-1.176v5.021h-2.52V6zm4.853 6.03c.573 0 1.04-.175 1.4-.523.361-.349.542-.79.542-1.326 0-.51-.172-.945-.514-1.306-.342-.361-.806-.542-1.39-.542h-2.371v3.696h2.333zm7.23-6.03h2.52v5.73h.15l4.89-5.73h3.043v.15l-4.835 5.525 5.34 7.541v.15h-3.08l-3.996-5.694-1.512 1.773v3.92h-2.52V6z",fill:"white",fillRule:"nonzero"}),e.createElement("g",null,e.createElement("circle",{fill:"#5267DF",cx:"12.5",cy:"12.5",r:"12.5"}),e.createElement("path",{d:"M9 9v10l3.54-3.44L16.078 19V9a2 2 0 0 0-2-2H11a2 2 0 0 0-2 2z",fill:"#FFF"}))))};var ck,uk=pi.div(ck||(ck=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  display: flex;\n  svg {\n    margin: 0 20px;\n    path {\n      &:hover {\n        fill: hsl(0, 94%, 66%);\n        transition: 0.3s;\n        cursor: pointer;\n      }\n    }\n  }\n"])));const dk=function(){return e.createElement(Yn,{bg:"hsl(229, 31%, 21%)","data-testid":"footer"},e.createElement(Kw,{as:nr,maxW:"10xl",py:5,px:8,direction:{base:"column",md:"row"},justify:"space-between",align:"center"},e.createElement(nr,{direction:{base:"column",md:"row"},alignItems:"center"},e.createElement(lk,null),e.createElement(wr,{text:"features",to:"#features",color:"white"}),e.createElement(wr,{text:"pricing",to:"#pricing",color:"white"}),e.createElement(wr,{text:"contact",to:"#contact",color:"white"})),e.createElement(uk,null,e.createElement(Er,null),e.createElement(Cr,null))))};function fk(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}var pk=fk()?e.useLayoutEffect:e.useEffect;function hk(t,n=[]){const r=(0,e.useRef)(t);return pk((()=>{r.current=t})),(0,e.useCallback)(((...e)=>{var t;return null==(t=r.current)?void 0:t.call(r,...e)}),n)}var mk=Object.defineProperty,gk=new class{constructor(){((e,t,n)=>{((e,t,n)=>{t in e?mk(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n})(e,"symbol"!=typeof t?t+"":t,n)})(this,"modals"),this.modals=new Map}add(e){return this.modals.set(e,this.modals.size+1),this.modals.size}remove(e){this.modals.delete(e)}isTopModal(e){return!!e&&this.modals.get(e)===this.modals.size}};function vk(t,n){const[r,o]=(0,e.useState)(0);return(0,e.useEffect)((()=>{const e=t.current;if(e){if(n){const t=gk.add(e);o(t)}return()=>{gk.remove(e),o(0)}}}),[n,t]),r}var yk=new WeakMap,bk=new WeakMap,xk={},wk=0,kk=function(e){return e&&(e.host||kk(e.parentNode))},Sk=function(e,t,n){void 0===n&&(n="data-aria-hidden");var r=Array.from(Array.isArray(e)?e:[e]),o=t||function(e){return"undefined"==typeof document?null:(Array.isArray(e)?e[0]:e).ownerDocument.body}(e);return o?(r.push.apply(r,Array.from(o.querySelectorAll("[aria-live]"))),function(e,t,n,r){var o=function(e,t){return t.map((function(t){if(e.contains(t))return t;var n=kk(t);return n&&e.contains(n)?n:(console.error("aria-hidden",t,"in not contained inside",e,". Doing nothing"),null)})).filter((function(e){return Boolean(e)}))}(t,Array.isArray(e)?e:[e]);xk[n]||(xk[n]=new WeakMap);var a=xk[n],i=[],s=new Set,l=new Set(o),c=function(e){e&&!s.has(e)&&(s.add(e),c(e.parentNode))};o.forEach(c);var u=function(e){e&&!l.has(e)&&Array.prototype.forEach.call(e.children,(function(e){if(s.has(e))u(e);else{var t=e.getAttribute(r),o=null!==t&&"false"!==t,l=(yk.get(e)||0)+1,c=(a.get(e)||0)+1;yk.set(e,l),a.set(e,c),i.push(e),1===l&&o&&bk.set(e,!0),1===c&&e.setAttribute(n,"true"),o||e.setAttribute(r,"true")}}))};return u(t),s.clear(),wk++,function(){i.forEach((function(e){var t=yk.get(e)-1,o=a.get(e)-1;yk.set(e,t),a.set(e,o),t||(bk.has(e)||e.removeAttribute(r),bk.delete(e)),o||e.removeAttribute(n)})),--wk||(yk=new WeakMap,yk=new WeakMap,bk=new WeakMap,xk={})}}(r,o,n,"aria-hidden")):function(){return null}};function Ek(t){const{isOpen:n,onClose:r,id:o,closeOnOverlayClick:a=!0,closeOnEsc:i=!0,useInert:s=!0,onOverlayClick:l,onEsc:c}=t,u=(0,e.useRef)(null),d=(0,e.useRef)(null),[p,h,m]=function(t,...n){const r=(0,e.useId)(),o=t||r;return(0,e.useMemo)((()=>n.map((e=>`${e}-${o}`))),[o,n])}(o,"chakra-modal","chakra-modal--header","chakra-modal--body");!function(t,n){const r=t.current;(0,e.useEffect)((()=>{if(t.current&&n)return Sk(t.current)}),[n,t,r])}(u,n&&s);const g=vk(u,n),v=(0,e.useRef)(null),y=(0,e.useCallback)((e=>{v.current=e.target}),[]),b=(0,e.useCallback)((e=>{"Escape"===e.key&&(e.stopPropagation(),i&&(null==r||r()),null==c||c())}),[i,r,c]),[x,w]=(0,e.useState)(!1),[k,S]=(0,e.useState)(!1),E=(0,e.useCallback)(((e={},t=null)=>({role:"dialog",...e,ref:vr(t,u),id:p,tabIndex:-1,"aria-modal":!0,"aria-labelledby":x?h:void 0,"aria-describedby":k?m:void 0,onClick:f(e.onClick,(e=>e.stopPropagation()))})),[m,k,p,h,x]),C=(0,e.useCallback)((e=>{e.stopPropagation(),v.current===e.target&&gk.isTopModal(u.current)&&(a&&(null==r||r()),null==l||l())}),[r,a,l]),_=(0,e.useCallback)(((e={},t=null)=>({...e,ref:vr(t,d),onClick:f(e.onClick,C),onKeyDown:f(e.onKeyDown,b),onMouseDown:f(e.onMouseDown,y)})),[b,y,C]);return{isOpen:n,onClose:r,headerId:h,bodyId:m,setBodyMounted:S,setHeaderMounted:w,dialogRef:u,overlayRef:d,getDialogProps:E,getDialogContainerProps:_,index:g}}var[Ck,_k]=rr({strict:!1,name:"PortalManagerContext"});function Pk(e){const{children:t,zIndex:n}=e;return(0,qn.jsx)(Ck,{value:{zIndex:n},children:t})}Pk.displayName="PortalManager";var Ak=o(935),[Tk,zk]=rr({strict:!1,name:"PortalContext"}),Mk="chakra-portal",Fk=e=>(0,qn.jsx)("div",{className:"chakra-portal-zIndex",style:{position:"absolute",zIndex:e.zIndex,top:0,left:0,right:0},children:e.children}),Ok=t=>{const{appendToParentPortal:n,children:r}=t,[o,a]=(0,e.useState)(null),i=(0,e.useRef)(null),[,s]=(0,e.useState)({});(0,e.useEffect)((()=>s({})),[]);const l=zk(),c=_k();Pi((()=>{if(!o)return;const e=o.ownerDocument,t=n&&null!=l?l:e.body;if(!t)return;i.current=e.createElement("div"),i.current.className=Mk,t.appendChild(i.current),s({});const r=i.current;return()=>{t.contains(r)&&t.removeChild(r)}}),[o]);const u=(null==c?void 0:c.zIndex)?(0,qn.jsx)(Fk,{zIndex:null==c?void 0:c.zIndex,children:r}):r;return i.current?(0,Ak.createPortal)((0,qn.jsx)(Tk,{value:i.current,children:u}),i.current):(0,qn.jsx)("span",{ref:e=>{e&&a(e)}})},Rk=t=>{const{children:n,containerRef:r,appendToParentPortal:o}=t,a=r.current,i=null!=a?a:"undefined"!=typeof window?document.body:void 0,s=(0,e.useMemo)((()=>{const e=null==a?void 0:a.ownerDocument.createElement("div");return e&&(e.className=Mk),e}),[a]),[,l]=(0,e.useState)({});return Pi((()=>l({})),[]),Pi((()=>{if(s&&i)return i.appendChild(s),()=>{i.removeChild(s)}}),[s,i]),i&&s?(0,Ak.createPortal)((0,qn.jsx)(Tk,{value:o?s:null,children:n}),s):null};function jk(e){const t={appendToParentPortal:!0,...e},{containerRef:n,...r}=t;return n?(0,qn.jsx)(Rk,{containerRef:n,...r}):(0,qn.jsx)(Ok,{...r})}jk.className=Mk,jk.selector=".chakra-portal",jk.displayName="Portal";var[Ik,Nk]=rr({name:"ModalStylesContext",errorMessage:"useModalStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Modal />\" "}),[Dk,Lk]=rr({strict:!0,name:"ModalContext",errorMessage:"useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`"}),Bk=e=>{const t={scrollBehavior:"outside",autoFocus:!0,trapFocus:!0,returnFocusOnClose:!0,blockScrollOnMount:!0,allowPinchZoom:!1,motionPreset:"scale",lockFocusAcrossFrames:!0,...e},{portalProps:n,children:r,autoFocus:o,trapFocus:a,initialFocusRef:i,finalFocusRef:s,returnFocusOnClose:l,blockScrollOnMount:c,allowPinchZoom:u,preserveScrollBarGap:d,motionPreset:f,lockFocusAcrossFrames:p,onCloseComplete:h}=t,m=pr("Modal",t),g={...Ek(t),autoFocus:o,trapFocus:a,initialFocusRef:i,finalFocusRef:s,returnFocusOnClose:l,blockScrollOnMount:c,allowPinchZoom:u,preserveScrollBarGap:d,motionPreset:f,lockFocusAcrossFrames:p};return(0,qn.jsx)(Dk,{value:g,children:(0,qn.jsx)(Ik,{value:m,children:(0,qn.jsx)(om,{onExitComplete:h,children:g.isOpen&&(0,qn.jsx)(jk,{...n,children:r})})})})};Bk.displayName="Modal";var $k={enter:({transition:e,transitionEnd:t,delay:n}={})=>{var r;return{opacity:1,transition:null!=(r=null==e?void 0:e.enter)?r:Ih(jh.enter,n),transitionEnd:null==t?void 0:t.enter}},exit:({transition:e,transitionEnd:t,delay:n}={})=>{var r;return{opacity:0,transition:null!=(r=null==e?void 0:e.exit)?r:Nh(jh.exit,n),transitionEnd:null==t?void 0:t.exit}}},Vk={initial:"exit",animate:"enter",exit:"exit",variants:$k},Wk=(0,e.forwardRef)((function(e,t){const{unmountOnExit:n,in:r,className:o,transition:i,transitionEnd:s,delay:l,...c}=e,u=r||n?"enter":"exit",d=!n||r&&n,f={transition:i,transitionEnd:s,delay:l};return(0,qn.jsx)(om,{custom:f,children:d&&(0,qn.jsx)(Ww.div,{ref:t,className:a("chakra-fade",o),custom:f,...Vk,animate:u,...c})})}));Wk.displayName="Fade";var Hk=Un(Ww.div),Uk=r(((e,t)=>{const{className:n,transition:r,motionProps:o,...i}=e,s=a("chakra-modal__overlay",n),l={pos:"fixed",left:"0",top:"0",w:"100vw",h:"100vh",...Nk().overlay},{motionPreset:c}=Lk(),u=o||("none"===c?{}:Vk);return(0,qn.jsx)(Hk,{...u,__css:l,ref:t,className:s,...i})}));Uk.displayName="ModalOverlay";var qk={initial:({offsetX:e,offsetY:t,transition:n,transitionEnd:r,delay:o})=>{var a;return{opacity:0,x:e,y:t,transition:null!=(a=null==n?void 0:n.exit)?a:Nh(jh.exit,o),transitionEnd:null==r?void 0:r.exit}},enter:({transition:e,transitionEnd:t,delay:n})=>{var r;return{opacity:1,x:0,y:0,transition:null!=(r=null==e?void 0:e.enter)?r:Ih(jh.enter,n),transitionEnd:null==t?void 0:t.enter}},exit:({offsetY:e,offsetX:t,transition:n,transitionEnd:r,reverse:o,delay:a})=>{var i;const s={x:t,y:e};return{opacity:0,transition:null!=(i=null==n?void 0:n.exit)?i:Nh(jh.exit,a),...o?{...s,transitionEnd:null==r?void 0:r.exit}:{transitionEnd:{...s,...null==r?void 0:r.exit}}}}},Gk={initial:"initial",animate:"enter",exit:"exit",variants:qk},Yk=(0,e.forwardRef)((function(e,t){const{unmountOnExit:n,in:r,reverse:o=!0,className:i,offsetX:s=0,offsetY:l=8,transition:c,transitionEnd:u,delay:d,...f}=e,p=!n||r&&n,h=r||n?"enter":"exit",m={offsetX:s,offsetY:l,reverse:o,transition:c,transitionEnd:u,delay:d};return(0,qn.jsx)(om,{custom:m,children:p&&(0,qn.jsx)(Ww.div,{ref:t,className:a("chakra-offset-slide",i),custom:m,...Gk,animate:h,...f})})}));Yk.displayName="SlideFade";var Xk={exit:({reverse:e,initialScale:t,transition:n,transitionEnd:r,delay:o})=>{var a;return{opacity:0,...e?{scale:t,transitionEnd:null==r?void 0:r.exit}:{transitionEnd:{scale:t,...null==r?void 0:r.exit}},transition:null!=(a=null==n?void 0:n.exit)?a:Nh(jh.exit,o)}},enter:({transitionEnd:e,transition:t,delay:n})=>{var r;return{opacity:1,scale:1,transition:null!=(r=null==t?void 0:t.enter)?r:Ih(jh.enter,n),transitionEnd:null==e?void 0:e.enter}}},Qk={initial:"exit",animate:"enter",exit:"exit",variants:Xk},Kk=(0,e.forwardRef)((function(e,t){const{unmountOnExit:n,in:r,reverse:o=!0,initialScale:i=.95,className:s,transition:l,transitionEnd:c,delay:u,...d}=e,f=!n||r&&n,p=r||n?"enter":"exit",h={initialScale:i,reverse:o,transition:l,transitionEnd:c,delay:u};return(0,qn.jsx)(om,{custom:h,children:f&&(0,qn.jsx)(Ww.div,{ref:t,className:a("chakra-offset-slide",s),...Qk,animate:p,custom:h,...d})})}));Kk.displayName="ScaleFade";var Zk={slideInBottom:{...Gk,custom:{offsetY:16,reverse:!0}},slideInRight:{...Gk,custom:{offsetX:16,reverse:!0}},slideInTop:{...Gk,custom:{offsetY:-16,reverse:!0}},slideInLeft:{...Gk,custom:{offsetX:-16,reverse:!0}},scale:{...Qk,custom:{initialScale:.95,reverse:!0}},none:{}},Jk=Un(Ww.section),eS=e=>Zk[e||"none"],tS=(0,e.forwardRef)(((e,t)=>{const{preset:n,motionProps:r=eS(n),...o}=e;return(0,qn.jsx)(Jk,{ref:t,...r,...o})}));tS.displayName="ModalTransition";var nS="data-focus-lock",rS="data-focus-lock-disabled";function oS(e,t){return"function"==typeof e?e(t):e&&(e.current=t),e}var aS=new WeakMap;function iS(t,n){var r,o,a,i=(r=n||null,o=function(e){return t.forEach((function(t){return oS(t,e)}))},(a=(0,e.useState)((function(){return{value:r,callback:o,facade:{get current(){return a.value},set current(e){var t=a.value;t!==e&&(a.value=e,a.callback(e,t))}}}}))[0]).callback=o,a.facade);return e.useLayoutEffect((function(){var e=aS.get(i);if(e){var n=new Set(e),r=new Set(t),o=i.current;n.forEach((function(e){r.has(e)||oS(e,null)})),r.forEach((function(e){n.has(e)||oS(e,o)}))}aS.set(i,t)}),[t]),i}var sS={width:"1px",height:"0px",padding:0,overflow:"hidden",position:"fixed",top:"1px",left:"1px"},lS=function(t){var n=t.children;return e.createElement(e.Fragment,null,e.createElement("div",{key:"guard-first","data-focus-guard":!0,"data-focus-auto-guard":!0,style:sS}),n,n&&e.createElement("div",{key:"guard-last","data-focus-guard":!0,"data-focus-auto-guard":!0,style:sS}))};function cS(e){return e}function uS(e,t){void 0===t&&(t=cS);var n=[],r=!1,o={read:function(){if(r)throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");return n.length?n[n.length-1]:e},useMedium:function(e){var o=t(e,r);return n.push(o),function(){n=n.filter((function(e){return e!==o}))}},assignSyncMedium:function(e){for(r=!0;n.length;){var t=n;n=[],t.forEach(e)}n={push:function(t){return e(t)},filter:function(){return n}}},assignMedium:function(e){r=!0;var t=[];if(n.length){var o=n;n=[],o.forEach(e),t=n}var a=function(){var n=t;t=[],n.forEach(e)},i=function(){return Promise.resolve().then(a)};i(),n={push:function(e){t.push(e),i()},filter:function(e){return t=t.filter(e),n}}}};return o}function dS(e,t){return void 0===t&&(t=cS),uS(e,t)}function fS(e){void 0===e&&(e={});var t=uS(null);return t.options=_r({async:!0,ssr:!1},e),t}lS.propTypes={},lS.defaultProps={children:null};var pS=dS({},(function(e){return{target:e.target,currentTarget:e.currentTarget}})),hS=dS(),mS=dS(),gS=fS({async:!0}),vS=[],yS=e.forwardRef((function(t,n){var r,o=e.useState(),a=o[0],i=o[1],s=e.useRef(),l=e.useRef(!1),c=e.useRef(null),u=t.children,d=t.disabled,f=t.noFocusGuards,p=t.persistentFocus,h=t.crossFrame,m=t.autoFocus,g=(t.allowTextSelection,t.group),v=t.className,y=t.whiteList,b=t.hasPositiveIndices,x=t.shards,w=void 0===x?vS:x,k=t.as,S=void 0===k?"div":k,E=t.lockProps,C=void 0===E?{}:E,_=t.sideCar,P=t.returnFocus,A=t.focusOptions,T=t.onActivation,z=t.onDeactivation,M=e.useState({})[0],F=e.useCallback((function(){c.current=c.current||document&&document.activeElement,s.current&&T&&T(s.current),l.current=!0}),[T]),O=e.useCallback((function(){l.current=!1,z&&z(s.current)}),[z]);(0,e.useEffect)((function(){d||(c.current=null)}),[]);var R=e.useCallback((function(e){var t=c.current;if(t&&t.focus){var n="function"==typeof P?P(t):P;if(n){var r="object"==typeof n?n:void 0;c.current=null,e?Promise.resolve().then((function(){return t.focus(r)})):t.focus(r)}}}),[P]),j=e.useCallback((function(e){l.current&&pS.useMedium(e)}),[]),I=hS.useMedium,N=e.useCallback((function(e){s.current!==e&&(s.current=e,i(e))}),[]),D=at(((r={})[rS]=d&&"disabled",r[nS]=g,r),C),L=!0!==f,B=L&&"tail"!==f,$=iS([n,N]);return e.createElement(e.Fragment,null,L&&[e.createElement("div",{key:"guard-first","data-focus-guard":!0,tabIndex:d?-1:0,style:sS}),b?e.createElement("div",{key:"guard-nearest","data-focus-guard":!0,tabIndex:d?-1:1,style:sS}):null],!d&&e.createElement(_,{id:M,sideCar:gS,observed:a,disabled:d,persistentFocus:p,crossFrame:h,autoFocus:m,whiteList:y,shards:w,onActivation:F,onDeactivation:O,returnFocus:R,focusOptions:A}),e.createElement(S,at({ref:$},D,{className:v,onBlur:I,onFocus:j}),u),B&&e.createElement("div",{"data-focus-guard":!0,tabIndex:d?-1:0,style:sS}))}));yS.propTypes={},yS.defaultProps={children:void 0,disabled:!1,returnFocus:!1,focusOptions:void 0,noFocusGuards:!1,autoFocus:!0,persistentFocus:!1,crossFrame:!0,hasPositiveIndices:void 0,allowTextSelection:void 0,group:void 0,className:void 0,whiteList:void 0,shards:void 0,as:"div",lockProps:{},onActivation:void 0,onDeactivation:void 0};const bS=yS;function xS(e,t){return xS=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},xS(e,t)}function wS(e){return wS="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},wS(e)}var kS=function(e){for(var t=Array(e.length),n=0;n<e.length;++n)t[n]=e[n];return t},SS=function(e){return Array.isArray(e)?e:[e]},ES=function(e){return Array.isArray(e)?e[0]:e},CS=function(e){return e.parentNode&&e.parentNode.nodeType===Node.DOCUMENT_FRAGMENT_NODE?e.parentNode.host:e.parentNode},_S=function(e){return e===document||e&&e.nodeType===Node.DOCUMENT_NODE},PS=function(e,t){var n=e.get(t);if(void 0!==n)return n;var r=function(e,t){return!e||_S(e)||!function(e){if(e.nodeType!==Node.ELEMENT_NODE)return!1;var t=window.getComputedStyle(e,null);return!(!t||!t.getPropertyValue||"none"!==t.getPropertyValue("display")&&"hidden"!==t.getPropertyValue("visibility"))}(e)&&t(CS(e))}(t,PS.bind(void 0,e));return e.set(t,r),r},AS=function(e,t){var n=e.get(t);if(void 0!==n)return n;var r=function(e,t){return!(e&&!_S(e))||!!FS(e)&&t(CS(e))}(t,AS.bind(void 0,e));return e.set(t,r),r},TS=function(e){return e.dataset},zS=function(e){return"INPUT"===e.tagName},MS=function(e){return zS(e)&&"radio"===e.type},FS=function(e){var t=e.getAttribute("data-no-autofocus");return![!0,"true",""].includes(t)},OS=function(e){var t;return Boolean(e&&(null===(t=TS(e))||void 0===t?void 0:t.focusGuard))},RS=function(e){return!OS(e)},jS=function(e){return Boolean(e)},IS=function(e,t){var n=e.tabIndex-t.tabIndex,r=e.index-t.index;if(n){if(!e.tabIndex)return 1;if(!t.tabIndex)return-1}return n||r},NS=function(e,t,n){return kS(e).map((function(e,t){return{node:e,index:t,tabIndex:n&&-1===e.tabIndex?(e.dataset||{}).focusGuard?0:-1:e.tabIndex}})).filter((function(e){return!t||e.tabIndex>=0})).sort(IS)},DS=["button:enabled","select:enabled","textarea:enabled","input:enabled","a[href]","area[href]","summary","iframe","object","embed","audio[controls]","video[controls]","[tabindex]","[contenteditable]","[autofocus]"].join(","),LS="".concat(DS,", [data-focus-guard]"),BS=function(e,t){return kS((e.shadowRoot||e).children).reduce((function(e,n){return e.concat(n.matches(t?LS:DS)?[n]:[],BS(n))}),[])},$S=function(e,t){return e.reduce((function(e,n){var r,o=BS(n,t),a=(r=[]).concat.apply(r,o.map((function(e){return function(e,t){var n;return e instanceof HTMLIFrameElement&&(null===(n=e.contentDocument)||void 0===n?void 0:n.body)?$S([e.contentDocument.body],t):[e]}(e,t)})));return e.concat(a,n.parentNode?kS(n.parentNode.querySelectorAll(DS)).filter((function(e){return e===n})):[])}),[])},VS=function(e,t){return kS(e).filter((function(e){return PS(t,e)})).filter((function(e){return function(e){return!((zS(e)||function(e){return"BUTTON"===e.tagName}(e))&&("hidden"===e.type||e.disabled))}(e)}))},WS=function(e,t){return void 0===t&&(t=new Map),kS(e).filter((function(e){return AS(t,e)}))},HS=function(e,t,n){return NS(VS($S(e,n),t),!0,n)},US=function(e,t){return NS(VS($S(e),t),!1)},qS=function(e,t){return e.shadowRoot?qS(e.shadowRoot,t):!(void 0===Object.getPrototypeOf(e).contains||!Object.getPrototypeOf(e).contains.call(e,t))||kS(e.children).some((function(e){var n;if(e instanceof HTMLIFrameElement){var r=null===(n=e.contentDocument)||void 0===n?void 0:n.body;return!!r&&qS(r,t)}return qS(e,t)}))},GS=function(e){if(void 0===e&&(e=document),e&&e.activeElement){var t=e.activeElement;return t.shadowRoot?GS(t.shadowRoot):t instanceof HTMLIFrameElement&&function(e){try{return t.contentWindow.document}catch(e){return}}()?GS(t.contentWindow.document):t}},YS=function(e){return e.parentNode?YS(e.parentNode):e},XS=function(e){return SS(e).filter(Boolean).reduce((function(e,t){var n=t.getAttribute(nS);return e.push.apply(e,n?function(e){for(var t=new Set,n=e.length,r=0;r<n;r+=1)for(var o=r+1;o<n;o+=1){var a=e[r].compareDocumentPosition(e[o]);(a&Node.DOCUMENT_POSITION_CONTAINED_BY)>0&&t.add(o),(a&Node.DOCUMENT_POSITION_CONTAINS)>0&&t.add(r)}return e.filter((function(e,n){return!t.has(n)}))}(kS(YS(t).querySelectorAll("[".concat(nS,'="').concat(n,'"]:not([').concat(rS,'="disabled"])')))):[t]),e}),[])},QS=function(e,t){return void 0===t&&(t=GS(ES(e).ownerDocument)),!(!t||t.dataset&&t.dataset.focusGuard)&&XS(e).some((function(e){return qS(e,t)||function(e,t){return Boolean(kS(e.querySelectorAll("iframe")).some((function(e){return function(e,t){return e===t}(e,t)})))}(e,t)}))},KS=function(e,t){return MS(e)&&e.name?function(e,t){return t.filter(MS).filter((function(t){return t.name===e.name})).filter((function(e){return e.checked}))[0]||e}(e,t):e},ZS=function(e){return e[0]&&e.length>1?KS(e[0],e):e[0]},JS=function(e,t){return e.length>1?e.indexOf(KS(e[t],e)):t},eE="NEW_FOCUS",tE=function(e,t){return void 0===t&&(t=[]),t.push(e),e.parentNode&&tE(e.parentNode.host||e.parentNode,t),t},nE=function(e,t){for(var n=tE(e),r=tE(t),o=0;o<n.length;o+=1){var a=n[o];if(r.indexOf(a)>=0)return a}return!1},rE=function(e,t,n){var r=SS(e),o=SS(t),a=r[0],i=!1;return o.filter(Boolean).forEach((function(e){i=nE(i||e,e)||i,n.filter(Boolean).forEach((function(e){var t=nE(a,e);t&&(i=!i||qS(t,i)?t:nE(t,i))}))})),i},oE=function(e,t){var n,r,o,a,i,s,l=GS(SS(e).length>0?document:ES(e).ownerDocument),c=XS(e).filter(RS),u=rE(l||e,e,c),d=new Map,f=US(c,d),p=HS(c,d).filter((function(e){var t=e.node;return RS(t)}));if(p[0]||(p=f)[0]){var h,m,g,v=US([u],d).map((function(e){return e.node})),y=(h=v,m=p,g=new Map,m.forEach((function(e){return g.set(e.node,e)})),h.map((function(e){return g.get(e)})).filter(jS)),b=y.map((function(e){return e.node})),x=function(e,t,n,r){var o=e.length,a=e[0],i=e[o-1],s=OS(n);if(!(n&&e.indexOf(n)>=0)){var l,c,u=void 0!==n?t.indexOf(n):-1,d=r?t.indexOf(r):u,f=r?e.indexOf(r):-1,p=u-d,h=t.indexOf(a),m=t.indexOf(i),g=(l=t,c=new Set,l.forEach((function(e){return c.add(KS(e,l))})),l.filter((function(e){return c.has(e)}))),v=(void 0!==n?g.indexOf(n):-1)-(r?g.indexOf(r):u),y=JS(e,0),b=JS(e,o-1);return-1===u||-1===f?eE:!p&&f>=0?f:u<=h&&s&&Math.abs(p)>1?b:u>=m&&s&&Math.abs(p)>1?y:p&&Math.abs(v)>1?f:u<=h?b:u>m?y:p?Math.abs(p)>1?f:(o+f+p)%o:void 0}}(b,v,l,t);if(x===eE){var w=(n=f,r=b,o=function(e,t){return e.reduce((function(e,n){return e.concat(function(e,t){return VS((n=e.querySelectorAll("[".concat("data-autofocus-inside","]")),kS(n).map((function(e){return $S([e])})).reduce((function(e,t){return e.concat(t)}),[])),t);var n}(n,t))}),[])}(c,d),i=n.map((function(e){return e.node})),s=WS(i.filter((a=o,function(e){var t,n=null===(t=TS(e))||void 0===t?void 0:t.autofocus;return e.autofocus||void 0!==n&&"false"!==n||a.indexOf(e)>=0}))),s&&s.length?ZS(s):ZS(WS(r)));return w?{node:w}:void console.warn("focus-lock: cannot find any node to move focus into")}return void 0===x?x:y[x]}},aE=0,iE=!1,sE=function(e,t,n){void 0===n&&(n={});var r,o,a=oE(e,t);if(!iE&&a){if(aE>2)return console.error("FocusLock: focus-fighting detected. Only one focus management system could be active. See https://github.com/theKashey/focus-lock/#focus-fighting"),iE=!0,void setTimeout((function(){iE=!1}),1);aE++,r=a.node,o=n.focusOptions,"focus"in r&&r.focus(o),"contentWindow"in r&&r.contentWindow&&r.contentWindow.focus(),aE--}};function lE(e){setTimeout(e,1)}var cE=null,uE=null,dE=null,fE=!1,pE=function(){return!0};function hE(e,t,n,r){var o=null,a=e;do{var i=r[a];if(i.guard)i.node.dataset.focusAutoGuard&&(o=i);else{if(!i.lockItem)break;if(a!==e)return;o=null}}while((a+=n)!==t);o&&(o.node.tabIndex=0)}var mE=function(e){return e&&"current"in e?e.current:e},gE=function e(t,n,r){return n&&(n.host===t&&(!n.activeElement||r.contains(n.activeElement))||n.parentNode&&e(t,n.parentNode,r))},vE=function(){var e,t,n,r,o,a,i,s=!1;if(cE){var l=cE,c=l.observed,u=l.persistentFocus,d=l.autoFocus,f=l.shards,p=l.crossFrame,h=l.focusOptions,m=c||dE&&dE.portaledElement,g=document&&document.activeElement;if(m){var v=[m].concat(f.map(mE).filter(Boolean));if(g&&!function(e){return(cE.whiteList||pE)(e)}(g)||(u||(p?Boolean(fE):"meanwhile"===fE)||!(document&&document.activeElement===document.body||function(e){void 0===e&&(e=document);var t=GS(e);return!!t&&kS(e.querySelectorAll("[".concat("data-no-focus-lock","]"))).some((function(e){return qS(e,t)}))}())||!uE&&d)&&(m&&!(QS(v)||g&&function(e,t){return t.some((function(t){return gE(e,t,t)}))}(g,v)||(i=g,dE&&dE.portaledElement===i))&&(document&&!uE&&g&&!d?(g.blur&&g.blur(),document.body.focus()):(s=sE(v,uE,{focusOptions:h}),dE={})),fE=!1,uE=document&&document.activeElement),document){var y=document&&document.activeElement,b=(t=XS(e=v).filter(RS),n=rE(e,e,t),r=new Map,o=HS([n],r,!0),a=HS(t,r).filter((function(e){var t=e.node;return RS(t)})).map((function(e){return e.node})),o.map((function(e){var t=e.node;return{node:t,index:e.index,lockItem:a.indexOf(t)>=0,guard:OS(t)}}))),x=b.map((function(e){return e.node})).indexOf(y);x>-1&&(b.filter((function(e){var t=e.guard,n=e.node;return t&&n.dataset.focusAutoGuard})).forEach((function(e){return e.node.removeAttribute("tabIndex")})),hE(x,b.length,1,b),hE(x,-1,-1,b))}}}return s},yE=function(e){vE()&&e&&(e.stopPropagation(),e.preventDefault())},bE=function(){return lE(vE)},xE=function(){fE="just",lE((function(){fE="meanwhile"}))};pS.assignSyncMedium((function(e){var t=e.target,n=e.currentTarget;n.contains(t)||(dE={observerNode:n,portaledElement:t})})),hS.assignMedium(bE),mS.assignMedium((function(e){return e({moveFocusInside:sE,focusInside:QS})}));const wE=(kE=function(e){return e.filter((function(e){return!e.disabled}))},SE=function(e){var t=e.slice(-1)[0];t&&!cE&&(document.addEventListener("focusin",yE),document.addEventListener("focusout",bE),window.addEventListener("blur",xE));var n=cE,r=n&&t&&t.id===n.id;cE=t,n&&!r&&(n.onDeactivation(),e.filter((function(e){return e.id===n.id})).length||n.returnFocus(!t)),t?(uE=null,r&&n.observed===t.observed||t.onActivation(),vE(),lE(vE)):(document.removeEventListener("focusin",yE),document.removeEventListener("focusout",bE),window.removeEventListener("blur",xE),uE=null)},function(t){var n,r=[];function o(){n=kE(r.map((function(e){return e.props}))),SE(n)}var a,i,s,l,c=function(a){var i,s;function l(){return a.apply(this,arguments)||this}s=a,(i=l).prototype=Object.create(s.prototype),i.prototype.constructor=i,xS(i,s),l.peek=function(){return n};var c=l.prototype;return c.componentDidMount=function(){r.push(this),o()},c.componentDidUpdate=function(){o()},c.componentWillUnmount=function(){var e=r.indexOf(this);r.splice(e,1),o()},c.render=function(){return e.createElement(t,this.props)},l}(e.PureComponent);return a=c,i="displayName",s="SideEffect("+function(e){return e.displayName||e.name||"Component"}(t)+")",l=function(e,t){if("object"!=wS(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=wS(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(i),(i="symbol"==wS(l)?l:String(l))in a?Object.defineProperty(a,i,{value:s,enumerable:!0,configurable:!0,writable:!0}):a[i]=s,c})((function(){return null}));var kE,SE,EE=e.forwardRef((function(t,n){return e.createElement(bS,at({sideCar:wE,ref:n},t))})),CE=bS.propTypes||{};CE.sideCar,function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n])}(CE,["sideCar"]),EE.propTypes={};const _E=EE;var PE=e=>e.hasAttribute("tabindex");function AE(e){return!(!e.parentElement||!AE(e.parentElement))||e.hidden}function TE(e){if(!function(e){var t;return!!function(e){return null!=e&&"object"==typeof e&&"nodeType"in e&&e.nodeType===Node.ELEMENT_NODE}(e)&&e instanceof(null!=(t=e.ownerDocument.defaultView)?t:window).HTMLElement}(e)||AE(e)||function(e){return!0===Boolean(e.getAttribute("disabled"))||!0===Boolean(e.getAttribute("aria-disabled"))}(e))return!1;const{localName:t}=e;if(["input","select","textarea","button"].indexOf(t)>=0)return!0;const n={a:()=>e.hasAttribute("href"),audio:()=>e.hasAttribute("controls"),video:()=>e.hasAttribute("controls")};return t in n?n[t]():!!function(e){const t=e.getAttribute("contenteditable");return"false"!==t&&null!=t}(e)||PE(e)}var zE,ME=["input:not(:disabled):not([disabled])","select:not(:disabled):not([disabled])","textarea:not(:disabled):not([disabled])","embed","iframe","object","a[href]","area[href]","button:not(:disabled):not([disabled])","[tabindex]","audio[controls]","video[controls]","*[tabindex]:not([aria-disabled])","*[contenteditable]"].join(),FE=e=>e.offsetWidth>0&&e.offsetHeight>0;var OE=null!=(zE=_E.default)?zE:_E,RE=t=>{const{initialFocusRef:n,finalFocusRef:r,contentRef:o,restoreFocus:a,children:i,isDisabled:s,autoFocus:l,persistentFocus:c,lockFocusAcrossFrames:u}=t,d=(0,e.useCallback)((()=>{(null==n?void 0:n.current)?n.current.focus():(null==o?void 0:o.current)&&0===function(e){const t=Array.from(e.querySelectorAll(ME));return t.unshift(e),t.filter((e=>TE(e)&&FE(e)))}(o.current).length&&requestAnimationFrame((()=>{var e;null==(e=o.current)||e.focus()}))}),[n,o]),f=(0,e.useCallback)((()=>{var e;null==(e=null==r?void 0:r.current)||e.focus()}),[r]),p=a&&!r;return(0,qn.jsx)(OE,{crossFrame:u,persistentFocus:c,autoFocus:l,disabled:s,onActivation:d,onDeactivation:f,returnFocus:p,children:i})};RE.displayName="FocusLock";var jE="right-scroll-bar-position",IE="width-before-scroll-bar",NE=fS(),DE=function(){},LE=e.forwardRef((function(t,n){var r=e.useRef(null),o=e.useState({onScrollCapture:DE,onWheelCapture:DE,onTouchMoveCapture:DE}),a=o[0],i=o[1],s=t.forwardProps,l=t.children,c=t.className,u=t.removeScrollBar,d=t.enabled,f=t.shards,p=t.sideCar,h=t.noIsolation,m=t.inert,g=t.allowPinchZoom,v=t.as,y=void 0===v?"div":v,b=t.gapMode,x=Pr(t,["forwardProps","children","className","removeScrollBar","enabled","shards","sideCar","noIsolation","inert","allowPinchZoom","as","gapMode"]),w=p,k=iS([r,n]),S=_r(_r({},x),a);return e.createElement(e.Fragment,null,d&&e.createElement(w,{sideCar:NE,removeScrollBar:u,shards:f,noIsolation:h,inert:m,setCallbacks:i,allowPinchZoom:!!g,lockRef:r,gapMode:b}),s?e.cloneElement(e.Children.only(l),_r(_r({},S),{ref:k})):e.createElement(y,_r({},S,{className:c,ref:k}),l))}));LE.defaultProps={enabled:!0,removeScrollBar:!0,inert:!1},LE.classNames={fullWidth:IE,zeroRight:jE};var BE=function(t){var n=t.sideCar,r=Pr(t,["sideCar"]);if(!n)throw new Error("Sidecar: please provide `sideCar` property to import the right car");var o=n.read();if(!o)throw new Error("Sidecar medium not found");return e.createElement(o,_r({},r))};BE.isSideCarExport=!0;var $E=function(){var e=0,t=null;return{add:function(n){var r;0==e&&(t=function(){if(!document)return null;var e=document.createElement("style");e.type="text/css";var t=o.nc;return t&&e.setAttribute("nonce",t),e}())&&(function(e,t){e.styleSheet?e.styleSheet.cssText=t:e.appendChild(document.createTextNode(t))}(t,n),r=t,(document.head||document.getElementsByTagName("head")[0]).appendChild(r)),e++},remove:function(){!--e&&t&&(t.parentNode&&t.parentNode.removeChild(t),t=null)}}},VE=function(){var t,n=(t=$E(),function(n,r){e.useEffect((function(){return t.add(n),function(){t.remove()}}),[n&&r])});return function(e){var t=e.styles,r=e.dynamic;return n(t,r),null}},WE={left:0,top:0,right:0,gap:0},HE=function(e){return parseInt(e||"",10)||0},UE=VE(),qE=function(e,t,n,r){var o=e.left,a=e.top,i=e.right,s=e.gap;return void 0===n&&(n="margin"),"\n  .".concat("with-scroll-bars-hidden"," {\n   overflow: hidden ").concat(r,";\n   padding-right: ").concat(s,"px ").concat(r,";\n  }\n  body {\n    overflow: hidden ").concat(r,";\n    overscroll-behavior: contain;\n    ").concat([t&&"position: relative ".concat(r,";"),"margin"===n&&"\n    padding-left: ".concat(o,"px;\n    padding-top: ").concat(a,"px;\n    padding-right: ").concat(i,"px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(s,"px ").concat(r,";\n    "),"padding"===n&&"padding-right: ".concat(s,"px ").concat(r,";")].filter(Boolean).join(""),"\n  }\n  \n  .").concat(jE," {\n    right: ").concat(s,"px ").concat(r,";\n  }\n  \n  .").concat(IE," {\n    margin-right: ").concat(s,"px ").concat(r,";\n  }\n  \n  .").concat(jE," .").concat(jE," {\n    right: 0 ").concat(r,";\n  }\n  \n  .").concat(IE," .").concat(IE," {\n    margin-right: 0 ").concat(r,";\n  }\n  \n  body {\n    ").concat("--removed-body-scroll-bar-size",": ").concat(s,"px;\n  }\n")},GE=function(t){var n=t.noRelative,r=t.noImportant,o=t.gapMode,a=void 0===o?"margin":o,i=e.useMemo((function(){return function(e){if(void 0===e&&(e="margin"),"undefined"==typeof window)return WE;var t=function(e){var t=window.getComputedStyle(document.body),n=t["padding"===e?"paddingLeft":"marginLeft"],r=t["padding"===e?"paddingTop":"marginTop"],o=t["padding"===e?"paddingRight":"marginRight"];return[HE(n),HE(r),HE(o)]}(e),n=document.documentElement.clientWidth,r=window.innerWidth;return{left:t[0],top:t[1],right:t[2],gap:Math.max(0,r-n+t[2]-t[0])}}(a)}),[a]);return e.createElement(UE,{styles:qE(i,!n,a,r?"":"!important")})},YE=!1;if("undefined"!=typeof window)try{var XE=Object.defineProperty({},"passive",{get:function(){return YE=!0,!0}});window.addEventListener("test",XE,XE),window.removeEventListener("test",XE,XE)}catch(e){YE=!1}var QE=!!YE&&{passive:!1},KE=function(e,t){var n=window.getComputedStyle(e);return"hidden"!==n[t]&&!(n.overflowY===n.overflowX&&!function(e){return"TEXTAREA"===e.tagName}(e)&&"visible"===n[t])},ZE=function(e,t){var n=t.ownerDocument,r=t;do{if("undefined"!=typeof ShadowRoot&&r instanceof ShadowRoot&&(r=r.host),JE(e,r)){var o=eC(e,r);if(o[1]>o[2])return!0}r=r.parentNode}while(r&&r!==n.body);return!1},JE=function(e,t){return"v"===e?function(e){return KE(e,"overflowY")}(t):function(e){return KE(e,"overflowX")}(t)},eC=function(e,t){return"v"===e?function(e){return[e.scrollTop,e.scrollHeight,e.clientHeight]}(t):function(e){return[e.scrollLeft,e.scrollWidth,e.clientWidth]}(t)},tC=function(e){return"changedTouches"in e?[e.changedTouches[0].clientX,e.changedTouches[0].clientY]:[0,0]},nC=function(e){return[e.deltaX,e.deltaY]},rC=function(e){return e&&"current"in e?e.current:e},oC=function(e){return"\n  .block-interactivity-".concat(e," {pointer-events: none;}\n  .allow-interactivity-").concat(e," {pointer-events: all;}\n")},aC=0,iC=[];function sC(e){for(var t=null;null!==e;)e instanceof ShadowRoot&&(t=e.host,e=e.host),e=e.parentNode;return t}const lC=(cC=function(t){var n=e.useRef([]),r=e.useRef([0,0]),o=e.useRef(),a=e.useState(aC++)[0],i=e.useState(VE)[0],s=e.useRef(t);e.useEffect((function(){s.current=t}),[t]),e.useEffect((function(){if(t.inert){document.body.classList.add("block-interactivity-".concat(a));var e=Ar([t.lockRef.current],(t.shards||[]).map(rC),!0).filter(Boolean);return e.forEach((function(e){return e.classList.add("allow-interactivity-".concat(a))})),function(){document.body.classList.remove("block-interactivity-".concat(a)),e.forEach((function(e){return e.classList.remove("allow-interactivity-".concat(a))}))}}}),[t.inert,t.lockRef.current,t.shards]);var l=e.useCallback((function(e,t){if("touches"in e&&2===e.touches.length)return!s.current.allowPinchZoom;var n,a=tC(e),i=r.current,l="deltaX"in e?e.deltaX:i[0]-a[0],c="deltaY"in e?e.deltaY:i[1]-a[1],u=e.target,d=Math.abs(l)>Math.abs(c)?"h":"v";if("touches"in e&&"h"===d&&"range"===u.type)return!1;var f=ZE(d,u);if(!f)return!0;if(f?n=d:(n="v"===d?"h":"v",f=ZE(d,u)),!f)return!1;if(!o.current&&"changedTouches"in e&&(l||c)&&(o.current=n),!n)return!0;var p=o.current||n;return function(e,t,n,r,o){var a=function(e,t){return"h"===e&&"rtl"===t?-1:1}(e,window.getComputedStyle(t).direction),i=a*r,s=n.target,l=t.contains(s),c=!1,u=i>0,d=0,f=0;do{var p=eC(e,s),h=p[0],m=p[1]-p[2]-a*h;(h||m)&&JE(e,s)&&(d+=m,f+=h),s=s instanceof ShadowRoot?s.host:s.parentNode}while(!l&&s!==document.body||l&&(t.contains(s)||t===s));return(u&&(o&&Math.abs(d)<1||!o&&i>d)||!u&&(o&&Math.abs(f)<1||!o&&-i>f))&&(c=!0),c}(p,t,e,"h"===p?l:c,!0)}),[]),c=e.useCallback((function(e){var t=e;if(iC.length&&iC[iC.length-1]===i){var r="deltaY"in t?nC(t):tC(t),o=n.current.filter((function(e){return e.name===t.type&&(e.target===t.target||t.target===e.shadowParent)&&function(e,t){return e[0]===t[0]&&e[1]===t[1]}(e.delta,r)}))[0];if(o&&o.should)t.cancelable&&t.preventDefault();else if(!o){var a=(s.current.shards||[]).map(rC).filter(Boolean).filter((function(e){return e.contains(t.target)}));(a.length>0?l(t,a[0]):!s.current.noIsolation)&&t.cancelable&&t.preventDefault()}}}),[]),u=e.useCallback((function(e,t,r,o){var a={name:e,delta:t,target:r,should:o,shadowParent:sC(r)};n.current.push(a),setTimeout((function(){n.current=n.current.filter((function(e){return e!==a}))}),1)}),[]),d=e.useCallback((function(e){r.current=tC(e),o.current=void 0}),[]),f=e.useCallback((function(e){u(e.type,nC(e),e.target,l(e,t.lockRef.current))}),[]),p=e.useCallback((function(e){u(e.type,tC(e),e.target,l(e,t.lockRef.current))}),[]);e.useEffect((function(){return iC.push(i),t.setCallbacks({onScrollCapture:f,onWheelCapture:f,onTouchMoveCapture:p}),document.addEventListener("wheel",c,QE),document.addEventListener("touchmove",c,QE),document.addEventListener("touchstart",d,QE),function(){iC=iC.filter((function(e){return e!==i})),document.removeEventListener("wheel",c,QE),document.removeEventListener("touchmove",c,QE),document.removeEventListener("touchstart",d,QE)}}),[]);var h=t.removeScrollBar,m=t.inert;return e.createElement(e.Fragment,null,m?e.createElement(i,{styles:oC(a)}):null,h?e.createElement(GE,{gapMode:t.gapMode}):null)},NE.useMedium(cC),BE);var cC,uC=e.forwardRef((function(t,n){return e.createElement(LE,_r({},t,{ref:n,sideCar:lC}))}));uC.classNames=LE.classNames;const dC=uC;function fC(t){const{autoFocus:n,trapFocus:r,dialogRef:o,initialFocusRef:a,blockScrollOnMount:i,allowPinchZoom:s,finalFocusRef:l,returnFocusOnClose:c,preserveScrollBarGap:u,lockFocusAcrossFrames:d,isOpen:f}=Lk(),[p,h]=ux();(0,e.useEffect)((()=>{!p&&h&&setTimeout(h)}),[p,h]);const m=vk(o,f);return(0,qn.jsx)(RE,{autoFocus:n,isDisabled:!r,initialFocusRef:a,finalFocusRef:l,restoreFocus:c,contentRef:o,lockFocusAcrossFrames:d,children:(0,qn.jsx)(dC,{removeScrollBar:!u,allowPinchZoom:s,enabled:1===m&&i,forwardProps:!0,children:t.children})})}var pC=r(((e,t)=>{const{className:n,children:r,containerProps:o,motionProps:i,...s}=e,{getDialogProps:l,getDialogContainerProps:c}=Lk(),u=l(s,t),d=c(o),f=a("chakra-modal__content",n),p=Nk(),h={display:"flex",flexDirection:"column",position:"relative",width:"100%",outline:0,...p.dialog},m={display:"flex",width:"100vw",height:"$100vh",position:"fixed",left:0,top:0,...p.dialogContainer},{motionPreset:g}=Lk();return(0,qn.jsx)(fC,{children:(0,qn.jsx)(Un.div,{...d,className:"chakra-modal__content-container",tabIndex:-1,__css:m,children:(0,qn.jsx)(tS,{preset:g,motionProps:i,className:f,...u,__css:h,children:r})})})}));pC.displayName="ModalContent";var hC=r(((t,n)=>{const{className:r,...o}=t,{bodyId:i,setBodyMounted:s}=Lk();(0,e.useEffect)((()=>(s(!0),()=>s(!1))),[s]);const l=a("chakra-modal__body",r),c=Nk();return(0,qn.jsx)(Un.div,{ref:n,className:l,id:i,...o,__css:c.body})}));hC.displayName="ModalBody";var mC=r(((e,t)=>{const{className:n,...r}=e,o=a("chakra-modal__footer",n),i={display:"flex",alignItems:"center",justifyContent:"flex-end",...Nk().footer};return(0,qn.jsx)(Un.footer,{ref:t,...r,__css:i,className:o})}));mC.displayName="ModalFooter";const gC=function(t){var n=t.isOpen,r=t.onClose,o=t.children;return e.createElement(Bk,{isOpen:n,onClose:r,size:"6xl"},e.createElement(Uk,null),e.createElement(pC,null,e.createElement(hC,{p:0},o),e.createElement(mC,null,e.createElement(kr,{text:"Close",onClick:r}))))};var vC,yC=pi.div(vC||(vC=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  margin-left: auto;\n  margin-right: auto;\n"])));const bC=function(){var t=function(t={}){const{onClose:n,onOpen:r,isOpen:o,id:a}=t,i=hk(r),s=hk(n),[l,c]=(0,e.useState)(t.defaultIsOpen||!1),[u,d]=function(e,t){const n=void 0!==e;return[n,n&&void 0!==e?e:t]}(o,l),f=function(t,n){const r=(0,e.useId)();return(0,e.useMemo)((()=>t||[n,r].filter(Boolean).join("-")),[t,n,r])}(a,"disclosure"),p=(0,e.useCallback)((()=>{u||c(!1),null==s||s()}),[u,s]),h=(0,e.useCallback)((()=>{u||c(!0),null==i||i()}),[u,i]),m=(0,e.useCallback)((()=>{(d?p:h)()}),[d,h,p]);return{isOpen:!!d,onOpen:h,onClose:p,onToggle:m,isControlled:u,getButtonProps:(e={})=>({...e,"aria-expanded":d,"aria-controls":f,onClick:ot(e.onClick,m)}),getDisclosureProps:(e={})=>({...e,hidden:!d,id:f})}}(),n=t.isOpen,r=t.onOpen,o=t.onClose;return(0,e.useEffect)((function(){var e;e=r,setTimeout((function(){e()}),3e4)}),[]),e.createElement(yC,{onMouseEnter:function(e){e&&e.pageY<=100&&r()}},e.createElement(ki,null),e.createElement(rp,null),e.createElement(rh,null),e.createElement(vh,null),e.createElement(Qw,null),e.createElement(sk,null),e.createElement(dk,null),e.createElement(gC,{isOpen:n,onClose:o},e.createElement(Jp,{title:" Intelligent search",content:" Our powerful search feature will help you find saved sites in no time at all. No need to trawl through all of your bookmarks.",imageComponent:e.createElement(dp,null)})))};var xC=String.raw,wC=xC`
  :root,
  :host {
    --chakra-vh: 100vh;
  }

  @supports (height: -webkit-fill-available) {
    :root,
    :host {
      --chakra-vh: -webkit-fill-available;
    }
  }

  @supports (height: -moz-fill-available) {
    :root,
    :host {
      --chakra-vh: -moz-fill-available;
    }
  }

  @supports (height: 100dvh) {
    :root,
    :host {
      --chakra-vh: 100dvh;
    }
  }
`,kC=()=>(0,qn.jsx)(sr,{styles:wC}),SC=({scope:e=""})=>(0,qn.jsx)(sr,{styles:xC`
      html {
        line-height: 1.5;
        -webkit-text-size-adjust: 100%;
        font-family: system-ui, sans-serif;
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;
        -moz-osx-font-smoothing: grayscale;
        touch-action: manipulation;
      }

      body {
        position: relative;
        min-height: 100%;
        margin: 0;
        font-feature-settings: "kern";
      }

      ${e} :where(*, *::before, *::after) {
        border-width: 0;
        border-style: solid;
        box-sizing: border-box;
        word-wrap: break-word;
      }

      main {
        display: block;
      }

      ${e} hr {
        border-top-width: 1px;
        box-sizing: content-box;
        height: 0;
        overflow: visible;
      }

      ${e} :where(pre, code, kbd,samp) {
        font-family: SFMono-Regular, Menlo, Monaco, Consolas, monospace;
        font-size: 1em;
      }

      ${e} a {
        background-color: transparent;
        color: inherit;
        text-decoration: inherit;
      }

      ${e} abbr[title] {
        border-bottom: none;
        text-decoration: underline;
        -webkit-text-decoration: underline dotted;
        text-decoration: underline dotted;
      }

      ${e} :where(b, strong) {
        font-weight: bold;
      }

      ${e} small {
        font-size: 80%;
      }

      ${e} :where(sub,sup) {
        font-size: 75%;
        line-height: 0;
        position: relative;
        vertical-align: baseline;
      }

      ${e} sub {
        bottom: -0.25em;
      }

      ${e} sup {
        top: -0.5em;
      }

      ${e} img {
        border-style: none;
      }

      ${e} :where(button, input, optgroup, select, textarea) {
        font-family: inherit;
        font-size: 100%;
        line-height: 1.15;
        margin: 0;
      }

      ${e} :where(button, input) {
        overflow: visible;
      }

      ${e} :where(button, select) {
        text-transform: none;
      }

      ${e} :where(
          button::-moz-focus-inner,
          [type="button"]::-moz-focus-inner,
          [type="reset"]::-moz-focus-inner,
          [type="submit"]::-moz-focus-inner
        ) {
        border-style: none;
        padding: 0;
      }

      ${e} fieldset {
        padding: 0.35em 0.75em 0.625em;
      }

      ${e} legend {
        box-sizing: border-box;
        color: inherit;
        display: table;
        max-width: 100%;
        padding: 0;
        white-space: normal;
      }

      ${e} progress {
        vertical-align: baseline;
      }

      ${e} textarea {
        overflow: auto;
      }

      ${e} :where([type="checkbox"], [type="radio"]) {
        box-sizing: border-box;
        padding: 0;
      }

      ${e} input[type="number"]::-webkit-inner-spin-button,
      ${e} input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none !important;
      }

      ${e} input[type="number"] {
        -moz-appearance: textfield;
      }

      ${e} input[type="search"] {
        -webkit-appearance: textfield;
        outline-offset: -2px;
      }

      ${e} input[type="search"]::-webkit-search-decoration {
        -webkit-appearance: none !important;
      }

      ${e} ::-webkit-file-upload-button {
        -webkit-appearance: button;
        font: inherit;
      }

      ${e} details {
        display: block;
      }

      ${e} summary {
        display: list-item;
      }

      template {
        display: none;
      }

      [hidden] {
        display: none !important;
      }

      ${e} :where(
          blockquote,
          dl,
          dd,
          h1,
          h2,
          h3,
          h4,
          h5,
          h6,
          hr,
          figure,
          p,
          pre
        ) {
        margin: 0;
      }

      ${e} button {
        background: transparent;
        padding: 0;
      }

      ${e} fieldset {
        margin: 0;
        padding: 0;
      }

      ${e} :where(ol, ul) {
        margin: 0;
        padding: 0;
      }

      ${e} textarea {
        resize: vertical;
      }

      ${e} :where(button, [role="button"]) {
        cursor: pointer;
      }

      ${e} button::-moz-focus-inner {
        border: 0 !important;
      }

      ${e} table {
        border-collapse: collapse;
      }

      ${e} :where(h1, h2, h3, h4, h5, h6) {
        font-size: inherit;
        font-weight: inherit;
      }

      ${e} :where(button, input, optgroup, select, textarea) {
        padding: 0;
        line-height: inherit;
        color: inherit;
      }

      ${e} :where(img, svg, video, canvas, audio, iframe, embed, object) {
        display: block;
      }

      ${e} :where(img, video) {
        max-width: 100%;
        height: auto;
      }

      [data-js-focus-visible]
        :focus:not([data-focus-visible-added]):not(
          [data-focus-visible-disabled]
        ) {
        outline: none;
        box-shadow: none;
      }

      ${e} select::-ms-expand {
        display: none;
      }

      ${wC}
    `});function EC(t){const{cssVarsRoot:n,theme:r,children:o}=t,a=(0,e.useMemo)((()=>function(e){var t;const n=function(e){const{__cssMap:t,__cssVars:n,__breakpoints:r,...o}=e;return o}(e),r=function(e){return function(e,t){const n={};for(const r of t)r in e&&(n[r]=e[r]);return n}(e,je)}(n),o=function(e){return e.semanticTokens}(n),a=function({tokens:e,semanticTokens:t}){const n={};return Re(e,((e,t)=>{null!=e&&(n[t.join(".")]={isSemantic:!1,value:e})})),Re(t,((e,t)=>{null!=e&&(n[t.join(".")]={isSemantic:!0,value:e})}),{stop:e=>Object.keys(e).every(Ie)}),n}({tokens:r,semanticTokens:o}),s=null==(t=n.config)?void 0:t.cssVarPrefix,{cssMap:l,cssVars:c}=function(e,t){let n={};const r={};for(const[o,a]of Object.entries(e)){const{isSemantic:s,value:l}=a,{variable:c,reference:u}=Oe(o,null==t?void 0:t.cssVarPrefix);if(!s){if(o.startsWith("space")){const e=o.split("."),[t,...n]=e,a=`${t}.-${n.join(".")}`,i=le.negate(l),s=le.negate(u);r[a]={value:i,var:c,varRef:s}}n[c]=l,r[o]={value:l,var:c,varRef:u};continue}const d=n=>{const r=[String(o).split(".")[0],n].join(".");if(!e[r])return n;const{reference:a}=Oe(r,null==t?void 0:t.cssVarPrefix);return a},f=i(l)?l:{default:l};n=p(n,Object.entries(f).reduce(((e,[t,n])=>{var r,o;if(!n)return e;const a=d(`${n}`);return"default"===t?(e[c]=a,e):(e[null!=(o=null==(r=Me)?void 0:r[t])?o:t]={[c]:a},e)}),{})),r[o]={value:u,var:c,varRef:u}}return{cssVars:n,cssMap:r}}(a,{cssVarPrefix:s});return Object.assign(n,{__cssVars:{"--chakra-ring-inset":"var(--chakra-empty,/*!*/ /*!*/)","--chakra-ring-offset-width":"0px","--chakra-ring-offset-color":"#fff","--chakra-ring-color":"rgba(66, 153, 225, 0.6)","--chakra-ring-offset-shadow":"0 0 #0000","--chakra-ring-shadow":"0 0 #0000","--chakra-space-x-reverse":"0","--chakra-space-y-reverse":"0",...c},__cssMap:l,__breakpoints:be(n.breakpoints)}),n}(r)),[r]);return(0,qn.jsxs)(On,{theme:a,children:[(0,qn.jsx)(CC,{root:n}),o]})}function CC({root:e=":host, :root"}){const t=[e,"[data-theme]"].join(",");return(0,qn.jsx)(sr,{styles:e=>({[t]:e.__cssVars})})}var[_C,PC]=function(t={}){const{strict:n=!0,errorMessage:r="useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",name:o}=t,a=(0,e.createContext)(void 0);return a.displayName=o,[a.Provider,function t(){var o;const i=(0,e.useContext)(a);if(!i&&n){const e=new Error(r);throw e.name="ContextError",null==(o=Error.captureStackTrace)||o.call(Error,e,t),e}return i},a]}({name:"StylesContext",errorMessage:"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "});function AC(){const{colorMode:e}=Ze();return(0,qn.jsx)(sr,{styles:t=>{const n=rt(et(t,"styles.global"),{theme:t,colorMode:e});if(n)return He(n)(t)}})}var TC,zC={light:"chakra-ui-light",dark:"chakra-ui-dark"},MC="chakra-ui-color-mode",FC=(TC=MC,{ssr:!1,type:"localStorage",get(e){if(!(null==globalThis?void 0:globalThis.document))return e;let t;try{t=localStorage.getItem(TC)||e}catch(e){}return t||e},set(e){try{localStorage.setItem(TC,e)}catch(e){}}});var OC=()=>{};function RC(e,t){return"cookie"===e.type&&e.ssr?e.get(t):t}function jC(t){const{value:n,children:r,options:{useSystemColorMode:o,initialColorMode:a,disableTransitionOnChange:i}={},colorModeManager:s=FC}=t,l="dark"===a?"dark":"light",[c,u]=(0,e.useState)((()=>RC(s,l))),[d,f]=(0,e.useState)((()=>RC(s))),{getSystemTheme:p,setClassName:h,setDataset:m,addListener:g}=(0,e.useMemo)((()=>function(e={}){const{preventTransition:t=!0}=e,n={setDataset:e=>{const r=t?n.preventTransition():void 0;document.documentElement.dataset.theme=e,document.documentElement.style.colorScheme=e,null==r||r()},setClassName(e){document.body.classList.add(e?zC.dark:zC.light),document.body.classList.remove(e?zC.light:zC.dark)},query:()=>window.matchMedia("(prefers-color-scheme: dark)"),getSystemTheme(e){var t;return(null!=(t=n.query().matches)?t:"dark"===e)?"dark":"light"},addListener(e){const t=n.query(),r=t=>{e(t.matches?"dark":"light")};return"function"==typeof t.addListener?t.addListener(r):t.addEventListener("change",r),()=>{"function"==typeof t.removeListener?t.removeListener(r):t.removeEventListener("change",r)}},preventTransition(){const e=document.createElement("style");return e.appendChild(document.createTextNode("*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}")),document.head.appendChild(e),()=>{window.getComputedStyle(document.body),requestAnimationFrame((()=>{requestAnimationFrame((()=>{document.head.removeChild(e)}))}))}}};return n}({preventTransition:i})),[i]),v="system"!==a||c?c:d,y=(0,e.useCallback)((e=>{const t="system"===e?p():e;u(t),h("dark"===t),m(t),s.set(t)}),[s,p,h,m]);Pi((()=>{"system"===a&&f(p())}),[]),(0,e.useEffect)((()=>{const e=s.get();y(e||("system"!==a?l:"system"))}),[s,l,a,y]);const b=(0,e.useCallback)((()=>{y("dark"===v?"light":"dark")}),[v,y]);(0,e.useEffect)((()=>{if(o)return g(y)}),[o,g,y]);const x=(0,e.useMemo)((()=>({colorMode:null!=n?n:v,toggleColorMode:n?OC:b,setColorMode:n?OC:y,forced:void 0!==n})),[v,b,y,n]);return(0,qn.jsx)(Ke.Provider,{value:x,children:r})}jC.displayName="ColorModeProvider";var IC=e=>{const{children:t,colorModeManager:n,portalZIndex:r,resetScope:o,resetCSS:a=!0,theme:i={},environment:s,cssVarsRoot:l,disableEnvironment:c,disableGlobalStyle:u}=e,d=(0,qn.jsx)(Ti,{environment:s,disabled:c,children:t});return(0,qn.jsx)(EC,{theme:i,cssVarsRoot:l,children:(0,qn.jsxs)(jC,{colorModeManager:n,options:i.config,children:[a?(0,qn.jsx)(SC,{scope:o}):(0,qn.jsx)(kC,{}),!u&&(0,qn.jsx)(AC,{}),r?(0,qn.jsx)(Pk,{zIndex:r,children:d}):d]})})},NC=(e,t)=>e.find((e=>e.id===t));function DC(e,t){const n=LC(e,t);return{position:n,index:n?e[n].findIndex((e=>e.id===t)):-1}}function LC(e,t){for(const[n,r]of Object.entries(e))if(NC(r,t))return n}function BC(e){return{position:"fixed",zIndex:"var(--toast-z-index, 5500)",pointerEvents:"none",display:"flex",flexDirection:"column",margin:"top"===e||"bottom"===e?"0 auto":void 0,top:e.includes("top")?"env(safe-area-inset-top, 0px)":void 0,bottom:e.includes("bottom")?"env(safe-area-inset-bottom, 0px)":void 0,right:e.includes("left")?void 0:"env(safe-area-inset-right, 0px)",left:e.includes("right")?void 0:"env(safe-area-inset-left, 0px)"}}function $C(t,n){const r=(0,e.useRef)(!1),o=(0,e.useRef)(!1);(0,e.useEffect)((()=>{if(r.current&&o.current)return t();o.current=!0}),n),(0,e.useEffect)((()=>(r.current=!0,()=>{r.current=!1})),[])}var VC={initial:e=>{const{position:t}=e,n=["top","bottom"].includes(t)?"y":"x";let r=["top-right","bottom-right"].includes(t)?1:-1;return"bottom"===t&&(r=1),{opacity:0,[n]:24*r}},animate:{opacity:1,y:0,x:0,scale:1,transition:{duration:.4,ease:[.4,0,.2,1]}},exit:{opacity:0,scale:.85,transition:{duration:.2,ease:[.4,0,1,1]}}},WC=(0,e.memo)((t=>{const{id:n,message:r,onCloseComplete:o,onRequestRemove:a,requestClose:i=!1,position:s="bottom",duration:c=5e3,containerStyle:u,motionVariants:d=VC,toastSpacing:f="0.5rem"}=t,[p,h]=(0,e.useState)(c),m=null===(g=(0,e.useContext)(Yh))||g.isPresent;var g;$C((()=>{m||null==o||o()}),[m]),$C((()=>{h(c)}),[c]);const v=()=>{m&&a()};(0,e.useEffect)((()=>{m&&i&&a()}),[m,i,a]),function(t,n){const r=Tp(t);(0,e.useEffect)((()=>{if(null==n)return;let e=null;return e=window.setTimeout((()=>{r()}),n),()=>{e&&window.clearTimeout(e)}}),[n,r])}(v,p);const y=(0,e.useMemo)((()=>({pointerEvents:"auto",maxWidth:560,minWidth:300,margin:f,...u})),[u,f]),b=(0,e.useMemo)((()=>function(e){let t="center";return e.includes("right")&&(t="flex-end"),e.includes("left")&&(t="flex-start"),{display:"flex",flexDirection:"column",alignItems:t}}(s)),[s]);return(0,qn.jsx)(Ww.div,{layout:!0,className:"chakra-toast",variants:d,initial:"initial",animate:"animate",exit:"exit",onHoverStart:()=>h(null),onHoverEnd:()=>h(c),custom:{position:s},style:b,children:(0,qn.jsx)(Un.div,{role:"status","aria-atomic":"true",className:"chakra-toast__inner",__css:y,children:l(r,{id:n,onClose:v})})})}));function HC(e){return(0,qn.jsx)(Fh,{viewBox:"0 0 24 24",...e,children:(0,qn.jsx)("path",{fill:"currentColor",d:"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"})})}WC.displayName="ToastComponent";var[UC,qC]=rr({name:"AlertContext",hookName:"useAlertContext",providerName:"<Alert />"}),[GC,YC]=rr({name:"AlertStylesContext",hookName:"useAlertStyles",providerName:"<Alert />"}),XC={info:{icon:function(e){return(0,qn.jsx)(Fh,{viewBox:"0 0 24 24",...e,children:(0,qn.jsx)("path",{fill:"currentColor",d:"M12,0A12,12,0,1,0,24,12,12.013,12.013,0,0,0,12,0Zm.25,5a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,12.25,5ZM14.5,18.5h-4a1,1,0,0,1,0-2h.75a.25.25,0,0,0,.25-.25v-4.5a.25.25,0,0,0-.25-.25H10.5a1,1,0,0,1,0-2h1a2,2,0,0,1,2,2v4.75a.25.25,0,0,0,.25.25h.75a1,1,0,1,1,0,2Z"})})},colorScheme:"blue"},warning:{icon:HC,colorScheme:"orange"},success:{icon:function(e){return(0,qn.jsx)(Fh,{viewBox:"0 0 24 24",...e,children:(0,qn.jsx)("path",{fill:"currentColor",d:"M12,0A12,12,0,1,0,24,12,12.014,12.014,0,0,0,12,0Zm6.927,8.2-6.845,9.289a1.011,1.011,0,0,1-1.43.188L5.764,13.769a1,1,0,1,1,1.25-1.562l4.076,3.261,6.227-8.451A1,1,0,1,1,18.927,8.2Z"})})},colorScheme:"green"},error:{icon:HC,colorScheme:"red"},loading:{icon:mr,colorScheme:"blue"}},QC=r((function(e,t){var n;const{status:r="info",addRole:o=!0,...i}=Ge(e),s=null!=(n=e.colorScheme)?n:function(e){return XC[e].colorScheme}(r),l=pr("Alert",{...e,colorScheme:s}),c={width:"100%",display:"flex",alignItems:"center",position:"relative",overflow:"hidden",...l.container};return(0,qn.jsx)(UC,{value:{status:r},children:(0,qn.jsx)(GC,{value:l,children:(0,qn.jsx)(Un.div,{"data-status":r,role:o?"alert":void 0,ref:t,...i,className:a("chakra-alert",e.className),__css:c})})})}));function KC(e){const{status:t}=qC(),n=function(e){return XC[e].icon}(t),r=YC(),o="loading"===t?r.spinner:r.icon;return(0,qn.jsx)(Un.span,{display:"inherit","data-status":t,...e,className:a("chakra-alert__icon",e.className),__css:o,children:e.children||(0,qn.jsx)(n,{h:"100%",w:"100%"})})}QC.displayName="Alert",KC.displayName="AlertIcon";var ZC=r((function(e,t){const n=YC(),{status:r}=qC();return(0,qn.jsx)(Un.div,{ref:t,"data-status":r,...e,className:a("chakra-alert__title",e.className),__css:n.title})}));ZC.displayName="AlertTitle";var JC=r((function(e,t){const n=YC(),{status:r}=qC(),o={display:"inline",...n.description};return(0,qn.jsx)(Un.div,{ref:t,"data-status":r,...e,className:a("chakra-alert__desc",e.className),__css:o})}));function e_(e){return(0,qn.jsx)(Fh,{focusable:"false","aria-hidden":!0,...e,children:(0,qn.jsx)("path",{fill:"currentColor",d:"M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z"})})}JC.displayName="AlertDescription";var t_=r((function(e,t){const n=fr("CloseButton",e),{children:r,isDisabled:o,__css:a,...i}=Ge(e);return(0,qn.jsx)(Un.button,{type:"button","aria-label":"Close",ref:t,disabled:o,__css:{outline:0,display:"flex",alignItems:"center",justifyContent:"center",flexShrink:0,...n,...a},...i,children:r||(0,qn.jsx)(e_,{width:"1em",height:"1em"})})}));t_.displayName="CloseButton";var n_=function(e){let t=e;const n=new Set,r=e=>{t=e(t),n.forEach((e=>e()))};return{getState:()=>t,subscribe:t=>(n.add(t),()=>{r((()=>e)),n.delete(t)}),removeToast:(e,t)=>{r((n=>({...n,[t]:n[t].filter((t=>t.id!=e))})))},notify:(e,t)=>{const n=function(e,t={}){var n,r;r_+=1;const o=null!=(n=t.id)?n:r_,a=null!=(r=t.position)?r:"bottom";return{id:o,message:e,position:a,duration:t.duration,onCloseComplete:t.onCloseComplete,onRequestRemove:()=>n_.removeToast(String(o),a),status:t.status,requestClose:!1,containerStyle:t.containerStyle}}(e,t),{position:o,id:a}=n;return r((e=>{var t,r;const a=o.includes("top")?[n,...null!=(t=e[o])?t:[]]:[...null!=(r=e[o])?r:[],n];return{...e,[o]:a}})),a},update:(e,t)=>{e&&r((n=>{const r={...n},{position:o,index:a}=DC(r,e);return o&&-1!==a&&(r[o][a]={...r[o][a],...t,message:a_(t)}),r}))},closeAll:({positions:e}={})=>{r((t=>(null!=e?e:["bottom","bottom-right","bottom-left","top","top-left","top-right"]).reduce(((e,n)=>(e[n]=t[n].map((e=>({...e,requestClose:!0}))),e)),{...t})))},close:e=>{r((t=>{const n=LC(t,e);return n?{...t,[n]:t[n].map((t=>t.id==e?{...t,requestClose:!0}:t))}:t}))},isActive:e=>Boolean(DC(n_.getState(),e).position)}}({top:[],"top-left":[],"top-right":[],"bottom-left":[],bottom:[],"bottom-right":[]}),r_=0,o_=e=>{const{status:t,variant:n="solid",id:r,title:o,isClosable:a,onClose:i,description:s,colorScheme:l,icon:c}=e,u=r?{root:`toast-${r}`,title:`toast-${r}-title`,description:`toast-${r}-description`}:void 0;return(0,qn.jsxs)(QC,{addRole:!1,status:t,variant:n,id:null==u?void 0:u.root,alignItems:"start",borderRadius:"md",boxShadow:"lg",paddingEnd:8,textAlign:"start",width:"auto",colorScheme:l,children:[(0,qn.jsx)(KC,{children:c}),(0,qn.jsxs)(Un.div,{flex:"1",maxWidth:"100%",children:[o&&(0,qn.jsx)(ZC,{id:null==u?void 0:u.title,children:o}),s&&(0,qn.jsx)(JC,{id:null==u?void 0:u.description,display:"block",children:s})]}),a&&(0,qn.jsx)(t_,{size:"sm",onClick:i,position:"absolute",insetEnd:1,top:1})]})};function a_(e={}){const{render:t,toastComponent:n=o_}=e;return r=>"function"==typeof t?t({...r,...e}):(0,qn.jsx)(n,{...r,...e})}var[i_,s_]=rr({name:"ToastOptionsContext",strict:!1}),l_=t=>{const n=(0,e.useSyncExternalStore)(n_.subscribe,n_.getState,n_.getState),{motionVariants:r,component:o=WC,portalProps:a}=t,i=Object.keys(n).map((e=>{const t=n[e];return(0,qn.jsx)("div",{role:"region","aria-live":"polite","aria-label":`Notifications-${e}`,id:`chakra-toast-manager-${e}`,style:BC(e),children:(0,qn.jsx)(om,{initial:!1,children:t.map((e=>(0,qn.jsx)(o,{motionVariants:r,...e},e.id)))})},e)}));return(0,qn.jsx)(jk,{...a,children:i})},c_=e=>function({children:t,theme:n=e,toastOptions:r,...o}){return(0,qn.jsxs)(IC,{theme:n,...o,children:[(0,qn.jsx)(i_,{value:null==r?void 0:r.defaultOptions,children:t}),(0,qn.jsx)(l_,{...r})]})},u_=c_(Wf),d_=(c_(Hf),o(379)),f_=o.n(d_),p_=o(795),h_=o.n(p_),m_=o(569),g_=o.n(m_),v_=o(565),y_=o.n(v_),b_=o(216),x_=o.n(b_),w_=o(589),k_=o.n(w_),S_=o(358),E_={};E_.styleTagTransform=k_(),E_.setAttributes=y_(),E_.insert=g_().bind(null,"head"),E_.domAPI=h_(),E_.insertStyleElement=x_(),f_()(S_.Z,E_),S_.Z&&S_.Z.locals&&S_.Z.locals,n.createRoot(document.getElementById("root")).render(e.createElement(e.StrictMode,null,e.createElement(u_,{theme:Kf},e.createElement(bC,null))))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,